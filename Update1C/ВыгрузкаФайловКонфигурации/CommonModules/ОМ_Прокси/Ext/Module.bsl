
Процедура Сохранить_Прокси(Структура, БезПроверки = Ложь, ПисатьРезультатВЖурнал = Истина) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Прокси.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Прокси КАК Прокси
	|ГДЕ
	|	Прокси.ИП = &ИП
	|	И Прокси.Порт = &Порт";
	
	Запрос.УстановитьПараметр("ИП", 	Структура.ИП);
	Запрос.УстановитьПараметр("Порт", 	Структура.Порт);
	
	ТаблицаПрокси = Запрос.Выполнить().Выгрузить();
	
	ЕстьВТЧ = ТаблицаПрокси.Количество() > 0;

	Если БезПроверки
		Или Не ЕстьВТЧ Тогда
		
		Сохранить_НовыйПрокси(Структура, ПисатьРезультатВЖурнал);
		
	Иначе
		
		Обновить_Прокси(ТаблицаПрокси[0].Ссылка, Структура, ПисатьРезультатВЖурнал);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура Обновить_Прокси(Ссылка, Структура, ПисатьРезультатВЖурнал = Истина) Экспорт
	
	Спр = Ссылка.ПолучитьОбъект();
	
	ЗаполнитьЗначенияСвойств(Спр, Структура);
	
	Если Не ЗначениеЗаполнено(Спр.Страна) Тогда
		Спр.Страна = Справочники.СтраныМира.ОбработкаСтраны(Структура);
	КонецЕсли;
	
	Попытка 
		
		Спр.Записать();
		
		Если ПисатьРезультатВЖурнал Тогда
			ОМ_Сервер.НоваяЗаписьЖурнала(3, "ОМ_Прокси.Обновить_Прокси", "Обновлен прокси", Спр.Ссылка);
		КонецЕсли;
		
	Исключение
		ОМ_Сервер.НоваяЗаписьЖурнала(0, "ОМ_Прокси.Обновить_Прокси", "Не удалось обновить прокси" + Символы.ПС + ОписаниеОшибки(), Спр.Ссылка);
	КонецПопытки;

	
КонецПроцедуры

Процедура Сохранить_НовыйПрокси(Структура, ПисатьРезультатВЖурнал = Истина) Экспорт
	
	Спр = Справочники.Прокси.СоздатьЭлемент();
	
	ЗаполнитьЗначенияСвойств(Спр, Структура);
	
	Если Не ЗначениеЗаполнено(Спр.Страна) Тогда
		Спр.Страна = Справочники.СтраныМира.ОбработкаСтраны(Структура);
	КонецЕсли;

	Попытка 
		
		Спр.Записать();
		
		Если ПисатьРезультатВЖурнал Тогда
			ОМ_Сервер.НоваяЗаписьЖурнала(3, "ОМ_Прокси.Сохранить_НовыйПрокси", "Загружен новый прокси", Спр.Ссылка);
		КонецЕсли;
		
	Исключение
		ОМ_Сервер.НоваяЗаписьЖурнала(0, "ОМ_Прокси.Сохранить_НовыйПрокси", "Не удалось записать новый прокси" + Символы.ПС + ОписаниеОшибки());
	КонецПопытки;

КонецПроцедуры

Функция Получить_ДатуПоследнегоОбновления() Экспорт
	
	Возврат Константы.Прокси_ДатаЗагрузки.Получить();
	
КонецФункции

Функция Получить_ЗначениеЗадержки() Экспорт
	
	Значение = Константы.Прокси_Задержка.Получить();
	
	Если Значение = 0 Тогда
		
		Значение = 300;
		Сохранить_ЗначениеЗадержки(Значение);
		
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции

Функция Получить_ДатуПоследнегоОбращения() Экспорт
	
	Возврат Константы.Прокси_ПоследнееОбращение.Получить();
	
КонецФункции

Функция Получить_Ключ_HideMe() Экспорт
	
	Возврат Константы.Прокси_КлючHideMe.Получить();
	
КонецФункции

Процедура ОбработатьМассивПроксиНаСервере(ИсходныйТекстHTML, Знач ФорматВывода) Экспорт
		
	ВременныйФайл 	= ПолучитьИмяВременногоФайла(ФорматВывода);
	
	Запись 		  	= Новый ЗаписьТекста(ВременныйФайл, КодировкаТекста.UTF8);
	
	Запись.Записать(ИсходныйТекстHTML);
	
	Запись.Закрыть();
	
	ЧтениеHTML 	  	 = Новый ЧтениеHTML;
	                            
	СтруктураСтрокой = Получить_СтруктуруПрокси_Строкой();
	
	Если ФорматВывода = "xml" Тогда
		
		ЧтениеXML = Новый ЧтениеXML;
		
		ЧтениеXML.ОткрытьФайл(ВременныйФайл);
		
		СтрочкиФайлаXML = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
		
		Итератор = 1;
		
		Если СтрочкиФайлаXML <> Неопределено 
			И СтрочкиФайлаXML.Свойства().Получить("item") <> Неопределено Тогда
			
			Для Каждого ЭлементСписка Из СтрочкиФайлаXML.item Цикл
				
				Структура = Новый Структура(СтруктураСтрокой);
				
				Структура.ИП 			= ЭлементСписка.ip;
				Структура.Порт 			= Число(ЭлементСписка.port);
				Структура.КодСтраны 	= ЭлементСписка.country_code;
				Структура.Страна 		= ЭлементСписка.country_name;
				Структура.Задержка  	= ЭлементСписка.delay;
				Структура.ЕстьSocks4  	= ЭлементСписка.Socks4 = "1";
				Структура.ЕстьSocks5  	= ЭлементСписка.Socks5 = "1";
				Структура.ЕстьSSL  		= ЭлементСписка.SSL	   = "1";
				
				Структура.Использован  	= Ложь;
				Структура.Работает  	= Ложь;
				
				Сохранить_Прокси(Структура, Ложь, Ложь);
				
				ОМ_Сервер.НоваяЗаписьЖурнала(2, "ОМ_Прокси.ОбработатьМассивПроксиНаСервере", "Обработано " + Формат(Итератор, "ЧН=0; ЧГ=0") + " из " + Формат(СтрочкиФайлаXML.item.Количество(), "ЧН=0; ЧГ=0"));
				
				Итератор = Итератор + 1;
				
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = Формат(Итератор, "ЧН=0; ЧГ=0") + "/" + Формат(СтрочкиФайлаXML.item.Количество(), "ЧН=0; ЧГ=0");
				Сообщение.Сообщить();
				
			КонецЦикла;
			
			ЧтениеXML.Закрыть();
			УдалитьФайлы(ВременныйФайл);
			
		Иначе
			
			ОМ_Сервер.НоваяЗаписьЖурнала(1, "ОМ_Прокси.ОбработатьМассивПроксиНаСервере", "Не удалось обработать " + ОМ_КлиентСервер.ОбернутьВКавычки(ВременныйФайл));
			
		КонецЕсли;
		
	Иначе
		
		ОМ_Сервер.НоваяЗаписьЖурнала(0, "ОМ_Прокси.ОбработатьМассивПроксиНаСервере", "Метод не описан для формата вывода " + ОМ_КлиентСервер.ОбернутьВКавычки(ФорматВывода));
		
	КонецЕсли;
		
КонецПроцедуры

Функция ДляКонстант_НоваяТаблицаПрокси() Экспорт
	
	ТаблицаЗначений = Новый ТаблицаЗначений;
	
	МетаДанныеТЧ = Метаданные.Справочники.Прокси.Реквизиты;
	
	Для Каждого ОписаниеРеквизита Из МетаДанныеТЧ Цикл
		
		ТаблицаЗначений.Колонки.Добавить(ОписаниеРеквизита.Имя, ОписаниеРеквизита.Тип);
		
	КонецЦикла;
	
	Возврат ТаблицаЗначений;
	
КонецФункции

Функция Получить_ПереченьПрокси(ТолькоПолучение = Ложь, Отборы = Неопределено, Все = Ложь) Экспорт
	
	Если Не ТолькоПолучение Тогда
		Загрузить_СписокПроксиСПортала();
	КонецЕсли;

	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Прокси.Наименование КАК Наименование,
	|	Прокси.Использован КАК Использован,
	|	Прокси.ЕстьSocks4 КАК ЕстьSocks4,
	|	Прокси.ЕстьSocks5 КАК ЕстьSocks5,
	|	Прокси.ЕстьSSL КАК ЕстьSSL,
	|	Прокси.Задержка КАК Задержка,
	|	Прокси.ИП КАК ИП,
	|	Прокси.КодСтраны КАК КодСтраны,
	|	Прокси.Порт КАК Порт,
	|	Прокси.Работает КАК Работает,
	|	Прокси.Страна КАК Страна,
	|	Прокси.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Прокси КАК Прокси
	|ГДЕ
	|	ИСТИНА";
	
	Если Не Все Тогда
		Запрос.Текст = Запрос.Текст + "
		|	И НЕ Прокси.ПометкаУдаления";
	КонецЕсли;
	
	Если Отборы <> Неопределено Тогда
		
		Если Отборы.Свойство("Работает") Тогда
			
			Запрос.Текст = Запрос.Текст + "
			|	И Прокси.Работает = &Работает";
			
			Запрос.УстановитьПараметр("Работает", Отборы.Работает);
			
		КонецЕсли;
		
		Если Отборы.Свойство("Использован") Тогда
			
			Запрос.Текст = Запрос.Текст + "
			|	И Прокси.Использован = &Использован";
			
			Запрос.УстановитьПараметр("Использован", Отборы.Использован);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция Получить_ПериодОбновленияПрокси() Экспорт
	
	Результат = Константы.Прокси_ПериодОбновления.Получить();
	
	Возврат Результат;
	
КонецФункции

Функция Получить_СписокДопустимыхСтранПрокси() Экспорт
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СтраныМира.Код КАК Код
	|ИЗ
	|	Справочник.СтраныМира КАК СтраныМира
	|ГДЕ
	|	НЕ СтраныМира.ПометкаУдаления
	|	И СтраныМира.Код <> """"
	|	И СтраныМира.Использовать";
	
	Результат = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Код");
	
	Возврат СтрСоединить(Результат, "");
	
КонецФункции

Функция Получить_СтруктуруПрокси_Массивом() Экспорт
		
	Массив = Новый Массив;
	
	ТаблицаЗначений = ДляКонстант_НоваяТаблицаПрокси();
	
	Для Каждого Колонка Из ТаблицаЗначений.Колонки Цикл
		
		Массив.Добавить(Колонка.Имя);
		
	КонецЦикла;

	Возврат Массив;
	
КонецФункции

Функция Получить_СтруктуруПрокси_Строкой() Экспорт
	
	МассивКолонок = Получить_СтруктуруПрокси_Массивом();
	
	Возврат СтрСоединить(МассивКолонок, ",");
	
КонецФункции

Функция Получить_СтруктуруПрокси_Структурой() Экспорт
		
	Возврат Новый Структура(Получить_СтруктуруПрокси_Строкой());
	
КонецФункции

Функция Проверить_ПроксиРаботает(ПроксиСсылка, Записывать = Ложь) Экспорт
	
	Источник_СтрокаТЧ 		= ОМ_Парсинг.Получить_ТекущийИсточникЗагрузки();
	
	HTTPСоединение 			= ОМ_Соединения.Получить_HTTPСоединение(Источник_СтрокаТЧ.Сервер, ПроксиСсылка);
	
	Запрос 					= Новый HTTPЗапрос;
	
	Запрос.Заголовки.Вставить("Connection", "keep-alive");
	Запрос.АдресРесурса = Источник_СтрокаТЧ.Адрес;
	
	Попытка
		ОтветHTTP 			= HTTPСоединение.Получить(Запрос);
	Исключение
		
		Если Записывать Тогда
			
			Структура = ПолучитьСтруктуруИзСсылкиПрокси(ПроксиСсылка);
			
			Структура.Работает = Ложь;
			
			Обновить_Прокси(ПроксиСсылка, Структура, Ложь);
			
		КонецЕсли;
		
		Возврат Ложь;
		
	КонецПопытки;
	
	Если ОтветHTTP.КодСостояния = 302 Тогда
		
		НовыйАдрес 			= ОМ_Соединения.ПолучитьЗаголовокОтвета(ОтветHTTP.Заголовки, "Location");
		
		Если Не ЗначениеЗаполнено(НовыйАдрес) Тогда
			
			Если Записывать Тогда
				
				Структура = ПолучитьСтруктуруИзСсылкиПрокси(ПроксиСсылка);
				
				Структура.Работает = Ложь;
				
				Обновить_Прокси(ПроксиСсылка, Структура, Ложь);
					
			КонецЕсли;
			
			Возврат Ложь;
			
		КонецЕсли;
		
		Если СтрНайти(НовыйАдрес, Источник_СтрокаТЧ.Сервер) = 0 Тогда
			
			Если Записывать Тогда
				
				Структура = ПолучитьСтруктуруИзСсылкиПрокси(ПроксиСсылка);
				
				Структура.Работает = Ложь;
				
				Обновить_Прокси(ПроксиСсылка, Структура, Ложь);
						
			КонецЕсли;
			
			Возврат Ложь;
			
		КонецЕсли;
		
		СтруктураАдреса 	= ОМ_Соединения.СтруктураURI(НовыйАдрес);
		
		HTTPСоединение 		= ОМ_Соединения.Получить_HTTPСоединение(СтруктураАдреса.ИмяСервера, ПроксиСсылка);
		
		Запрос 				= Новый HTTPЗапрос;
		
		Запрос.Заголовки.Вставить("Connection", "keep-alive");
		Запрос.АдресРесурса = СтруктураАдреса.ПутьНаСервере;
		
		Попытка
			ОтветHTTP 		= HTTPСоединение.Получить(Запрос);
		Исключение
			
			Если Записывать Тогда
				
				Структура = ПолучитьСтруктуруИзСсылкиПрокси(ПроксиСсылка);
				
				Структура.Работает = Ложь;
				
				Обновить_Прокси(ПроксиСсылка, Структура, Ложь);
				
			КонецЕсли;
			
			Возврат Ложь;
			
		КонецПопытки;
		
	КонецЕсли;
	
	Если ОтветHTTP.КодСостояния >= 200 И ОтветHTTP.КодСостояния <= 299 Тогда
				
		ЧтениеHTML 			= Новый ЧтениеHTML;
		
		ИсходныйТекст		= ОтветHTTP.ПолучитьТелоКакСтроку();
		ЧтениеHTML.УстановитьСтроку(ИсходныйТекст);
		
		Построитель 		= Новый ПостроительDOM;
		ДокументHTML 		= Построитель.Прочитать(ЧтениеHTML);
		
		Если Врег(СокрЛП(ДокументHTML.Заголовок)) = Врег("Адресное бюро Санкт-Петербурга") Тогда
			
			Если Записывать Тогда
				
				Структура = ПолучитьСтруктуруИзСсылкиПрокси(ПроксиСсылка);
				
				Структура.Работает = Истина;
				
				Обновить_Прокси(ПроксиСсылка, Структура, Ложь);
				
			КонецЕсли;
			
			Источник_СтрокаТЧ.Сервер   = HTTPСоединение.Сервер;
			Источник_СтрокаТЧ.Адрес    = Запрос.АдресРесурса;
			
			ОМ_Парсинг.Обновить_Источник(Источник_СтрокаТЧ);
			
			Возврат Истина;
			
		Иначе
			
			Если Записывать Тогда
				
				Структура = ПолучитьСтруктуруИзСсылкиПрокси(ПроксиСсылка);
				
				Структура.Работает = Ложь;
				
				Обновить_Прокси(ПроксиСсылка, Структура, Ложь);
				
			КонецЕсли;
			
			Возврат Ложь;
			
		КонецЕсли;
		
	Иначе
		
		Если Записывать Тогда
			
			Структура = ПолучитьСтруктуруИзСсылкиПрокси(ПроксиСсылка);
			
			Структура.Работает = Ложь;
			
			Обновить_Прокси(ПроксиСсылка, Структура, Ложь);
			
		КонецЕсли;
		
		Возврат Ложь;
		
	КонецЕсли;
	
КонецФункции

Функция ПолучитьСтруктуруИзСсылкиПрокси(ПроксиСсылка) ЭКспорт
	
	Структура = Новый Структура(Получить_СтруктуруПрокси_Строкой());
	ЗаполнитьЗначенияСвойств(Структура, ПроксиСсылка);
	
	Возврат Структура;
	
КонецФункции

Функция ПроксиИспользован(ПроксиСсылка) Экспорт
	
	Возврат ПроксиСсылка.Использован;
	
КонецФункции

Процедура Сохранить_ЗначениеЗадержки(Значение) Экспорт
	
	Константы.Прокси_Задержка.Установить(Значение);
	
КонецПроцедуры

Процедура Сохранить_МаксЧислоПопытокПереподключенияПрокси(Значение) Экспорт
	
	Константы.Загрузка_МаксПопытокСменыПрокси.Установить(Значение);
	
КонецПроцедуры

Процедура Сохранить_ДатуПоследнегоОбращения(Дата) Экспорт
	
	Константы.Прокси_ПоследнееОбращение.Установить(Дата);
	
КонецПроцедуры

Процедура Сохранить_ДатуПоследнегоОбновления(Дата) Экспорт
	
	Константы.Прокси_ДатаЗагрузки.Установить(Дата);
	
КонецПроцедуры

Процедура Сохранить_ИспользованныйПрокси(ПроксиСсылка) Экспорт
	
	Спр 				= ПроксиСсылка.ПолучитьОбъект();
	Спр.Использован		= Истина;
	Спр.Записать();
	
КонецПроцедуры

Процедура Сохранить_ПереченьПрокси(ПутьКВременномуФайлу) Экспорт
	
	 ЧтениеXML 					= Новый ЧтениеXML;
	 
	 ЧтениеXML.ОткрытьФайл(ПутьКВременномуФайлу);
	 
	 СтрочкиФайлаXML = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
	 
	 СтруктураСтрокой = Получить_СтруктуруПрокси_Строкой();
	 
	 Если СтрочкиФайлаXML <> Неопределено 
		 И СтрочкиФайлаXML.Свойства().Получить("Content") <> Неопределено Тогда
		 
		 Для Каждого ЭлементСписка Из СтрочкиФайлаXML.Content Цикл
			 
			 Структура 				= Новый Структура(СтруктураСтрокой);
			 
			 Структура.ИП 			= ЭлементСписка.ИП;
			 Структура.Порт 		= Число(ЭлементСписка.Порт);
			 Структура.КодСтраны 	= ЭлементСписка.КодСтраны;
			 Структура.Страна 		= ЭлементСписка.Страна;
			 Структура.Задержка  	= ЭлементСписка.Задержка;
			 Структура.ЕстьSocks4  	= ЭлементСписка.ЕстьSocks4  = "1";
			 Структура.ЕстьSocks5  	= ЭлементСписка.ЕстьSocks5  = "1";
			 Структура.ЕстьSSL  	= ЭлементСписка.ЕстьSSL	    = "1";
			 
			 Структура.Использован  = ЭлементСписка.Использован = "1";
			 Структура.Работает  	= ЭлементСписка.Работает    = "1";
			 
			 Сохранить_Прокси(Структура);
			 
		 КонецЦикла;
		 
	 Иначе
		 
		 ОМ_Сервер.НоваяЗаписьЖурнала(2, ОМ_РегламентныеОперации.Получить_ИмяМетодаЗагрузкиПрокси(), "Не удалось обработать " + ОМ_КлиентСервер.ОбернутьВКавычки(ПутьКВременномуФайлу));
		 
	 КонецЕсли;
 
КонецПроцедуры

Функция Сформировать_ПредставлениеПрокси(ОписаниеПрокси) Экспорт
	
	Возврат СтрШаблон("%1:%2 [%3]", ОписаниеПрокси.ИП, ОписаниеПрокси.Порт, ОписаниеПрокси.КодСтраны);
	
КонецФункции

Процедура Проверить_ВсеПрокси() Экспорт
	
	ТаблицаЗначений = Получить_ПереченьПрокси(Истина);
	
	Для Каждого СтрокаТЧ Из ТаблицаЗначений Цикл
		
		Работает = Проверить_ПроксиРаботает(СтрокаТЧ.Ссылка, Истина);
		
		ОМ_Сервер.НоваяЗаписьЖурнала(2, "ОМ_Прокси.Проверить_ВсеПрокси", 
		"Проверен прокси " + Формат(ТаблицаЗначений.Индекс(СтрокаТЧ) + 1, "ЧН=0; ЧГ=0") + " из " + Формат(ТаблицаЗначений.Количество(), "ЧН=0; ЧГ=0"), СтрокаТЧ.Ссылка);
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = Формат(ТаблицаЗначений.Индекс(СтрокаТЧ) + 1, "ЧН=0; ЧГ=0") + "/" + Формат(ТаблицаЗначений.Количество(), "ЧН=0; ЧГ=0");
		Сообщение.Сообщить();
		
	КонецЦикла;
	
КонецПроцедуры

Процедура Очистить_ИспользованныеПрокси() Экспорт
	
	ТаблицаЗначений = Получить_ПереченьПрокси(Истина, Новый Структура("Использован", Истина));
	
	Для Каждого СтрокаТЧ Из ТаблицаЗначений Цикл
		
		Работает 		= Проверить_ПроксиРаботает(СтрокаТЧ.Ссылка);
		
		Спр 			= СтрокаТЧ.Ссылка.ПолучитьОбъект();
		
		Спр.Использован = Ложь;

		Спр.Работает 	= Работает;
	
		Спр.Записать();	
		
	КонецЦикла;
	
КонецПроцедуры

Процедура Очистить_ПереченьПрокси() Экспорт
	
	ТаблицаЗначений = ОМ_Прокси.Получить_ПереченьПрокси(Истина,, Истина);
	
	Для Каждого СтрокаТЧ Из ТаблицаЗначений Цикл
		
		Спр = СтрокаТЧ.Ссылка.ПолучитьОбъект();
		
		Спр.ОбменДанными.Загрузка = Истина;
		
		Спр.Удалить();
		
	КонецЦикла;
	
	ОМ_Сервер.НоваяЗаписьЖурнала(2, "ОМ_Сервер.Очистить_ПереченьПрокси", "ВСЕ прокси были очищены");
	
КонецПроцедуры

Процедура Загрузить_СписокПроксиСПортала() Экспорт
	
	ПериодОбновления 	= Получить_ПериодОбновленияПрокси(); // В часах
	
	ДатаЗагрузки 		= Получить_ДатуПоследнегоОбновления();
	
	Если Не ЗначениеЗаполнено(ДатаЗагрузки) Тогда
		
		Сохранить_ДатуПоследнегоОбновления(ТекущаяДата());
		
	КонецЕсли;
		
	//////////////////////////////////////////////////////////	
	// Условие запуска:
	//
	// 1. Если ПериодОбновления = 0, тогда не обновляем, т.к. отключено,
	//	  но если это первый запуск - нужно скачать списки
	
	Если ПериодОбновления = 0 
		И Справочники.Прокси.КоличествоЭлементовПрокси() <> 0 Тогда
		
		ОМ_Сервер.НоваяЗаписьЖурнала(2, "ОМ_Прокси.Загрузить_СписокПроксиСПортала", "Обновление прокси прервано, т.к. ПериодОбновления не установлен и есть уже загруженные");
		
		Возврат;
		
	КонецЕсли;
	
	//////////////////////////////////////////////////////////	
	// Условие запуска:
	//
	// 2. Если ПериодОбновления > 0 и с прошлого момента загрузки прошло менее N часов, тогда не грузим.
	
	Если (ПериодОбновления > 0
		И ТекущаяДата() - ДатаЗагрузки / 60/ 60 < ПериодОбновления) Тогда
		
		СледующийПериод = ДатаЗагрузки + (ПериодОбновления * 60 * 60);
		ОМ_Сервер.НоваяЗаписьЖурнала(2, "ОМ_Прокси.Загрузить_СписокПроксиСПортала", "Обновление прокси прервано, т.к. ПериодОбновления наступит примерно " + Формат(СледующийПериод, "ДЛФ=DDT"));
		
		Возврат;
		
	КонецЕсли;
	
	//////////////////////////////////////////////////////////
	
	//Результат 			= Ложь;
	
	АдресИсточника 		= "hidemy.name/ru";
	
	ПроксиСервер 		= Новый ИнтернетПрокси;
	
	HTTPСоединение 		= Новый HTTPСоединение(АдресИсточника,,,, ПроксиСервер, 5, Новый ЗащищенноеСоединениеOpenSSL);
	
	Запрос 				= Новый HTTPЗапрос;
	
	Запрос.Заголовки.Вставить("Connection", "keep-alive");
		
	ПараметрыЗапроса 	= Новый Соответствие;
	
	ФорматВывода		= "xml";
	
	ПараметрыЗапроса.Вставить("out", 		ФорматВывода);
	
	ОтборПоСтранам = Получить_СписокДопустимыхСтранПрокси();
	
	Если ЗначениеЗаполнено(ОтборПоСтранам) Тогда
		ПараметрыЗапроса.Вставить("country", 	ОтборПоСтранам);
	КонецЕсли;
	
	ПараметрыЗапроса.Вставить("maxtime", 	Получить_ЗначениеЗадержки());
	
	ПараметрыЗапроса.Вставить("code", 		Получить_Ключ_HideMe());
	
	Запрос.АдресРесурса = "/api/proxylist.php" + ОМ_Соединения.СформироватьПараметрыЗапроса(ПараметрыЗапроса);
	
	ПолныйАдрес 		= АдресИсточника + Запрос.АдресРесурса;
			
	ДатаПоследнегоОбращения = Получить_ДатуПоследнегоОбращения();
	
	ОсталосьЖдать = ТекущаяДата() - ДатаПоследнегоОбращения;
	
	Если ОсталосьЖдать < 62 Тогда
		ОМ_Сервер.НоваяЗаписьЖурнала(1, ОМ_РегламентныеОперации.Получить_ИмяМетодаЗагрузкиПрокси(), "Ожидание при повторном обращении: " + Формат(ОсталосьЖдать, "ЧГ=0"));	
	КонецЕсли;
	
	Пока ОсталосьЖдать < 62 Цикл
		
		ОсталосьЖдать = ТекущаяДата() - ДатаПоследнегоОбращения;
				
	КонецЦикла;
		
	Сохранить_ДатуПоследнегоОбращения(ТекущаяДата());
	
	Попытка
		
		//ОМ_КлиентСервер.СообщитьПользователю("Отправляем запрос получения прокси " + ОМ_КлиентСервер.ОбернутьВКавычки(АдресИсточника) + "
		//|Запрос: " + ОМ_КлиентСервер.ОбернутьВКавычки(ПолныйАдрес));

		Шаблон = "Запрос списка прокси.. " + ОМ_КлиентСервер.ОбернутьВКавычки(АдресИсточника);
		ОМ_Сервер.НоваяЗаписьЖурнала(2, ОМ_РегламентныеОперации.Получить_ИмяМетодаЗагрузкиПрокси(), Шаблон);
		
		ОтветHTTP = HTTPСоединение.Получить(Запрос);
		
	Исключение
		
		Шаблон = "Не удалось получить ответ от " + ОМ_КлиентСервер.ОбернутьВКавычки(АдресИсточника);
		//ОМ_КлиентСервер.СообщитьПользователю(Шаблон);
		
		ОМ_Сервер.НоваяЗаписьЖурнала(0, ОМ_РегламентныеОперации.Получить_ИмяМетодаЗагрузкиПрокси(), Шаблон);
		ВызватьИсключение(Шаблон);
		
	КонецПопытки;
	
	Если ОтветHTTP.КодСостояния = 200 Тогда
		
		ИсходныйТекст		= ОтветHTTP.ПолучитьТелоКакСтроку();
		
		Если ИсходныйТекст = "NOTFOUND" Тогда
			
			Шаблон = "Прокси по фильтру не найдены, либо нет доступа.";
			
			ОМ_Сервер.НоваяЗаписьЖурнала(1, ОМ_РегламентныеОперации.Получить_ИмяМетодаЗагрузкиПрокси(), Шаблон);
			
			Возврат;
			
		КонецЕсли;
		
		Шаблон = "Получили список прокси, начинается обработка файла";
		ОМ_Сервер.НоваяЗаписьЖурнала(2, ОМ_РегламентныеОперации.Получить_ИмяМетодаЗагрузкиПрокси(), Шаблон);

		ОбработатьМассивПроксиНаСервере(ИсходныйТекст, ФорматВывода);
					
	Иначе 
		
		Шаблон = "Не удалось выполнить запрос. КодСостояния: " + Строка(ОтветHTTP.КодСостояния);
		ОМ_Сервер.НоваяЗаписьЖурнала(1, ОМ_РегламентныеОперации.Получить_ИмяМетодаЗагрузкиПрокси(), Шаблон);
		
	КонецЕсли;
	
КонецПроцедуры

