
Функция Записать_ТелоВПараметрыСтроки(ОбъектXDTO) Экспорт
	
	// Шаг 1.
	JSON = Записать_ТелоВСтрокуJSON(ОбъектXDTO);
	
	Соответствие 	= ПрочитатьJSON_Переопределеяемая(JSON, Истина);
	
	Результат 		= Новый Массив;
	
	Для Каждого Стр Из Соответствие Цикл
		
		Результат.Добавить(Стр.Ключ + "=" + Стр.Значение);
		
	КонецЦикла;
	
	Возврат СтрСоединить(Результат, "&");
	
КонецФункции

Функция Сформировать_МассивВJSON(ИмяПараметра, Соответствие) Экспорт
	
	Строка = ИмяПараметра + "=";
	
	Для Каждого Элемент Из Соответствие Цикл
		
		//Строка = Строка 
		
		
	КонецЦикла;
	
	Возврат Строка;
	
КонецФункции

Функция Записать_ТелоВСтрокуXML(ОбъектXDTO) Экспорт
	
	ЗаписьXML = Новый ЗаписьXML;
	
	ЗаписьXML.УстановитьСтроку();
	
	ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, ОбъектXDTO);
	
	Возврат ЗаписьXML.Закрыть();
	
КонецФункции

Функция Записать_ТелоВСтрокуJSON(ОбъектXDTO) Экспорт
	
	ЗаписьJSON = Новый ЗаписьJSON;
	
	ЗаписьJSON.УстановитьСтроку();
		
	ФабрикаXDTO.ЗаписатьJSON(ЗаписьJSON, ОбъектXDTO);
	
	Результат = ЗаписьJSON.Закрыть();
	
	Возврат СериализацияОбъектовJSON.ПолучитьЗначениеОбъектаJSON(Результат);
	
КонецФункции

Функция ПрочитатьJSON_Переопределеяемая(Строка_JSON, ПрочитатьВСоответствие = Ложь, ПрочитатьВСтруктуру = Ложь) Экспорт
	
	ЧтениеJSON = Новый ЧтениеJSON;
	
	ЧтениеJSON.УстановитьСтроку(Строка_JSON);
	
	Соответствие = ПрочитатьJSON(ЧтениеJSON, Истина);
	
	Если ПрочитатьВСоответствие Тогда
		Возврат Соответствие;
	ИначеЕсли ПрочитатьВСтруктуру Тогда
		Возврат ОМ_Сервер.СоответствиеВСтруктуру(Соответствие);
	Иначе
		
		Результат = "";
		
		Возврат ОМ_Сервер.СоответствиеВСтроку(Соответствие, Символы.ПС, " ", , ": ", Ложь);
		
	КонецЕсли;
	
КонецФункции

// Процедура служит для осуществелния паузы. 
// К примеру, необходимо использовать, если в 1сек. отправляется несколько рест-запросов
// Параметры:
// ЗадержкаСекунд - число. По умолчанию = 1
Процедура СделатьПаузу(ЗадержкаСекунд = 1) Экспорт
	
	Если ЗадержкаСекунд <= 0 Тогда
		Возврат
	КонецЕсли;
	
	СтрокаЗапроса = "ping -n 1 -w "+Формат(1000 * ЗадержкаСекунд, "ЧДЦ=0; ЧГ=") + " 127.255.255.255"; 
	
	УстановитьПривилегированныйРежим(Истина);
	
	WshShell = Новый COMОбъект("WScript.Shell"); 
	WshShell.Run(СтрокаЗапроса, 0, -1); 
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Функция Получить_HTTPСоединение(
	Сервер, 
	ПроксиСсылка = Неопределено,
	Порт = Неопределено, 
	ТаймАут = 3, 
	Пользователь = Неопределено, 
	Пароль = Неопределено) Экспорт
	
	ПроксиСервер 	= Новый ИнтернетПрокси;
	
	SSL 			= Неопределено;
	
	Если ПроксиСсылка <> Неопределено Тогда
		
		ПроксиСервер.Установить("HTTP", ПроксиСсылка.ИП, ПроксиСсылка.Порт);
		
		Если ПроксиСсылка.ЕстьSSL Тогда
			SSL = Новый ЗащищенноеСоединениеOpenSSL;
		КонецЕсли;
		
	КонецЕсли;
	
	HTTPСоединение = Новый HTTPСоединение(Сервер, Порт, Пользователь, Пароль, ПроксиСервер, ТаймАут, SSL);
	
	Возврат HTTPСоединение;
	
КонецФункции

Функция СтруктураURI(Знач СтрокаURI) Экспорт
	
	СтрокаURI = СокрЛП(СтрокаURI);
	
	// схема
	Схема = "";
	Позиция = Найти(СтрокаURI, "://");
	Если Позиция > 0 Тогда
		Схема = НРег(Лев(СтрокаURI, Позиция - 1));
		СтрокаURI = Сред(СтрокаURI, Позиция + 3);
	КонецЕсли;
	
	// строка соединения и путь на сервере
	СтрокаСоединения = СтрокаURI;
	ПутьНаСервере = "";
	Позиция = Найти(СтрокаСоединения, "/");
	Если Позиция > 0 Тогда
		ПутьНаСервере = Сред(СтрокаСоединения, Позиция + 1);
		СтрокаСоединения = Лев(СтрокаСоединения, Позиция - 1);
	КонецЕсли;
	
	// информация пользователя и имя сервера
	СтрокаАвторизации = "";
	ИмяСервера = СтрокаСоединения;
	Позиция = Найти(СтрокаСоединения, "@");
	Если Позиция > 0 Тогда
		СтрокаАвторизации = Лев(СтрокаСоединения, Позиция - 1);
		ИмяСервера = Сред(СтрокаСоединения, Позиция + 1);
	КонецЕсли;
	
	// логин и пароль
	Логин = СтрокаАвторизации;
	Пароль = "";
	Позиция = Найти(СтрокаАвторизации, ":");
	Если Позиция > 0 Тогда
		Логин = Лев(СтрокаАвторизации, Позиция - 1);
		Пароль = Сред(СтрокаАвторизации, Позиция + 1);
	КонецЕсли;
	
	// хост и порт
	Хост = ИмяСервера;
	Порт = "";
	Позиция = Найти(ИмяСервера, ":");
	Если Позиция > 0 Тогда
		Хост = Лев(ИмяСервера, Позиция - 1);
		Порт = Сред(ИмяСервера, Позиция + 1);
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("Схема", Схема);
	Результат.Вставить("Логин", Логин);
	Результат.Вставить("Пароль", Пароль);
	
	Результат.Вставить("Хост", Хост);
	
	Если Не ПустаяСтрока(Порт) Тогда
		
		Попытка
			Порт = Число(Порт);
		Исключение
			Порт = "";
		КонецПопытки;
		
	КонецЕсли;
	
	Результат.Вставить("Порт", Порт);
	
	Результат.Вставить("ИмяСервера", СтрЗаменить(ИмяСервера, Формат(Порт, "ЧГ=0"), ""));
	
	Результат.Вставить("ПутьНаСервере", ПутьНаСервере);
	
	Возврат Результат;
	
КонецФункции

Функция ПараметрМассивВСтроку(ИмяПараметра, Массив, Соединитель)
	
	Результат = Новый Массив;
	
	Для Каждого Параметр Из Массив Цикл
		
		Результат.Добавить(ИмяПараметра + "=" + Параметр);
		
	КонецЦикла;
	
	Возврат СтрСоединить(Результат, Соединитель);
	
КонецФункции

Функция Записать_ВJSON(Значение) Экспорт
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();  
	
	ЗаписатьJSON(ЗаписьJSON, Значение);            
	
	Возврат ЗаписьJSON.Закрыть();
	
КонецФункции

Функция СформироватьПараметрыЗапроса(СписокПараметров, КакМассив = Ложь) Экспорт
	
	Результат 					= Новый Массив;
	
	ПервыйЗнакУчтен 			= Ложь;
	
	Для Каждого СтрокаПараметра Из СписокПараметров Цикл
		
		Если ПервыйЗнакУчтен Тогда
			
			Соединитель 		= "&";
			
		Иначе
			
			ПервыйЗнакУчтен 	= Истина;
			Соединитель 		= "?";
			
		КонецЕсли;
		
		Если ТипЗнч(СтрокаПараметра.Значение) = Тип("Строка") Тогда
			Результат.Добавить(Соединитель +  СокрЛП(СтрокаПараметра.Ключ) + "=" + СокрЛП(СтрокаПараметра.Значение));
		Иначе
			Результат.Добавить(Соединитель + ПараметрМассивВСтроку(СокрЛП(СтрокаПараметра.Ключ), СтрокаПараметра.Значение, "&")); 
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ?(КакМассив, Результат, СтрСоединить(Результат, ""));
	
КонецФункции

Функция ПолучитьЗаголовокОтвета(Знач Заголовки, Заголовок) Экспорт
	
	Для Каждого Стр Из Заголовки Цикл
		
		Если Врег(Стр.Ключ) = Врег(Заголовок) Тогда
			
			Возврат Стр.Значение;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецФункции

Процедура ВыгрузитьФайл_ЯндексДиск(ПутьКФайлуДляЗагрузки, Токен, СетевойПуть, Перезаписывать = Истина) Экспорт
	
	СетевойПуть = "disk:" + СтрЗаменить(СетевойПуть,"/","%2F");
	Перезаписывать = ?(Перезаписывать, "true", "false");
	
	Заголовки = Новый Соответствие;
	
	Заголовки.Вставить("Content-Type", "application/x-www-form-urlencoded");
	Заголовки.Вставить("Authorization","OAuth " + Токен);
	
	ЗащищенноеСоединение = Новый ЗащищенноеСоединениеOpenSSL(Неопределено, Неопределено);
	
	HTTPЗапрос = Новый HTTPЗапрос("/v1/disk/resources/upload?path=" + СетевойПуть + "&overwrite=" + Перезаписывать, Заголовки);
	
	Соединение = Новый HTTPСоединение("cloud-api.yandex.net",,,,,, ЗащищенноеСоединение);
	
	Результат = Соединение.Получить(HTTPЗапрос);
	
	Если Результат.КодСостояния <> 200 Тогда
		
		ВызватьИсключение "Ошибка при получении URL для загрузки." + Символы.ПС + Результат.ПолучитьТелоКакСтроку();
		
	Иначе
				
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(Результат.ПолучитьТелоКакСтроку());
		
		СоответствиеРезультат 	= ПрочитатьJSON(ЧтениеJSON, Истина);
		
		СсылкаДляЗагрузки 		= СоответствиеРезультат.Получить("href");
		
		СсылкаДляЗагрузки 		= СтрЗаменить(СсылкаДляЗагрузки, "https://", "");
		
		СтруктураУзла 			= СтруктураURI(СсылкаДляЗагрузки);
			
		СсылкаДляЗагрузки 		= СтрЗаменить(СсылкаДляЗагрузки, СтруктураУзла.ИмяСервера, "");
		
		HTTPЗапрос = Новый HTTPЗапрос(СсылкаДляЗагрузки, Заголовки);
		HTTPЗапрос.УстановитьТелоИзДвоичныхДанных(Новый ДвоичныеДанные(ПутьКФайлуДляЗагрузки));
		
		Соединение = Новый HTTPСоединение(СтруктураУзла.ИмяСервера,,,,,, ЗащищенноеСоединение);
		
		Результат = Соединение.Записать(HTTPЗапрос);
		
		Если Результат.КодСостояния <> 201 Тогда
			
			ВызватьИсключение Результат.ПолучитьТелоКакСтроку();
			
		Иначе
			
			ОМ_Сервер.НоваяЗаписьЖурнала(3, "ОМ_Соединения.ВыгрузитьФайл_ЯндексДиск", "Файл успешно выгружен в Яндекс.Диск");	
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция Получить_ЗначениеОбъектаJSON(ОбъектJSON, УдалитьТабуляциюВНачалеСтроки = Истина) Экспорт 

	НовыйОбъектJSON = "";
	
	ОбъектJSONКолСтрок = СтрЧислоСтрок(ОбъектJSON);
	
	Для Сч = 1 По ОбъектJSONКолСтрок Цикл
		
		//..отсекаем первую и последнюю строку
		Если Сч = 1 ИЛИ Сч = ОбъектJSONКолСтрок Тогда
			Продолжить;
		КонецЕсли; 
		
		стрНовыйОбъектJSON = СтрПолучитьСтроку(ОбъектJSON,Сч);
		
		//..удаляем свойство value и незначащие символы
		Если СтрНайти(стрНовыйОбъектJSON, "#value") > 0 Тогда
		
			стрНовыйОбъектJSON = СтрЗаменить(стрНовыйОбъектJSON,"#value","");
			стрНовыйОбъектJSON = СтрЗаменить(стрНовыйОбъектJSON,"""","");
			стрНовыйОбъектJSON = СтрЗаменить(стрНовыйОбъектJSON," ","");
			стрНовыйОбъектJSON = СтрЗаменить(стрНовыйОбъектJSON,":","");
			
		КонецЕсли; 
		
		Если УдалитьТабуляциюВНачалеСтроки И Лев(стрНовыйОбъектJSON,1) = Символы.Таб Тогда 
			стрНовыйОбъектJSON = Прав(стрНовыйОбъектJSON,СтрДлина(стрНовыйОбъектJSON)-1);
		КонецЕсли;
		
		НовыйОбъектJSON = НовыйОбъектJSON + стрНовыйОбъектJSON + Символы.ПС;
		
	КонецЦикла;
	
	Возврат НовыйОбъектJSON;

КонецФункции 