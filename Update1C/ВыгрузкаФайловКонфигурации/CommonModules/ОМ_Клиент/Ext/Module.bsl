
&НаКлиенте
Процедура УдалитьВременныеФайлы() Экспорт
	
	Каталог 				= ОМ_Парсинг.КаталогВременныхФайловПарсера();
	УдалитьФайлы(Каталог, ОМ_Парсинг.ПрефиксВременногоФайла() + "*");
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьИмяВременногоФайла_(Формат) Экспорт
		
	Каталог 				= ОМ_Парсинг.КаталогВременныхФайловПарсера();
	ИмяФайла 				= ОМ_Парсинг.ПрефиксВременногоФайла() + ОМ_КлиентСервер.ПолучитьМеткуВремениСтрокой() + "." + Формат;
	             
	ПолныйПутьКФайлу 		= Каталог + ИмяФайла;
	
	//Текст = Новый ТекстовыйДокумент; 
	//Текст.Записать(ПолныйПутьКФайлу, КодировкаТекста.UTF8);
	
	Возврат ПолныйПутьКФайлу;
	
КонецФункции

&НаКлиенте
Процедура ПриНачалеРаботыСистемы() Экспорт
	
	ОМ_Служебный.ПриНачалеРаботыСистемы();
	
	ПервоначальнаяНастройкаОткрывалась = ОМ_Служебный.ПервоначальнаяНастройкаОткрывалась();
	
	Если Не ПервоначальнаяНастройкаОткрывалась Тогда
		
		ОткрытьФорму("Обработка.ПомощникНастройкиКонфигурации.Форма.Форма");
		
	КонецЕсли;
	
	ИнформацияПроБазу = ОМ_Служебный.Получить_ИнформациюПроБазу();
	
	Если ИнформацияПроБазу.ОписаниеОбновлений.ПоказыватьИзменения Тогда
		
		ОткрытьФорму("ОбщаяФорма.СписокИзменений", ИнформацияПроБазу);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СообщитьПользователю(Знач Текст, Знач КлючДанных = Неопределено, Знач Поле = "", Знач ПутьКДанным = "", ИдентификаторНазначения = Неопределено) Экспорт
	
	ОМ_Сервер.СообщитьПользователю(Текст, КлючДанных, Поле, ПутьКДанным, ИдентификаторНазначения);
	
КонецПроцедуры

&НаКлиенте
Функция Получить_КоличествоИсточников() Экспорт
	
	Возврат ОМ_Парсинг.Получить_ИсточникиЗагрузки(Истина, Истина);
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_КонстантаПриИзменении(Форма) Экспорт
	
	ОМ_КлиентСервер.Подключаемый_КонстантаПриИзмененииКлиент(Форма)
	
КонецПроцедуры

&НаКлиенте
Функция Получить_СтруктуруПрокси_Строкой() Экспорт

	Возврат ОМ_Прокси.Получить_СтруктуруПрокси_Строкой();
	
КонецФункции

&НаКлиенте
Процедура ОчиститьЖурналСобытий() Экспорт
	
	ОМ_Сервер.ОчиститьЖурналСобытий();
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьЗаголовокОтвета(Знач Заголовки, Заголовок) Экспорт
	
	Возврат ОМ_Соединения.ПолучитьЗаголовокОтвета(Заголовки, Заголовок);
	
КонецФункции

&НаКлиенте
Функция Получить_ДатуПоследнегоОбращения() Экспорт
	
	Возврат ОМ_Прокси.Получить_ДатуПоследнегоОбращения();
	
КонецФункции

&НаКлиенте
Функция Получить_АктуальныйПрокси() Экспорт
	
	Возврат ОМ_Прокси.Получить_АктуальныйПрокси();
	
КонецФункции

&НаКлиенте
Процедура Сохранить_АктуальныйПрокси(ОписаниеПроки) Экспорт
	
	ОМ_Прокси.Сохранить_АктуальныйПрокси(ОписаниеПроки);
	
КонецПроцедуры

&НаКлиенте
Функция ФоновоеЗаданиеЗавершено(ИмяЗапущенногоМетода, УникальныйИдентификатор) Экспорт
	
	Оповестить("Общее_ОбновитьЖурнал");
	
	СтруктураОтвета = ОМ_Сервер.ФоновоеЗаданиеЗавершено(ИмяЗапущенногоМетода, УникальныйИдентификатор);
	
	Если СтруктураОтвета.Свойство("Сообщения") 
		И СтруктураОтвета.ВыводитьСостояние Тогда
		
		ОбработкаСообщенийИзФоновогоЗадания(СтруктураОтвета, ИмяЗапущенногоМетода, УникальныйИдентификатор);
		
	КонецЕсли;
	
	Возврат СтруктураОтвета;
	
КонецФункции

&НаКлиенте
Процедура ОбработкаСообщенийИзФоновогоЗадания(СтруктураОтвета, ИмяЗапущенногоМетода, УникальныйИдентификатор) Экспорт
	
	МассивСообщенийПользователю = СтруктураОтвета.Сообщения;
	
	ПоследнийЭлемент = МассивСообщенийПользователю[МассивСообщенийПользователю.ВГраница()];
	
	ЧастиСообщения = СтрРазделить(ПоследнийЭлемент.Текст, "/", Ложь);
	
	Если ЧастиСообщения.Количество() = 2 Тогда
		
		Прогресс = Число(ЧастиСообщения[0]) / Число(ЧастиСообщения[1]) * 100;
		
		Состояние("Выполняется...", Прогресс, СокрЛП(СтрЗаменить(ИмяЗапущенногоМетода, "ОМ_РегламентныеОперации.", "")), БиблиотекаКартинок.ДлительнаяОперация48);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник, Форма) Экспорт
	
	Если Форма.ИмяФормы = "РегистрСведений.ЖурналСобытий.Форма.ФормаСписка" Тогда
		Форма.Элементы.Список.Обновить();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Сохранить_ДатуПоследнегоОбращения(Дата) Экспорт
	
	ОМ_Прокси.Сохранить_ДатуПоследнегоОбращения(Дата);
	
КонецПроцедуры

&НаКлиенте
Функция Получить_Ключ_HideMe() Экспорт
	
	Возврат ОМ_Прокси.Получить_Ключ_HideMe();
	
КонецФункции

&НаКлиенте
Функция ОбработатьМассивПроксиНаСервере(ИсходныйТекст, Знач ФорматВывода) Экспорт
	
	Возврат ОМ_Прокси.ОбработатьМассивПроксиНаСервере(ИсходныйТекст, ФорматВывода);
	
КонецФункции

&НаКлиенте
Функция СформироватьПараметрыЗапроса(СписокПараметров, КакМассив = Ложь) Экспорт
	
	Возврат ОМ_Соединения.СформироватьПараметрыЗапроса(СписокПараметров, КакМассив);
	
КонецФункции

&НаКлиенте
Функция СписокДопустимыхСтран() Экспорт
	
	Возврат ОМ_Прокси.Получить_СписокДопустимыхСтранПрокси();
		
КонецФункции

&НаКлиенте
Функция СтруктураURI(Знач СтрокаURI) Экспорт
	
	Возврат ОМ_Соединения.СтруктураURI(СтрокаURI);
	
КонецФункции

&НаКлиенте
Функция НовыйФильтрПоКлассуТега(Тег, Класс, ТочноеСоответствие = Истина) Экспорт  
	
	Возврат ОМ_Парсинг.НовыйФильтрПоКлассуТега(Тег, Класс, ТочноеСоответствие);
	
КонецФункции

&НаКлиенте
Функция ЗапуститьВФоне(Метод, Параметры_КлючХранилищаСтрокой, УникальныйИдентификатор, Заголовок = "") Экспорт
	
	ОМ_Сервер.ЗапуститьВФоне(Метод, Параметры_КлючХранилищаСтрокой, Строка(УникальныйИдентификатор), Заголовок);
		
КонецФункции