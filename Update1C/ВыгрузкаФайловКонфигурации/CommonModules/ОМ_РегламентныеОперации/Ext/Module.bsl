
Функция МаксЧислоПотоковПоУмолчанию() Экспорт
	Возврат 3;	
КонецФункции

Функция РазбитьПотокиНаПорции(Знач МассивПотоков, Знач МаксЧислоВПорции)
	
	// Схема работы:
	// -------------
	// Было изначально 7 потоков:
	// Поток 1, индекс 0
	// Поток 2, индекс 1
	// Поток 3, индекс 2
	// Поток 4, индекс 3
	// Поток 5, индекс 4
	// Поток 6, индекс 5
	// Поток 7, индекс 6
	//
	// Решили разбить порциями по 2 потока в каждой.
	//
	// Т.е. на выходе должно получиться так:
	//
	// Порция 1: Поток 1, Поток 2
	// Порция 2: Поток 3, Поток 4
	// Порция 3: Поток 5, Поток 6
	// Порция 4: Поток 7
	//
	// На выходе получим массив порций, в котором лежит Порция 1, Порция 2, Порция 3, Порция 4
	// -------------
	
	МассивПотоковПорциями 	= Новый Массив;
	
	ОбработаноПотоков		= 0;
	НужноОбработатьПотоков	= МассивПотоков.Количество(); 
	
	Пока ОбработаноПотоков <> НужноОбработатьПотоков Цикл
		
		ОчереднаяПорцияПотоков = Новый Массив;
		
		Для ИндексПорции = 0 По МаксЧислоВПорции - 1 Цикл
			
			// Оставшиеся потоки нужно добавить отдельно.
			Если МассивПотоков.Количество() > 0 Тогда
				
				ОчереднаяПорцияПотоков.Добавить(МассивПотоков.Получить(0));
				МассивПотоков.Удалить(0);
				
				ОбработаноПотоков = ОбработаноПотоков + 1;
				
			Иначе
				
				Прервать;
				
			КонецЕсли;
			
			
		КонецЦикла;
		
		Если ОчереднаяПорцияПотоков.Количество() > 0 Тогда
			МассивПотоковПорциями.Добавить(ОчереднаяПорцияПотоков);
		КонецЕсли;
		
	КонецЦикла;
		
	Возврат МассивПотоковПорциями;
	
КонецФункции

Процедура ОжидатьЗавершениеПотоков(МассивФЗ, Обработано, ВсегоНаОчереди) 
	
	
	ТаблицаПотоков = ФоновыеЗадания.ОжидатьЗавершенияВыполнения(МассивФЗ, 5);
	
	ВсегоЗавершенных = 0;
	
	Пока ВсегоЗавершенных <> ТаблицаПотоков.Количество() Цикл
		
		ТаблицаПотоков = ФоновыеЗадания.ОжидатьЗавершенияВыполнения(МассивФЗ, 5);
		
		ВсегоЗавершенных = 0;
		
		Для Каждого Стр Из ТаблицаПотоков Цикл
			
			Если Стр.Состояние <> СостояниеФоновогоЗадания.Активно Тогда
				
				ВсегоЗавершенных = ВсегоЗавершенных + 1;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Обработано = Обработано + МассивФЗ.Количество();
	
	ОМ_Сервер.НоваяЗаписьЖурнала(2, "ОМ_РегламентныеОперации.ЗапуститьИКонтролироватьЗавершениеПотоков", 
	"Завершена обработка " + Строка(Обработано) + " потоков из " + Строка(ВсегоНаОчереди));
	
КонецПроцедуры

// Должно использоваться только на серверной базе
Процедура ЗапуститьИКонтролироватьЗавершениеПотоков(Потоки) Экспорт
			
	ДопустимоеЧислоПотоков = Константы.ФоновыеЗадания_КоличествоПотоков.Получить();
	
	Если ДопустимоеЧислоПотоков = 0 Тогда
		ДопустимоеЧислоПотоков = МаксЧислоПотоковПоУмолчанию();
		Константы.ФоновыеЗадания_КоличествоПотоков.Установить(ДопустимоеЧислоПотоков);
	КонецЕсли;
	
	Обработано 		= 0;
	ВсегоНаОчереди 	= Потоки.Количество();
	
	НаборПорцийПотоков = РазбитьПотокиНаПорции(Потоки, ДопустимоеЧислоПотоков);
	
	Для Каждого ПорцияПотоков Из НаборПорцийПотоков Цикл
		
		МассивФЗ = Новый Массив;
		
		Для Каждого Поток Из ПорцияПотоков Цикл
			
			ПотокЗапущен = РегистрыСведений.ИсторияПотоков.ПолучитьПоток(Поток.Ключ, Поток.ИмяМетода) <> Неопределено;
			
			Если Не ПотокЗапущен Тогда
				
				ОМ_Соединения.СделатьПаузу(2);
				ФоновоеЗадание = РегистрыСведений.ИсторияПотоков.ВыполнитьПоток(Поток);
				
				Если ФоновоеЗадание <> Неопределено Тогда
					МассивФЗ.Добавить(ФоновоеЗадание);
				Иначе
					ОМ_Сервер.НоваяЗаписьЖурнала(1, "ОМ_РегламентныеОперации.ЗапуститьИКонтролироватьЗавершениеПотоков", 
					"Не удалось запустить поток: 
					|Метод: " + Поток.ИмяМетода + "
					|" + ОписаниеОшибки());
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		ОжидатьЗавершениеПотоков(МассивФЗ, Обработано, ВсегоНаОчереди);
		
	КонецЦикла;
	
	ОМ_Сервер.НоваяЗаписьЖурнала(2, "ОМ_РегламентныеОперации.ЗапуститьИКонтролироватьЗавершениеПотоков", 
	"Завершено выполнение " + Строка(ВсегоНаОчереди) + " потоков.");
	
	РегистрыСведений.ИсторияПотоков.ОчиститьЖурналПотоков();
		
КонецПроцедуры

Процедура ДобавитьНовыйПоток(Потоки, Метод, Параметры = Неопределено) Экспорт
		
	МассивПараметров = Новый Массив;
	
	Если Параметры <> Неопределено Тогда
		Для Каждого Параметр Из Параметры Цикл
			
			МассивПараметров.Добавить(Параметр);
			
		КонецЦикла;
	КонецЕсли;
	
	СтруктураФЗ = Новый Структура;
	
	СтруктураФЗ.Вставить("ИмяМетода", Метод);
	СтруктураФЗ.Вставить("Параметры", ?(МассивПараметров.Количество() = 0, Неопределено, МассивПараметров));
	СтруктураФЗ.Вставить("Ключ", Новый УникальныйИдентификатор);
	СтруктураФЗ.Вставить("Наименование", "Фоновое задание - Поток № " + Строка(СтруктураФЗ.Ключ));
	
	Потоки.Добавить(СтруктураФЗ);
	
КонецПроцедуры

Процедура ОбновитьПроксиВФоне() Экспорт
	
	ОМ_Сервер.НоваяЗаписьЖурнала(2, ОМ_РегламентныеОперации.Получить_ИмяМетодаЗагрузкиПрокси(), "Запущено обновление прокси");
	
	ОМ_Прокси.Загрузить_СписокПроксиСПортала();
	
КонецПроцедуры

Процедура ОчиститьПроксиВФоне() Экспорт
	
	ОМ_Сервер.НоваяЗаписьЖурнала(2, ОМ_РегламентныеОперации.Получить_ИмяМетодаОчисткиПрокси(), "Запущена очистка прокси");
	
	ОМ_Прокси.Очистить_ПереченьПрокси();
	
КонецПроцедуры

Процедура Очистить_ИспользованныеПрокси() Экспорт
	
	ОМ_Сервер.НоваяЗаписьЖурнала(2, ОМ_РегламентныеОперации.Получить_ИмяМетодаОчисткиИспользованныхПрокси(), "Запущена очистка использованных прокси");
	
	ОМ_Прокси.Очистить_ИспользованныеПрокси();
	
КонецПроцедуры

Процедура Проверить_ВсеПрокси() Экспорт
	
	ОМ_Сервер.НоваяЗаписьЖурнала(2, ОМ_РегламентныеОперации.Получить_ИмяМетодаПроверкиВсехПрокси(), "Запущена проверка всех прокси");
	
	ОМ_Прокси.Проверить_ВсеПрокси();
	
КонецПроцедуры

Функция Получить_ИмяМетодаПроверкиВсехПрокси() Экспорт
	
	Возврат "ОМ_РегламентныеОперации.Проверить_ВсеПрокси";
	
КонецФункции

Функция Получить_ИмяМетодаОчисткиИспользованныхПрокси() Экспорт
	
	Возврат "ОМ_Прокси.Очистить_ИспользованныеПрокси";
	
КонецФункции

Функция Получить_ИмяМетодаЗагрузкиПрокси() Экспорт
	
	Возврат "ОМ_РегламентныеОперации.ОбновитьПроксиВФоне";	
	
КонецФункции

Функция Получить_ИмяМетодаОчисткиПрокси() Экспорт
	
	Возврат "ОМ_РегламентныеОперации.ОчиститьПроксиВФоне";	
	
КонецФункции

// +++++++++++++++++ 1C Обновления +++++++++++++++++ \\
Функция Получить_ИмяМетодаОбновитьДеревоРазделов() Экспорт
	
	Возврат "ОМ_РегламентныеОперации.ОбновитьДеревоРазделов";	
	
КонецФункции

Функция Получить_ИмяМетодаЗагрузкаКонфигураций() Экспорт
	
	Возврат "ОМ_РегламентныеОперации.ЗагрузкаКонфигураций";	
	
КонецФункции

Функция Получить_ИмяМетодаЗагрузкаРелизов() Экспорт
	
	Возврат "ОМ_РегламентныеОперации.ЗагрузкаРелизов";	
	
КонецФункции

Функция Получить_ИмяМетодаЗагрузкаСсылок() Экспорт
	
	Возврат "ОМ_РегламентныеОперации.ЗагрузкаСсылок";	
	
КонецФункции

Функция Получить_ИмяМетодаЗагрузкаФайлов1С() Экспорт
	
	Возврат "ОМ_РегламентныеОперации.ЗагрузкаФайлов1С";	
	
КонецФункции

Функция Получить_ИмяМетодаОчисткиГрупп() Экспорт
	
	Возврат "ОМ_РегламентныеОперации.ОчиститьГруппыВФоне";	
	
КонецФункции

Процедура ОчиститьГруппыВФоне() Экспорт
	
	ОМ_Сервер.НоваяЗаписьЖурнала(2, Получить_ИмяМетодаОчисткиГрупп(), "Запущена очистка групп");
	
	ОМ_Обновления1С.ОчиститьСправочник("ГруппыКонфигураций");
	                                   
КонецПроцедуры

Функция Получить_ИмяМетодаОчисткиКонфигураций() Экспорт
	
	Возврат "ОМ_РегламентныеОперации.ОчиститьКонфигурацииВФоне";	
	
КонецФункции

Процедура ОчиститьКонфигурацииВФоне() Экспорт
	
	ОМ_Сервер.НоваяЗаписьЖурнала(2, Получить_ИмяМетодаОчисткиКонфигураций(), "Запущена очистка конфигураций");
	
	ОМ_Обновления1С.ОчиститьСправочник("Конфигурации");
	                                   
КонецПроцедуры

Функция Получить_ИмяМетодаОчисткиРелизов() Экспорт
	
	Возврат "ОМ_РегламентныеОперации.ОчиститьРелизыВФоне";	
	
КонецФункции

Процедура ОчиститьРелизыВФоне() Экспорт
	
	ОМ_Сервер.НоваяЗаписьЖурнала(2, Получить_ИмяМетодаОчисткиРелизов(), "Запущена очистка релизов");
	
	ОМ_Обновления1С.ОчиститьСправочник("Релизы");
	                                   
КонецПроцедуры

Процедура ОбновитьДеревоРазделов() Экспорт
	
	ОМ_Сервер.НоваяЗаписьЖурнала(2, Получить_ИмяМетодаОбновитьДеревоРазделов(), "Запущено обновление дерева разделов");
	
	ОМ_Обновления1С.ПолучитьДеревоРазделовВФоне();
	
КонецПроцедуры

Процедура ЗагрузкаКонфигураций(ВыводитьСостояние = Ложь) Экспорт
	
	ОМ_Сервер.НоваяЗаписьЖурнала(2, Получить_ИмяМетодаЗагрузкаКонфигураций(), "Запущено обновление конфигураций");
	
	ОМ_Обновления1С.ПолучитьКонфигурацииВФоне(ВыводитьСостояние);
	
КонецПроцедуры

Процедура ЗагрузкаРелизов() Экспорт
	
	ОМ_Сервер.НоваяЗаписьЖурнала(2, Получить_ИмяМетодаЗагрузкаРелизов(), "Запущено обновление релизов");
	
	ОМ_Обновления1С.ПолучитьРелизыВФоне();
	ОМ_Обновления1С.ОбновитьГиперссылкиРелизов(Ложь);
	
КонецПроцедуры

Процедура ЗагрузкаСсылок() Экспорт
	
	ОМ_Сервер.НоваяЗаписьЖурнала(2, Получить_ИмяМетодаЗагрузкаСсылок(), "Запущено обновление гиперссылок релизов");
	
	ОМ_Обновления1С.ОбновитьГиперссылкиРелизов(Ложь);
	
КонецПроцедуры

Процедура ЗагрузкаФайлов1С() Экспорт
	
	ОМ_Сервер.НоваяЗаписьЖурнала(2, Получить_ИмяМетодаЗагрузкаФайлов1С(), "Запущено скачивание обновлений: " 
	+ Символы.ПС + "Этап 1: Обновление релизов"
	+ Символы.ПС + "Этап 2: Скачивание файлов");
	
	ОМ_Обновления1С.ПолучитьРелизыВФоне();
	ОМ_Обновления1С.ОбновитьГиперссылкиРелизов(Истина);
	
КонецПроцедуры

Процедура СтартРегламентныхПроцессов() Экспорт
		
	АвтоматическаяЗагрузкаФайлов(Истина);
	
КонецПроцедуры

Процедура АвтоматическаяЗагрузкаФайлов(НужноСкачать = Истина) Экспорт
		
	ОМ_Обновления1С.АвтоматическаяЗагрузкаФайлов(НужноСкачать);
	
КонецПроцедуры

// +++++++++++++++++ 1C Обновления +++++++++++++++++ \\










