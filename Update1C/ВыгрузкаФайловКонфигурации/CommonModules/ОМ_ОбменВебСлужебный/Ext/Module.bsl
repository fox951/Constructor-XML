
#Область МетодыОбмена_Яндекс

Функция Сформировать_ЗаголовкиЯндекса(ПараметрыПодключения)
	
	Заголовки = Новый Соответствие;
	
	Заголовки.Вставить("Content-Type", 	"application/json");
	
	Если ТекущаяДата() > ПараметрыПодключения.СрокДействия Тогда
		ВызватьИсключение("Необходимо выполнить повторную авторизацию на Яндексе");
	КонецЕсли;
	
	Заголовки.Вставить("Authorization", "OAuth " + ПараметрыПодключения.Токен);
	
	Возврат Заголовки;
	
КонецФункции

// Функция - Получить токен яндекса
//
// Параметры:
//  КодАвторизации		 - Строка 
//  ПараметрыПриложения	 - Соответствие или структура 
// 
// Возвращаемое значение:
//   - Структура("Токен, СрокДействия")
Функция Получить_ТокенЯндекса(КодАвторизации, Знач ПараметрыПриложения) Экспорт
	
	Если ТипЗнч(ПараметрыПриложения) = Тип("Соответствие") Тогда
		ПараметрыПриложения = ОМ_Сервер.СоответствиеВСтруктуру(ПараметрыПриложения);	
	КонецЕсли;
	
	API_Метод 					= "oauth.yandex.ru/token";
	
	ТипXDTO 					= ФабрикаXDTO.Тип("yandex.ru/dev/disk/api", "token");
	
	ОбъектXDTO 					= ФабрикаXDTO.Создать(ТипXDTO);
	
	ОбъектXDTO.code 			= КодАвторизации;
	ОбъектXDTO.client_id 		= ПараметрыПриложения.ИД;
	ОбъектXDTO.client_secret 	= ПараметрыПриложения.Пароль;
	ОбъектXDTO.grant_type		= "authorization_code";
	
	СтруктураURI				= ОМ_Соединения.СтруктураURI(API_Метод);
	
	ТелоЗапроса					= ОМ_Соединения.Записать_ТелоВПараметрыСтроки(ОбъектXDTO);
	
	Заголовки = Новый Соответствие;
	
	Заголовки.Вставить("Content-Type", 		"application/json");
	Заголовки.Вставить("Content-Length", 	XMLСтрока(СтрДлина(ТелоЗапроса)));
	
	HTTP_Запрос 				= Новый HTTPЗапрос(СтруктураURI.ПутьНаСервере, Заголовки);
	
	HTTP_Запрос.УстановитьТелоИзСтроки(ТелоЗапроса, КодировкаТекста.UTF8);
	
	////////////
	
	HTTP_Соединение				= Новый HTTPСоединение(СтруктураURI.ИмяСервера, 443,,,, 60, Новый ЗащищенноеСоединениеOpenSSL);
	
	Ответ						= Отправить_POSTЗапрос(HTTP_Соединение, HTTP_Запрос, 2);
	
	Структура 					= Новый Структура;
	
	Структура.Вставить("Токен", 		Ответ.access_token);
	Структура.Вставить("СрокДействия", 	ТекущаяДата() + Ответ.expires_in);
	
	Возврат Структура;
	
КонецФункции

// Загружает файл на Яндекс.Диск.
//
// Параметры:
//  ПутьКФайлуНаДиске 		- Строка - путь к выгружаемому файлу, например "фото/1.jpg"
//  АдресХранилища 			- Строка - адрес файла во временном хранилище
//  СсылкаНаКаталогЗагрузки - СправочникСсыдка.КаталогиЗагрузки
Функция ВыгрузитьФайл_Яндекса(Знач ПутьКФайлуНаДиске, Знач АдресХранилища, СсылкаНаКаталогЗагрузки) Экспорт
	
	// В случае ошибки - будет исключение
	
	ПроверитьАктуальностьПодключения(СсылкаНаКаталогЗагрузки);
	
	ТекущиеПараметрыПриложения = СсылкаНаКаталогЗагрузки.ПараметрыПодключения.Получить();
	
	ПараметрыПриложения			= ТекущиеПараметрыПриложения.ПараметрыПриложения;
	ПараметрыПодключения 		= ТекущиеПараметрыПриложения.ПараметрыПодключения;
	
	API_Метод 					= "cloud-api.yandex.net/v1/disk/resources/upload?";
	
	ТипXDTO 					= ФабрикаXDTO.Тип("yandex.ru/dev/disk/api", "upload");
	
	ОбъектXDTO 					= ФабрикаXDTO.Создать(ТипXDTO);
	
	ОбъектXDTO.path 			= ПутьКФайлуНаДиске;
	ОбъектXDTO.overwrite 		= XMLСтрока(Истина);
		
	Заголовки 					= Сформировать_ЗаголовкиЯндекса(ПараметрыПодключения);
	
	СтруктураURI				= ОМ_Соединения.СтруктураURI(API_Метод);
	
	HTTP_Запрос 				= Новый HTTPЗапрос(СтруктураURI.ПутьНаСервере, Заголовки);
	
	ТелоЗапроса					= ОМ_Соединения.Записать_ТелоВПараметрыСтроки(ОбъектXDTO);
	
	HTTP_Запрос.АдресРесурса 	= HTTP_Запрос.АдресРесурса + ТелоЗапроса;
	
	HTTP_Соединение				= Новый HTTPСоединение(СтруктураURI.ИмяСервера, 443,,,, 60, Новый ЗащищенноеСоединениеOpenSSL);
	
	HTTP_Ответ					= Отправить_GETЗапрос(HTTP_Соединение, HTTP_Запрос, 0);

	ТелоОтвета 					= HTTP_Ответ.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8);
	
	СтруктураОтвета				= ОМ_Соединения.ПрочитатьJSON_Переопределеяемая(ТелоОтвета,, Истина);
	
	///////////////////////////////////////
	
	СтруктураURL_Uploader		= ОМ_Соединения.СтруктураURI(СтруктураОтвета.href);
		
	HTTP_Соединение_Uploader	= Новый HTTPСоединение(СтруктураURL_Uploader.ИмяСервера, СтруктураURL_Uploader.Порт,,,,, Новый ЗащищенноеСоединениеOpenSSL);
	
	HttpЗапрос_Uploader			= Новый HTTPЗапрос(СтруктураURL_Uploader.ПутьНаСервере, Заголовки);
	
	HttpЗапрос_Uploader.УстановитьТелоИзДвоичныхДанных(ПолучитьИзВременногоХранилища(АдресХранилища));
	
	Попытка	
		РезультатВыгрузки		= Отправить_GETЗапрос(HTTP_Соединение_Uploader, HttpЗапрос_Uploader, 0, "Записать");	
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина; 
	
КонецФункции

// Создает папку на Яндекс.Диске по переданному пути.
//
// Параметры:
//  Путь - Строка - полный путь к создаваемой папке, например "фото/новая папка"
//  СсылкаНаКаталогЗагрузки - СправочникСсыдка.КаталогиЗагрузки
Функция СоздатьПапку_Яндекса(Знач ПутьКаталогаНаДиске, СсылкаНаКаталогЗагрузки) Экспорт
	
	// Если Адрес каталога не указан - его и не нужно создавать
	Если Не ЗначениеЗаполнено(ПутьКаталогаНаДиске) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// В случае ошибки - будет исключение
	ПроверитьАктуальностьПодключения(СсылкаНаКаталогЗагрузки);
	
	ТекущиеПараметрыПриложения = СсылкаНаКаталогЗагрузки.ПараметрыПодключения.Получить();
	
	ПараметрыПриложения		= ТекущиеПараметрыПриложения.ПараметрыПриложения;
	ПараметрыПодключения 	= ТекущиеПараметрыПриложения.ПараметрыПодключения;
	
	API_Метод 					= "cloud-api.yandex.net/v1/disk/resources?";
	
	ТипXDTO 					= ФабрикаXDTO.Тип("yandex.ru/dev/disk/api", "resources");
	
	ОбъектXDTO 					= ФабрикаXDTO.Создать(ТипXDTO);
	
	ОбъектXDTO.path 			= ПутьКаталогаНаДиске;

	Заголовки 					= Сформировать_ЗаголовкиЯндекса(ПараметрыПодключения);
	
	СтруктураURI				= ОМ_Соединения.СтруктураURI(API_Метод);
	
	HTTP_Запрос 				= Новый HTTPЗапрос(СтруктураURI.ПутьНаСервере, Заголовки);
	
	ТелоЗапроса					= ОМ_Соединения.Записать_ТелоВПараметрыСтроки(ОбъектXDTO);
	
	HTTP_Запрос.АдресРесурса 	= HTTP_Запрос.АдресРесурса + ТелоЗапроса;
	
	HTTP_Соединение				= Новый HTTPСоединение(СтруктураURI.ИмяСервера, 443,,,, 60, Новый ЗащищенноеСоединениеOpenSSL);
	
	Попытка
		HTTP_Ответ				= Отправить_GETЗапрос(HTTP_Соединение, HTTP_Запрос, 0, "Записать"); 
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

// Создает папку на Яндекс.Диске по переданному пути.
//
// Параметры:
//  Путь - Строка - полный путь к создаваемой папке, например "disk:/фото/новая папка"
//  СсылкаНаКаталогЗагрузки - СправочникСсыдка.КаталогиЗагрузки
Функция УдалитьФайл_Яндекса(Знач ПутьКаталогаНаДиске, СсылкаНаКаталогЗагрузки) Экспорт
	
	// Если Адрес каталога не указан - его и не нужно создавать
	Если Не ЗначениеЗаполнено(ПутьКаталогаНаДиске) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// В случае ошибки - будет исключение
	ПроверитьАктуальностьПодключения(СсылкаНаКаталогЗагрузки);
	
	ТекущиеПараметрыПриложения = СсылкаНаКаталогЗагрузки.ПараметрыПодключения.Получить();
	
	ПараметрыПриложения		= ТекущиеПараметрыПриложения.ПараметрыПриложения;
	ПараметрыПодключения 	= ТекущиеПараметрыПриложения.ПараметрыПодключения;
	
	API_Метод 					= "cloud-api.yandex.net/v1/disk/resources?";
	
	ТипXDTO 					= ФабрикаXDTO.Тип("yandex.ru/dev/disk/api", "resources");
	
	ОбъектXDTO 					= ФабрикаXDTO.Создать(ТипXDTO);
	
	ОбъектXDTO.path 			= ПутьКаталогаНаДиске;

	Заголовки 					= Сформировать_ЗаголовкиЯндекса(ПараметрыПодключения);
	
	СтруктураURI				= ОМ_Соединения.СтруктураURI(API_Метод);
	
	HTTP_Запрос 				= Новый HTTPЗапрос(СтруктураURI.ПутьНаСервере, Заголовки);
	
	ТелоЗапроса					= ОМ_Соединения.Записать_ТелоВПараметрыСтроки(ОбъектXDTO);
	
	HTTP_Запрос.АдресРесурса 	= HTTP_Запрос.АдресРесурса + ТелоЗапроса;
	
	HTTP_Соединение				= Новый HTTPСоединение(СтруктураURI.ИмяСервера, 443,,,, 60, Новый ЗащищенноеСоединениеOpenSSL);
	
	Попытка
		HTTP_Ответ				= Отправить_GETЗапрос(HTTP_Соединение, HTTP_Запрос, 0, "Удалить"); 
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции

// Скачивает файл с Яндекс.Диска по переданному пути и возвращает адрес во временном хранилище.
//
// Параметры:
//  Путь - Строка - полнуть путь к скачиваемому файлу, например "disk:/фото/1.jpg"
// 
// Возвращаемое значение:
//  Строка - адрес во временном хранилище с полученным файлом
//  СсылкаНаКаталогЗагрузки - СправочникСсыдка.КаталогиЗагрузки
Функция СкачатьФайл_Яндекса(Знач ПутьКаталогаНаДиске, СсылкаНаКаталогЗагрузки) Экспорт
	
	// Если Адрес каталога не указан - его и не нужно создавать
	Если Не ЗначениеЗаполнено(ПутьКаталогаНаДиске) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// В случае ошибки - будет исключение
	ПроверитьАктуальностьПодключения(СсылкаНаКаталогЗагрузки);
	
	ТекущиеПараметрыПриложения = СсылкаНаКаталогЗагрузки.ПараметрыПодключения.Получить();
	
	ПараметрыПриложения			= ТекущиеПараметрыПриложения.ПараметрыПриложения;
	ПараметрыПодключения 		= ТекущиеПараметрыПриложения.ПараметрыПодключения;
	
	API_Метод 					= "cloud-api.yandex.net/v1/disk/download?";
	
	ТипXDTO 					= ФабрикаXDTO.Тип("yandex.ru/dev/disk/api", "resources");
	
	ОбъектXDTO 					= ФабрикаXDTO.Создать(ТипXDTO);
	
	ОбъектXDTO.path 			= ПутьКаталогаНаДиске;

	Заголовки 					= Сформировать_ЗаголовкиЯндекса(ПараметрыПодключения);
	
	СтруктураURI				= ОМ_Соединения.СтруктураURI(API_Метод);
	
	HTTP_Запрос 				= Новый HTTPЗапрос(СтруктураURI.ПутьНаСервере, Заголовки);
	
	ТелоЗапроса					= ОМ_Соединения.Записать_ТелоВПараметрыСтроки(ОбъектXDTO);
	
	HTTP_Запрос.АдресРесурса 	= HTTP_Запрос.АдресРесурса + ТелоЗапроса;
	
	HTTP_Соединение				= Новый HTTPСоединение(СтруктураURI.ИмяСервера, 443,,,, 60, Новый ЗащищенноеСоединениеOpenSSL);
	
	Попытка
		HTTP_Ответ				= Отправить_GETЗапрос(HTTP_Соединение, HTTP_Запрос, 0); 
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
	// редирект
	Пока HTTP_Ответ.КодСостояния = 302 Цикл
		
		СтруктураURL 			= ОМ_Соединения.СтруктураURI(HTTP_Ответ.Заголовки.Получить("Location"));
		
		HTTP_Соединение 		= Новый HTTPСоединение(СтруктураURL.ИмяСервера, СтруктураURL.Порт,,,,, Новый ЗащищенноеСоединениеOpenSSL);
		
		HTTP_Запрос 			= Новый HTTPЗапрос(СтруктураURL.Путь, Заголовки);
		
		HTTP_Ответ				= Отправить_GETЗапрос(HTTP_Соединение, HTTP_Запрос, 0);
		
	КонецЦикла;
	
	ОбработатьКодСостояния(HTTP_Ответ, СтруктураURL.Путь);
	
	ДанныеФайла 		= HTTP_Ответ.ПолучитьТелоКакДвоичныеДанные();
	Адрес 				= ПоместитьВоВременноеХранилище(ДанныеФайла, Новый УникальныйИдентификатор);
	
	Возврат Адрес;
	
КонецФункции

#КонецОбласти

#Область МетодыОбмена_Гугл

Функция Найти_ФайлГугл(ИмяФайла, СсылкаНаКаталогЗагрузки, ЭтоКаталог = Ложь, Описание = "") Экспорт
	
	ПроверитьАктуальностьПодключения(СсылкаНаКаталогЗагрузки);
	Обновить_ТокенГугла(СсылкаНаКаталогЗагрузки);
	
	ТекущиеПараметрыПриложения = СсылкаНаКаталогЗагрузки.ПараметрыПодключения.Получить();
	
	ПараметрыПриложения				= ТекущиеПараметрыПриложения.ПараметрыПриложения;
	ПараметрыПодключения 			= ТекущиеПараметрыПриложения.ПараметрыПодключения;

	API_Метод 						= "https://www.googleapis.com/drive/v3/files";
	
	Файл 							= Новый Файл(ИмяФайла);
	Описание_MimeType				= Получить_ТипВебФайла(?(ЭтоКаталог, "", Файл.Расширение));
	
	СписокПараметровЗапроса = Новый Соответствие;
	
	СоответствиеОтбор 		= Новый Соответствие;
	
	СоответствиеОтбор.Вставить("mimeType", 		Описание_MimeType);
	СоответствиеОтбор.Вставить("description", 	Описание);
	СоответствиеОтбор.Вставить("trashed", 		Ложь);
	
	Массив = Новый Массив;

	Для Каждого Стр Из СоответствиеОтбор Цикл
		
		Если Стр.Ключ = "description" Или Стр.Ключ = "trashed" Тогда
			Продолжить;
		КонецЕсли;
		
		Массив.Добавить(Стр.Ключ + "=" + "'" + Стр.Значение + "'");
		
	КонецЦикла;
		
	СписокПараметровЗапроса.Вставить("q", Массив);
	СписокПараметровЗапроса.Вставить("fields", "*");
	СписокПараметровЗапроса.Вставить("includeItemsFromAllDrives", "false");
	
	СтруктураПараметров 			= ОМ_Сервер.СоответствиеВСтруктуру(СписокПараметровЗапроса);
	СтрокаПараметров 	 			= ОМ_Соединения.СформироватьПараметрыЗапроса(СписокПараметровЗапроса);
				
	API_Метод						= API_Метод;
	
	СтруктураURI					= ОМ_Соединения.СтруктураURI(API_Метод);
	
	Заголовки 						= Новый Соответствие;
	
	Заголовки.Вставить("Content-Type", 		"application/json");
	Заголовки.Вставить("Content-Charset", 	"utf-8");
	Заголовки.Вставить("Authorization", 	"Bearer " + ПараметрыПодключения.Токен);
		
	HTTP_Соединение 		= Новый HTTPСоединение(СтруктураURI.ИмяСервера,,,,,, Новый ЗащищенноеСоединениеOpenSSL);
	
	HTTP_Запрос 			= Новый HTTPЗапрос(СтруктураURI.ПутьНаСервере, Заголовки);
	HTTP_Запрос.АдресРесурса = HTTP_Запрос.АдресРесурса + СтрокаПараметров;
	
	Ответ = Отправить_GETЗапрос(HTTP_Соединение, HTTP_Запрос, 2); 

	РезультатПоисков = Найти_ИД_ФайлаВКоллекцииГугл(Ответ.files, СоответствиеОтбор);
	
	Если ЗначениеЗаполнено(РезультатПоисков) Тогда
		
		Возврат Новый Структура("ИД_Файла", РезультатПоисков);
		
	КонецЕсли;

КонецФункции

Функция Найти_ИД_ФайлаВКоллекцииГугл(Соответствие, ПараметрыОтбора)
	
	ИД_Файла = "";
	
	Результат = Ложь;
	
	Для Каждого СтрокаФайла Из Соответствие Цикл
		
		Подошло = Истина;
		
		Для Каждого Отбор Из ПараметрыОтбора Цикл
			
			Если СтрокаФайла.Получить(Отбор.Ключ) <> Отбор.Значение Тогда
				Подошло = Ложь;
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Если Не Подошло Тогда
			Продолжить;
		Иначе
			ИД_Файла = СтрокаФайла.Получить("id");
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ИД_Файла;
	
КонецФункции

// ПараметрыПриложения - Структура
Функция УдалитьФайл_Гугла(Знач ИД_Файла, СсылкаНаКаталогЗагрузки) Экспорт
	
	ПроверитьАктуальностьПодключения(СсылкаНаКаталогЗагрузки);
	Обновить_ТокенГугла(СсылкаНаКаталогЗагрузки);
	
	ТекущиеПараметрыПриложения 	= СсылкаНаКаталогЗагрузки.ПараметрыПодключения.Получить();
	
	ПараметрыПриложения			= ТекущиеПараметрыПриложения.ПараметрыПриложения;
	ПараметрыПодключения 		= ТекущиеПараметрыПриложения.ПараметрыПодключения;
	
	SSL 						= Новый ЗащищенноеСоединениеOpenSSL;
	Соединение 					= Новый HTTPСоединение("www.googleapis.com",,,,,,SSL);
	
	Заголовки = Новый Соответствие;
	
	Заголовки.Вставить("Authorization", "Bearer " + ПараметрыПодключения.Токен);
	
	ТекстЗапроса = "/drive/v3/files/" + ИД_Файла;
	
	HTTPЗапрос 					= Новый HTTPЗапрос(ТекстЗапроса, Заголовки);
	
	HttpОтвет 					= Соединение.Удалить(HttpЗапрос);
		
	Попытка
		ОбработатьКодСостояния(HttpОтвет);
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;

КонецФункции

// ПараметрыПриложения - Структура
Функция СоздатьПапку_Гугла(Знач ИмяКаталога, СсылкаНаКаталогЗагрузки, ИДПапки, ИДРодителя = Неопределено, Описание = "") Экспорт
	
	// https://developers.google.com/drive/api/v3/folder
	
	// Если Адрес каталога не указан - его и не нужно создавать
	Если Не ЗначениеЗаполнено(ИмяКаталога) Тогда
		Возврат Истина;
	КонецЕсли;

	ДвоичныеДанныеПустогоКаталога = Неопределено;
	
	АдресХранилища 	= ПоместитьВоВременноеХранилище(ДвоичныеДанныеПустогоКаталога, Новый УникальныйИдентификатор);
	
	ИДПапки 		= "";
	
	Файл 			= Новый Файл(ИмяКаталога);
	
	Попытка
		ВыгрузитьФайл_Гугла(Файл.Имя, АдресХранилища, СсылкаНаКаталогЗагрузки, ИДПапки, ИДРодителя, Описание);
	Исключение
		Возврат Ложь;
	КонецПопытки;
		
	Возврат Истина;
	
КонецФункции

Функция Сформировать__ОписаниеРодителяФайлаГуглФайла(ИД_Родителя) 

	ТипDriveProperties 	= ФабрикаXDTO.Тип("developers.google.com/drive/api/v3/reference", "Родитель");
	
	ОбъектDrive 		= ФабрикаXDTO.Создать(ТипDriveProperties);
	
	ОбъектDrive.id 		= ИД_Родителя;
	
	ЗаписьJSON	  			= Новый ЗаписьJSON;
	ПараметрыJSON 			= Новый ПараметрыЗаписиJSON(, Символы.Таб);
	
	ЗаписьJSON.УстановитьСтроку(ПараметрыJSON);
	
	ФабрикаXDTO.ЗаписатьJSON(ЗаписьJSON, ОбъектDrive);
	
	ТелоЗапросаJSON 		= ЗаписьJSON.Закрыть();
	
	ТелоЗапросаJSON = ОМ_Соединения.Получить_ЗначениеОбъектаJSON(ТелоЗапросаJSON);
	
	Возврат ТелоЗапросаJSON;

КонецФункции

Функция Сформировать_МетаданныеГуглФайла(ИмяФайла, Описание_MimeType, ИД_Родителя, Описание = "")
	
	// https://github.com/pik-software/1C_GSuite_Extention
	
	Тип_МетаданныеФайла_XDTO 		= ФабрикаXDTO.Тип("developers.google.com/drive/api/v3/reference", "МетаданныеФайла");
	МетаданныеФайла_XDTO 			= ФабрикаXDTO.Создать(Тип_МетаданныеФайла_XDTO);
	
	Файл = Новый Файл(ИмяФайла);
	
	МетаданныеФайла_XDTO.name 	 	= ИмяФайла;
	
	МетаданныеФайла_XDTO.mimeType 	= Описание_MimeType;
	МетаданныеФайла_XDTO.description= Описание;
	
	Если ЗначениеЗаполнено(ИД_Родителя) Тогда
		
		//МетаданныеФайла_XDTO.parents	= ИД_Родителя;
		
		Тип_Родитель_XDTO 				= ФабрикаXDTO.Тип("developers.google.com/drive/api/v3/reference", "Родитель");
		
		Родитель_XDTO 					= ФабрикаXDTO.Создать(Тип_Родитель_XDTO);
		Родитель_XDTO.id 				= ИД_Родителя;
		
		МетаданныеФайла_XDTO.parents.Добавить(Родитель_XDTO);
		
	КонецЕсли;
	
	ЗаписьJSON	  						= Новый ЗаписьJSON;
	ПараметрыJSON 						= Новый ПараметрыЗаписиJSON(, Символы.Таб);
	
	ЗаписьJSON.УстановитьСтроку(ПараметрыJSON);
	
	ФабрикаXDTO.ЗаписатьJSON(ЗаписьJSON, МетаданныеФайла_XDTO);
	
	ТелоЗапросаJSON 					= ЗаписьJSON.Закрыть();
		
	ТелоЗапросаJSON 					= ОМ_Соединения.Получить_ЗначениеОбъектаJSON(ТелоЗапросаJSON);
	
	Если ЗначениеЗаполнено(ИД_Родителя) Тогда
		
		ПозНачала 				= СтрНайти(ТелоЗапросаJSON, "{",,, 2);
		ПозКонца				= СтрНайти(ТелоЗапросаJSON, "}",,,1);
		
		Блок 					= Сред(ТелоЗапросаJSON, ПозНачала, ПозКонца - ПозНачала + 1);
		
		НовыйБлок				= """" + ИД_Родителя + """";
		
		ТелоЗапросаJSON 		= СтрЗаменить(ТелоЗапросаJSON, Блок, НовыйБлок);
		
	КонецЕсли;

	Возврат ТелоЗапросаJSON;
	
КонецФункции

// Получает токены от Google
//
// Параметры:
//  КодАвторизации		 - Строка 
//  ПараметрыПриложения	 - Соответствие 
// 
// Возвращаемое значение:
//   - Структура("Токен, СрокДействия", {"Токен_Рефреш", "Токен_ИД" [Если есть]})
Функция Получить_ТокенГугла(КодАвторизации, Знач ПараметрыПриложения) Экспорт

	Если ТипЗнч(ПараметрыПриложения) = Тип("Структура") Тогда
		ПараметрыПриложения = ОМ_Служебный.Получить_ПараметрыПриложенияAPI(Истина).Получить(ПараметрыПриложения.Имя);	
	КонецЕсли;
	
	ПараметрыАвторизации 			= ПараметрыПриложения.Получить("ПараметрыАвторизации");

	API_Метод 						= "https://www.googleapis.com/oauth2/v4/token";
			
	СписокПараметровЗапроса = Новый Соответствие;
	
	ОМ_Служебный.ДобавитьПараметрВСоответствие("client_id", 	ПараметрыПриложения.Получить("Ключ_ID"), 		СписокПараметровЗапроса);
	ОМ_Служебный.ДобавитьПараметрВСоответствие("redirect_uri", 	ПараметрыАвторизации.Получить("redirect_uri"), 	СписокПараметровЗапроса);
	ОМ_Служебный.ДобавитьПараметрВСоответствие("client_secret", ПараметрыПриложения.Получить("Ключ_Secret"), 	СписокПараметровЗапроса);
	ОМ_Служебный.ДобавитьПараметрВСоответствие("grant_type", 	"authorization_code", 							СписокПараметровЗапроса);
	ОМ_Служебный.ДобавитьПараметрВСоответствие("code", 			КодАвторизации, 								СписокПараметровЗапроса); 
	
	ОМ_Служебный.ДобавитьПараметрВСоответствие("access_type", 	"offline", 										СписокПараметровЗапроса);
	ОМ_Служебный.ДобавитьПараметрВСоответствие("prompt", 		"consent", 										СписокПараметровЗапроса);

	СтруктураПараметров 			= ОМ_Сервер.СоответствиеВСтруктуру(СписокПараметровЗапроса);
	СтрокаПараметров 	 			= ОМ_Соединения.СформироватьПараметрыЗапроса(СписокПараметровЗапроса);
			
	СтруктураURI					= ОМ_Соединения.СтруктураURI(API_Метод);
	
	Заголовки 						= Новый Соответствие;
	
	Заголовки.Вставить("Content-Type", 		"application/json");
	Заголовки.Вставить("Content-Charset", 	"utf-8");
	
	HTTP_Соединение 		 		= Новый HTTPСоединение(СтруктураURI.ИмяСервера,,,,, 15, Новый ЗащищенноеСоединениеOpenSSL);
	
	HTTP_Запрос 					= Новый HTTPЗапрос(СтруктураURI.ПутьНаСервере, Заголовки);
	
	HTTP_Запрос.АдресРесурса 		= HTTP_Запрос.АдресРесурса + СтрокаПараметров;

	Попытка
		СтруктураТокенов 			= Отправить_POSTЗапрос(HTTP_Соединение, HTTP_Запрос, 2);
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
	Структура 						= Новый Структура;
	
	Структура.Вставить("Токен", 			СтруктураТокенов.access_token);
	
	Структура.Вставить("СрокДействия", 		ТекущаяДата() + Число(СтруктураТокенов.expires_in));
	
	Если СтруктураТокенов.Свойство("refresh_token") Тогда
		Структура.Вставить("Токен_Рефреш", 	СтруктураТокенов.refresh_token);
	КонецЕсли;
	
	Если СтруктураТокенов.Свойство("id_token") Тогда
		Структура.Вставить("Токен_ИД", 		СтруктураТокенов.id_token);
	КонецЕсли;
	
	Возврат Структура;
	
КонецФункции

// Загружает файл на Яндекс.Диск.
//
// Параметры:
//  Путь 		   - Строка - полный путь к загружаемому файлу, например "disk:/фото/1.jpg"
//  АдресХранилища - Строка - адрес файла во временном хранилище
//  СсылкаНаКаталогЗагрузки - СправочникСсыдка.КаталогиЗагрузки
//	ИДФайла		   - Строка - В этот параметр запишется Идентификатор файла. Нужно передавать пустую строку
//  ИДРодителя	   - Строка - Идентфикатор каталога-владельца
Функция ВыгрузитьФайл_Гугла(Знач ПутьКФайлуНаДиске, Знач АдресХранилища, СсылкаНаКаталогЗагрузки, ИД_Файла, Знач ИД_Родителя = Неопределено, Описание = "") Экспорт
	
	ПроверитьАктуальностьПодключения(СсылкаНаКаталогЗагрузки);
	Обновить_ТокенГугла(СсылкаНаКаталогЗагрузки);
	
	ТекущиеПараметрыПриложения = СсылкаНаКаталогЗагрузки.ПараметрыПодключения.Получить();
	
	ПараметрыПриложения			= ТекущиеПараметрыПриложения.ПараметрыПриложения;
	ПараметрыПодключения 		= ТекущиеПараметрыПриложения.ПараметрыПодключения;
		
	boundary 					= ОМ_Сервер.НормализоватьИдентификатор(Новый УникальныйИдентификатор);
	
	ДвоичныеДанные 				= ПолучитьИзВременногоХранилища(АдресХранилища); // двоичные данные файла
	
	ЭтоВыгружаетсяКаталог		= ДвоичныеДанные = Неопределено;
	
	Структура_СуществующийФайл  = Найти_ФайлГугл(ПутьКФайлуНаДиске, СсылкаНаКаталогЗагрузки, ДвоичныеДанные = Неопределено, Описание);
	
	Если Структура_СуществующийФайл <> Неопределено Тогда
		
		ИД_Файла = Структура_СуществующийФайл.ИД_Файла;
		
		Если Не ЭтоВыгружаетсяКаталог Тогда
			УдалитьФайл_Гугла(ИД_Файла, СсылкаНаКаталогЗагрузки); 
		Иначе
			Возврат Истина;
		КонецЕсли;
			
	КонецЕсли;
	
	////Метаданные файла {{

	Файл 					= Новый Файл(ПутьКФайлуНаДиске);
	Описание_MimeType		= Получить_ТипВебФайла(?(ЭтоВыгружаетсяКаталог, "", Файл.Расширение));
	
	СтрокаМетаданныеФайла 	= Сформировать_МетаданныеГуглФайла(Файл.Имя, Описание_MimeType, ИД_Родителя, Описание);
	
	Поток 					= Новый ПотокВПамяти();
	
	ЗаписьДанных 			= Новый ЗаписьДанных(Поток);
	
	ЗаписьДанных.ЗаписатьСтроку("Content-Type: application/json; charset=UTF-8");
	ЗаписьДанных.ЗаписатьСтроку("");
	ЗаписьДанных.ЗаписатьСтроку(СтрокаМетаданныеФайла);
	
	ЗаписьДанных.Закрыть();
	
	ДвоичныеДанныеМетаданные = Поток.ЗакрытьИПолучитьДвоичныеДанные();
	//Метаданные файла }}
	
	//Данные файла {{	
	Поток 					= Новый ПотокВПамяти();
	
	ЗаписьДанных 			= Новый ЗаписьДанных(Поток);
	
	ЗаписьДанных.ЗаписатьСтроку("Content-Type: " + Описание_MimeType);
	ЗаписьДанных.ЗаписатьСтроку("");
	
	Если ДвоичныеДанные <> Неопределено Тогда
		ЗаписьДанных.Записать(ДвоичныеДанные);
	КонецЕсли;
	
	ЗаписьДанных.Закрыть();
	
	ДвоичныеДанныеФайла 	= Поток.ЗакрытьИПолучитьДвоичныеДанные();
	//Данные файла }}
	
	//формирование тела запроса {{
	ПотокТело 				= Новый ПотокВПамяти();
	
	ЗаписьДанных 			= Новый ЗаписьДанных(ПотокТело);
	
	ЗаписьДанных.ЗаписатьСтроку("--" + boundary);
	
	ЗаписьДанных.Записать(ДвоичныеДанныеМетаданные);
	
	ЗаписьДанных.ЗаписатьСтроку("--" + boundary);
	
	ЗаписьДанных.Записать(ДвоичныеДанныеФайла);
	
	ЗаписьДанных.ЗаписатьСтроку("--" + boundary + "--");
	ЗаписьДанных.ЗаписатьСтроку("--" + boundary + "--");
	
	ЗаписьДанных.Закрыть();
	
	ДвоичныеДанныеТело 		= ПотокТело.ЗакрытьИПолучитьДвоичныеДанные();
	//формирование тела запроса }}
	
	Заголовки  				= Новый Соответствие;
	
	Заголовки.Вставить("Authorization", "Bearer " + ПараметрыПодключения.Токен);
	Заголовки.Вставить("Content-Type", 	"Multipart/Related; boundary=" + boundary);
	Заголовки.Вставить("Content-Length", Формат(ДвоичныеДанныеТело.Размер(), "ЧГ="));
	
	API_Метод 				= "https://www.googleapis.com/upload/drive/v3/files?uploadType=multipart";
	
	СтруктураURI			= ОМ_Соединения.СтруктураURI(API_Метод);
	
	HTTP_Соединение 		= Новый HTTPСоединение(СтруктураURI.ИмяСервера,,,,,, Новый ЗащищенноеСоединениеOpenSSL);
	
	HTTP_Запрос 			= Новый HTTPЗапрос(СтруктураURI.ПутьНаСервере, Заголовки);
	
	HTTP_Запрос.УстановитьТелоИзДвоичныхДанных(ДвоичныеДанныеТело);
	
	Попытка
		СтруктураОтвета 	= Отправить_POSTЗапрос(HTTP_Соединение, HTTP_Запрос, 2);
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
	ИД_Файла 				= СтруктураОтвета.id; 
		
	Возврат Истина; 
	
КонецФункции

// Получает и записывает в параметры подключения новый токен гугла
//
// Параметры:
//  СсылкаНаКаталогЗагрузки	 - СправочникСсыдка.КаталогиЗагрузки 
Процедура Обновить_ТокенГугла(СсылкаНаКаталогЗагрузки)
	
	ТекущиеПараметрыПодключения = СсылкаНаКаталогЗагрузки.ПараметрыПодключения.Получить();
	
	ПараметрыПриложения 	= ТекущиеПараметрыПодключения.ПараметрыПриложения;
	ПараметрыПодключения 	= ТекущиеПараметрыПодключения.ПараметрыПодключения;
	
	// Если срок действия токена заканчивается (Осталось менее 5 мин) - его нужно обновить
	Если ТекущаяДата() - 5*60 <= ПараметрыПодключения.СрокДействия Тогда
		
		Возврат;
		
	КонецЕсли;
	
	///////////
	
	АдресЗапроса = "https://www.googleapis.com/oauth2/v4/token";
	
	СписокПараметровЗапроса = Новый Соответствие;
	
	ОМ_Служебный.ДобавитьПараметрВСоответствие("client_id", 	ПараметрыПриложения.Ключ_ID, 		СписокПараметровЗапроса);
	ОМ_Служебный.ДобавитьПараметрВСоответствие("client_secret", ПараметрыПриложения.Ключ_Secret, 	СписокПараметровЗапроса);
	ОМ_Служебный.ДобавитьПараметрВСоответствие("refresh_token", ПараметрыПодключения.Токен_Рефреш,	СписокПараметровЗапроса);
	ОМ_Служебный.ДобавитьПараметрВСоответствие("grant_type", 	"refresh_token", 					СписокПараметровЗапроса);
	
	СтрокаПараметров 	 = ОМ_Соединения.СформироватьПараметрыЗапроса(СписокПараметровЗапроса);
	
	АдресЗапроса 		 = АдресЗапроса + СтрокаПараметров;
	
	СтруктураURI 		 = ОМ_Соединения.СтруктураURI(АдресЗапроса);
	
	HTTPСоединение 		 = Новый HTTPСоединение(СтруктураURI.Хост, 443 , , ,, 15, Новый ЗащищенноеСоединениеOpenSSL);
	
	Заголовки 			= Новый Соответствие;
	
	Заголовки.Вставить("Content-Type", 		"application/x-www-form-urlencoded");
	Заголовки.Вставить("Content-Charset", 	"utf-8");
	
	HTTPЗапрос 			= Новый HTTPЗапрос(СтруктураURI.ПутьНаСервере, Заголовки);
	HTTPОтвет 			= HTTPСоединение.ОтправитьДляОбработки(HTTPЗапрос);
	
	Результат 			= HTTPОтвет.ПолучитьТелоКакСтроку();
	
	ОбработатьКодСостояния(HTTPОтвет, СтруктураURI.ПутьНаСервере);
	
	////////////                                         
	Соответствие_JSON	= ОМ_Соединения.ПрочитатьJSON_Переопределеяемая(Результат, Истина);
	
	СтруктураОтвета 	= ОМ_Сервер.СоответствиеВСтруктуру(Соответствие_JSON);
		
	ПараметрыПодключения.Токен 		  = СтруктураОтвета.access_token;
	ПараметрыПодключения.Токен_ИД	  = СтруктураОтвета.id_token;
	ПараметрыПодключения.СрокДействия = ТекущаяДата() + СтруктураОтвета.expires_in;
	
	СправочникОбъект						= СсылкаНаКаталогЗагрузки.ПолучитьОбъект();
	СправочникОбъект.ПараметрыПодключения 	= ОМ_Сервер.СложитьВХранилище(ТекущиеПараметрыПодключения);
	СправочникОбъект.Записать();
	
КонецПроцедуры

#КонецОбласти

#Область МетодыОбменаDropBox

Функция СкачатьФайл_DropBox(Знач ПутьКаталогаНаДиске, СсылкаНаКаталогЗагрузки) Экспорт
	
	ВызватьИсключение("Метод СкачатьФайл_DropBox не описан");
	
КонецФункции

Функция УдалитьФайл_DropBox(Знач ПутьКаталогаНаДиске, СсылкаНаКаталогЗагрузки) Экспорт
	
	ВызватьИсключение("Метод УдалитьФайл_DropBox не описан");
	
КонецФункции

Функция ВыгрузитьФайл_DropBox(Знач ПутьКаталогаНаДиске, СсылкаНаКаталогЗагрузки) Экспорт
	
	ВызватьИсключение("Метод ВыгрузитьФайл_DropBox не описан");
	
КонецФункции

Функция СоздатьПапку_DropBox(Знач ПутьКаталогаНаДиске, СсылкаНаКаталогЗагрузки) Экспорт
	
	ВызватьИсключение("Метод СоздатьПапку_DropBox не описан");
	
КонецФункции

Функция Получить_ТокенDropBox(Знач ПутьКаталогаНаДиске, СсылкаНаКаталогЗагрузки) Экспорт
	
	ВызватьИсключение("Метод Получить_ТокенDropBox не описан");
	
КонецФункции

#КонецОбласти

#Область ОбщиеВспомогательныеМетоды

// Функция - Отправить POST Запрос
//
// Параметры:
//  HTTP_Соединение	 - HTTP_Соединение 
//  HTTP_Запрос		 - HTTP_Запрос 
//  ВариантОтвета	 - 0 - HTTP ответ, 1 - Соответствие, 2 - Структура, 3 - Строка
// 
// Возвращаемое значение:
//   - В зависимости от ВариантОтвета 
//
Функция Отправить_POSTЗапрос(HTTP_Соединение, HTTP_Запрос, ВариантОтвета = 1) Экспорт
	
	HTTP_Ответ = HTTP_Соединение.ОтправитьДляОбработки(HTTP_Запрос);
	
	ТелоОтвета = HTTP_Ответ.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8);

	ОбработатьКодСостояния(HTTP_Ответ, HTTP_Соединение.Сервер, HTTP_Запрос.АдресРесурса);
	
	Если ВариантОтвета = 1 Тогда
		Возврат HTTP_Ответ;
	ИначеЕсли ВариантОтвета = 1 Тогда
		Возврат ОМ_Соединения.ПрочитатьJSON_Переопределеяемая(ТелоОтвета, Истина);
	ИначеЕсли ВариантОтвета = 2 Тогда
		Возврат ОМ_Соединения.ПрочитатьJSON_Переопределеяемая(ТелоОтвета, Ложь, Истина);
	Иначе
		Возврат ОМ_Соединения.ПрочитатьJSON_Переопределеяемая(ТелоОтвета);
	КонецЕсли;
	
КонецФункции

// Функция - Отправить GET Запрос
//
// Параметры:
//  HTTP_Соединение	 - HTTP_Соединение 
//  HTTP_Запрос		 - HTTP_Запрос 
//  ВариантОтвета	 - 0 - HTTP ответ, 1 - Соответствие, 2 - Структура, 3 - Строка
// 
// Возвращаемое значение:
//   - В зависимости от ВариантОтвета 
//
Функция Отправить_GETЗапрос(HTTP_Соединение, HTTP_Запрос, ВариантОтвета = 1, Действие = "Получить") Экспорт
	
	HTTP_Ответ = Вычислить("HTTP_Соединение." + Действие + "(HTTP_Запрос)");
	
	ТелоОтвета = HTTP_Ответ.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8);
	
	Если СтрНайти(ТелоОтвета, "DiskPathPointsToExistentDirectoryError") = 0 Тогда
		ОбработатьКодСостояния(HTTP_Ответ, HTTP_Соединение.Сервер, HTTP_Запрос.АдресРесурса);		
	КонецЕсли;
	
	Если ВариантОтвета = 0 Тогда
		Возврат HTTP_Ответ;
	ИначеЕсли ВариантОтвета = 1 Тогда
		Возврат ОМ_Соединения.ПрочитатьJSON_Переопределеяемая(ТелоОтвета, Истина);
	ИначеЕсли ВариантОтвета = 2 Тогда
		Возврат ОМ_Соединения.ПрочитатьJSON_Переопределеяемая(ТелоОтвета, Ложь, Истина);
	Иначе
		Возврат ОМ_Соединения.ПрочитатьJSON_Переопределеяемая(ТелоОтвета);
	КонецЕсли;
	
КонецФункции

// Процедура - Проверяет, вышел ли срок действия Токена. 
// Если да - при возможности получит и запишет новый
//
// Параметры:
//  СсылкаНаКаталогЗагрузки	 - СправочникСсылка.КаталогиЗагрузки
//
Процедура ПроверитьАктуальностьПодключения(Знач СсылкаНаКаталогЗагрузки) Экспорт
	
	СоответствиеОшибок = Новый Соответствие;
	
	СоответствиеОшибок.Вставить(0, "Подключение не настроено. Требуется авторизация");
	СоответствиеОшибок.Вставить(1, "Не удалось найти токен. Требуется авторизация");
	СоответствиеОшибок.Вставить(2, "Срок действия токена истек. Требуется авторизация");
	
	ТекущаяОшибка = Неопределено;
	
	ТекущиеПараметрыПриложения = СсылкаНаКаталогЗагрузки.ПараметрыПодключения.Получить();
	
	Если ТекущиеПараметрыПриложения = Неопределено Тогда
		
		ТекущаяОшибка = 0;
		
	ИначеЕсли ТипЗнч(ТекущиеПараметрыПриложения) = Тип("Соответствие") Тогда	
		
		ТекущиеПараметрыПриложения = ОМ_Сервер.СоответствиеВСтруктуру(ТекущиеПараметрыПриложения);
		
	КонецЕсли;
	
	Если ТекущиеПараметрыПриложения <> Неопределено Тогда
		
		Если Не ТекущиеПараметрыПриложения.Свойство("ПараметрыПодключения") Тогда
			ТекущаяОшибка = 0;	
		ИначеЕсли Не ТекущиеПараметрыПриложения.ПараметрыПодключения.Свойство("Токен") Тогда
			ТекущаяОшибка = 1;
		ИначеЕсли Не ТекущиеПараметрыПриложения.ПараметрыПодключения.Свойство("СрокДействия") Тогда
			ТекущаяОшибка = 1;
		ИначеЕсли ТекущаяДата() > ТекущиеПараметрыПриложения.ПараметрыПодключения.СрокДействия Тогда
			
			Если Не ТекущиеПараметрыПриложения.ПараметрыПодключения.Свойство("Токен_Рефреш") Тогда
				ТекущаяОшибка = 2;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	///////////////////////////////////////////////////////////////////////
	
	ТекстОшибки = СоответствиеОшибок.Получить(ТекущаяОшибка);
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		
		ВызватьИсключение(ТекстОшибки);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьКодСостояния(Знач HttpОтвет, Сервер = "", Адрес = "")
	
	ТекстИсключения = "";
	
	Если (HttpОтвет.КодСостояния < 200) Или (HttpОтвет.КодСостояния >= 300) Тогда
		
		Массив = Новый Массив;
		
		Массив.Добавить("Сервер " 			+ """" + Сервер + """" + "/" + Адрес + """" + ":");
		Массив.Добавить("Код состояния: " 	+ HttpОтвет.КодСостояния);
		
		Текст = HttpОтвет.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8);
		
		ЭтоJSON = Истина;
		
		Попытка
			СтруктураОтвета = ОМ_Соединения.ПрочитатьJSON_Переопределеяемая(Текст,, Истина);
		Исключение
			ЭтоJSON = Ложь;
		КонецПопытки;
		
		Если ЭтоJSON Тогда
			
			Если СтруктураОтвета.Свойство("error") Тогда
				
				Массив.Добавить(Символы.ПС);
				
				Массив.Добавить("Ошибка: " + """" + СтруктураОтвета.error + """");	
				
				Если СтруктураОтвета.Свойство("error_description") Тогда
					Массив.Добавить("Описание ошибки: " + """" + СтруктураОтвета.error_description + """");	
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
			ТекстИсключения = СтрСоединить(Массив, Символы.ПС);
			
		ВызватьИсключение(ТекстИсключения);
		
	КонецЕсли;
	
КонецПроцедуры

// Функция - Возвращает веб-описание расширения
//
// Параметры:
//  Расширение	 - Строка (Пример: "xml" или ".xml")
// 
// Возвращаемое значение:
//   - Строка в формате веб-описания
//
Функция Получить_ТипВебФайла(Знач Расширение) Экспорт
	
	//Источник https://github.com/google/google-drive-proxy/blob/master/DriveProxy/API/MimeType.cs
	
	Расширение = СокрЛП(Врег(СтрЗаменить(Расширение, ".", "")));
	
	Соответствие = Новый Соответствие;
	
	Соответствие.Вставить("",				"application/vnd.google-apps.folder");
	Соответствие.Вставить("323", 			"text/h323");
	Соответствие.Вставить("3g2", 			"video/3gpp2");
	Соответствие.Вставить("3gp", 			"video/3gpp");
	Соответствие.Вставить("3gp2", 			"video/3gpp2");
	Соответствие.Вставить("3gpp", 			"video/3gpp");
	Соответствие.Вставить("7z", 			"application/x-7z-compressed");
	Соответствие.Вставить("aa", 			"audio/audible");
	Соответствие.Вставить("AAC", 			"audio/aac");
	Соответствие.Вставить("aaf", 			"application/octet-stream");
	Соответствие.Вставить("aax", 			"audio/vnd.audible.aax");
	Соответствие.Вставить("ac3", 			"audio/ac3");
	Соответствие.Вставить("aca", 			"application/octet-stream");
	Соответствие.Вставить("accda", 			"application/msaccess.addin");
	Соответствие.Вставить("accdb", 			"application/msaccess");
	Соответствие.Вставить("accdc", 			"application/msaccess.cab");
	Соответствие.Вставить("accde", 			"application/msaccess");
	Соответствие.Вставить("accdr", 			"application/msaccess.runtime");
	Соответствие.Вставить("accdt", 			"application/msaccess");
	Соответствие.Вставить("accdw", 			"application/msaccess.webapplication");
	Соответствие.Вставить("accft", 			"application/msaccess.ftemplate");
	Соответствие.Вставить("acx", 			"application/internet-property-stream");
	Соответствие.Вставить("AddIn", 			"text/xml");
	Соответствие.Вставить("ade", 			"application/msaccess");
	Соответствие.Вставить("adobebridge", 	"application/x-bridge-url");
	Соответствие.Вставить("adp", 			"application/msaccess");
	Соответствие.Вставить("ADT", 			"audio/vnd.dlna.adts");
	Соответствие.Вставить("ADTS", 			"audio/aac");
	Соответствие.Вставить("afm", 			"application/octet-stream");
	Соответствие.Вставить("ai", 			"application/postscript");
	Соответствие.Вставить("aif", 			"audio/x-aiff");
	Соответствие.Вставить("aifc", 			"audio/aiff");
	Соответствие.Вставить("aiff", 			"audio/aiff");
	Соответствие.Вставить("air", 			"application/vnd.adobe.air-application-installer-package+zip");
	Соответствие.Вставить("amc", 			"application/x-mpeg");
	Соответствие.Вставить("application", 	"application/x-ms-application");
	Соответствие.Вставить("art", 			"image/x-jg");
	Соответствие.Вставить("asa", 			"application/xml");
	Соответствие.Вставить("asax", 			"application/xml");
	Соответствие.Вставить("ascx", 			"application/xml");
	Соответствие.Вставить("asd", 			"application/octet-stream");
	Соответствие.Вставить("asf", 			"video/x-ms-asf");
	Соответствие.Вставить("ashx", 			"application/xml");
	Соответствие.Вставить("asi", 			"application/octet-stream");
	Соответствие.Вставить("asm", 			"text/plain");
	Соответствие.Вставить("asmx", 			"application/xml");
	Соответствие.Вставить("aspx", 			"application/xml");
	Соответствие.Вставить("asr", 			"video/x-ms-asf");
	Соответствие.Вставить("asx", 			"video/x-ms-asf");
	Соответствие.Вставить("atom",			"application/atom+xml");
	Соответствие.Вставить("au", 			"audio/basic");
	Соответствие.Вставить("avi", 			"video/x-msvideo");
	Соответствие.Вставить("axs", 			"application/olescript");
	Соответствие.Вставить("bas", 			"text/plain");
	Соответствие.Вставить("bcpio", 			"application/x-bcpio");
	Соответствие.Вставить("bin", 			"application/octet-stream");
	Соответствие.Вставить("bmp", 			"image/bmp");
	Соответствие.Вставить("c", 				"text/plain");
	Соответствие.Вставить("cab", 			"application/octet-stream");
	Соответствие.Вставить("caf", 			"audio/x-caf");
	Соответствие.Вставить("calx", 			"application/vnd.ms-office.calx");
	Соответствие.Вставить("cat", 			"application/vnd.ms-pki.seccat");
	Соответствие.Вставить("cc", 			"text/plain");
	Соответствие.Вставить("cd", 			"text/plain");
	Соответствие.Вставить("cdda", 			"audio/aiff");
	Соответствие.Вставить("cdf", 			"application/x-cdf");
	Соответствие.Вставить("cer", 			"application/x-x509-ca-cert");
	Соответствие.Вставить("chm", 			"application/octet-stream");
	Соответствие.Вставить("class", 			"application/x-java-applet");
	Соответствие.Вставить("clp", 			"application/x-msclip");
	Соответствие.Вставить("cmx", 			"image/x-cmx");
	Соответствие.Вставить("cnf", 			"text/plain");
	Соответствие.Вставить("cod", 			"image/cis-cod");
	Соответствие.Вставить("config", 		"application/xml");
	Соответствие.Вставить("contact", 		"text/x-ms-contact");
	Соответствие.Вставить("coverage", 		"application/xml");
	Соответствие.Вставить("cpio", 			"application/x-cpio");
	Соответствие.Вставить("cpp", 			"text/plain");
	Соответствие.Вставить("crd", 			"application/x-mscardfile");
	Соответствие.Вставить("crl", 			"application/pkix-crl");
	Соответствие.Вставить("crt", 			"application/x-x509-ca-cert");
	Соответствие.Вставить("cs", 			"text/plain");
	Соответствие.Вставить("csdproj", 		"text/plain");
	Соответствие.Вставить("csh", 			"application/x-csh");
	Соответствие.Вставить("csproj", 		"text/plain");
	Соответствие.Вставить("css", 			"text/css");
	Соответствие.Вставить("csv", 			"text/csv");
	Соответствие.Вставить("cur", 			"application/octet-stream");
	Соответствие.Вставить("cxx", 			"text/plain");
	Соответствие.Вставить("dat", 			"application/octet-stream");
	Соответствие.Вставить("datasource", 	"application/xml");
	Соответствие.Вставить("dbproj", 		"text/plain");
	Соответствие.Вставить("dcr", 			"application/x-director");
	Соответствие.Вставить("def", 			"text/plain");
	Соответствие.Вставить("deploy", 		"application/octet-stream");
	Соответствие.Вставить("der", 			"application/x-x509-ca-cert");
	Соответствие.Вставить("dgml", 			"application/xml");
	Соответствие.Вставить("dib", 			"image/bmp");
	Соответствие.Вставить("dif", 			"video/x-dv");
	Соответствие.Вставить("dir", 			"application/x-director");
	Соответствие.Вставить("disco", 			"text/xml");
	Соответствие.Вставить("dll", 			"application/x-msdownload");
	Соответствие.Вставить("dll.config", 	"text/xml");
	Соответствие.Вставить("dlm", 			"text/dlm");
	Соответствие.Вставить("doc", 			"application/msword");
	Соответствие.Вставить("docm", 			"application/vnd.ms-word.document.macroEnabled.12");
	Соответствие.Вставить("docx", 			"application/vnd.openxmlformats-officedocument.wordprocessingml.document");
	Соответствие.Вставить("dot", 			"application/msword");
	Соответствие.Вставить("dotm", 			"application/vnd.ms-word.template.macroEnabled.12");
	Соответствие.Вставить("dotx", 			"application/vnd.openxmlformats-officedocument.wordprocessingml.template");
	Соответствие.Вставить("dsp", 			"application/octet-stream");
	Соответствие.Вставить("dsw", 			"text/plain");
	Соответствие.Вставить("dtd", 			"text/xml");
	Соответствие.Вставить("dtsConfig", 		"text/xml");
	Соответствие.Вставить("dv", 			"video/x-dv");
	Соответствие.Вставить("dvi", 			"application/x-dvi");
	Соответствие.Вставить("dwf", 			"drawing/x-dwf");
	Соответствие.Вставить("dwp", 			"application/octet-stream");
	Соответствие.Вставить("dxr", 			"application/x-director");
	Соответствие.Вставить("eml", 			"message/rfc822");
	Соответствие.Вставить("emz", 			"application/octet-stream");
	Соответствие.Вставить("eot", 			"application/octet-stream");
	Соответствие.Вставить("eps", 			"application/postscript");
	Соответствие.Вставить("etl", 			"application/etl");
	Соответствие.Вставить("etx", 			"text/x-setext");
	Соответствие.Вставить("evy", 			"application/envoy");
	Соответствие.Вставить("exe", 			"application/octet-stream");
	Соответствие.Вставить("exe.config", 	"text/xml");
	Соответствие.Вставить("fdf", 			"application/vnd.fdf");
	Соответствие.Вставить("fif", 			"application/fractals");
	Соответствие.Вставить("filters", 		"Application/xml");
	Соответствие.Вставить("fla", 			"application/octet-stream");
	Соответствие.Вставить("flr", 			"x-world/x-vrml");
	Соответствие.Вставить("flv", 			"video/x-flv");
	Соответствие.Вставить("fsscript", 		"application/fsharp-script");
	Соответствие.Вставить("fsx", 			"application/fsharp-script");
	Соответствие.Вставить("generictest", 	"application/xml");
	Соответствие.Вставить("gif", 			"image/gif");
	Соответствие.Вставить("group", 			"text/x-ms-group");
	Соответствие.Вставить("gsm", 			"audio/x-gsm");
	Соответствие.Вставить("gtar", 			"application/x-gtar");
	Соответствие.Вставить("gz", 			"application/x-gzip");
	Соответствие.Вставить("h", 				"text/plain");
	Соответствие.Вставить("hdf", 			"application/x-hdf");
	Соответствие.Вставить("hdml", 			"text/x-hdml");
	Соответствие.Вставить("hhc", 			"application/x-oleobject");
	Соответствие.Вставить("hhk", 			"application/octet-stream");
	Соответствие.Вставить("hhp", 			"application/octet-stream");
	Соответствие.Вставить("hlp", 			"application/winhlp");
	Соответствие.Вставить("hpp", 			"text/plain");
	Соответствие.Вставить("hqx",			"application/mac-binhex40");
	Соответствие.Вставить("hta", 			"application/hta");
	Соответствие.Вставить("htc", 			"text/x-component");
	Соответствие.Вставить("htm", 			"text/html");
	Соответствие.Вставить("html", 			"text/html");
	Соответствие.Вставить("htt", 			"text/webviewhtml");
	Соответствие.Вставить("hxa", 			"application/xml");
	Соответствие.Вставить("hxc", 			"application/xml");
	Соответствие.Вставить("hxd", 			"application/octet-stream");
	Соответствие.Вставить("hxe", 			"application/xml");
	Соответствие.Вставить("hxf", 			"application/xml");
	Соответствие.Вставить("hxh", 			"application/octet-stream");
	Соответствие.Вставить("hxi", 			"application/octet-stream");
	Соответствие.Вставить("hxk", 			"application/xml");
	Соответствие.Вставить("hxq", 			"application/octet-stream");
	Соответствие.Вставить("hxr", 			"application/octet-stream");
	Соответствие.Вставить("hxs", 			"application/octet-stream");
	Соответствие.Вставить("hxt", 			"text/html");
	Соответствие.Вставить("hxv", 			"application/xml");
	Соответствие.Вставить("hxw", 			"application/octet-stream");
	Соответствие.Вставить("hxx", 			"text/plain");
	Соответствие.Вставить("i", 				"text/plain");
	Соответствие.Вставить("ico", 			"image/x-icon");
	Соответствие.Вставить("ics", 			"application/octet-stream");
	Соответствие.Вставить("idl", 			"text/plain");
	Соответствие.Вставить("ief", 			"image/ief");
	Соответствие.Вставить("iii", 			"application/x-iphone");
	Соответствие.Вставить("inc", 			"text/plain");
	Соответствие.Вставить("inf", 			"application/octet-stream");
	Соответствие.Вставить("inl", 			"text/plain");
	Соответствие.Вставить("ins", 			"application/x-internet-signup");
	Соответствие.Вставить("ipa", 			"application/x-itunes-ipa");
	Соответствие.Вставить("ipg", 			"application/x-itunes-ipg");
	Соответствие.Вставить("ipproj", 		"text/plain");
	Соответствие.Вставить("ipsw", 			"application/x-itunes-ipsw");
	Соответствие.Вставить("iqy", 			"text/x-ms-iqy");
	Соответствие.Вставить("isp", 			"application/x-internet-signup");
	Соответствие.Вставить("ite", 			"application/x-itunes-ite");
	Соответствие.Вставить("itlp",			"application/x-itunes-itlp");
	Соответствие.Вставить("itms", 			"application/x-itunes-itms");
	Соответствие.Вставить("itpc", 			"application/x-itunes-itpc");
	Соответствие.Вставить("IVF", 			"video/x-ivf");
	Соответствие.Вставить("jar", 			"application/java-archive");
	Соответствие.Вставить("java", 			"application/octet-stream");
	Соответствие.Вставить("jck", 			"application/liquidmotion");
	Соответствие.Вставить("jcz", 			"application/liquidmotion");
	Соответствие.Вставить("jfif", 			"image/pjpeg");
	Соответствие.Вставить("jnlp", 			"application/x-java-jnlp-file");
	Соответствие.Вставить("jpb", 			"application/octet-stream");
	Соответствие.Вставить("jpe", 			"image/jpeg");
	Соответствие.Вставить("jpeg", 			"image/jpeg");
	Соответствие.Вставить("jpg", 			"image/jpeg");
	Соответствие.Вставить("js", 			"application/x-javascript");
	Соответствие.Вставить("jsx", 			"text/jscript");
	Соответствие.Вставить("jsxbin", 		"text/plain");
	Соответствие.Вставить("latex", 			"application/x-latex");
	Соответствие.Вставить("library-ms", 	"application/windows-library+xml");
	Соответствие.Вставить("lit", 			"application/x-ms-reader");
	Соответствие.Вставить("loadtest", 		"application/xml");
	Соответствие.Вставить("lpk", 			"application/octet-stream");
	Соответствие.Вставить("lsf", 			"video/x-la-asf");
	Соответствие.Вставить("lst", 			"text/plain");
	Соответствие.Вставить("lsx", 			"video/x-la-asf");
	Соответствие.Вставить("lzh", 			"application/octet-stream");
	Соответствие.Вставить("m13", 			"application/x-msmediaview");
	Соответствие.Вставить("m14", 			"application/x-msmediaview");
	Соответствие.Вставить("m1v", 			"video/mpeg");
	Соответствие.Вставить("m2t", 			"video/vnd.dlna.mpeg-tts");
	Соответствие.Вставить("m2ts", 			"video/vnd.dlna.mpeg-tts");
	Соответствие.Вставить("m2v", 			"video/mpeg");
	Соответствие.Вставить("m3u", 			"audio/x-mpegurl");
	Соответствие.Вставить("m3u8", 			"audio/x-mpegurl");
	Соответствие.Вставить("m4a", 			"audio/m4a");
	Соответствие.Вставить("m4b", 			"audio/m4b");
	Соответствие.Вставить("m4p", 			"audio/m4p");
	Соответствие.Вставить("m4r", 			"audio/x-m4r");
	Соответствие.Вставить("m4v", 			"video/x-m4v");
	Соответствие.Вставить("mac", 			"image/x-macpaint");
	Соответствие.Вставить("mak", 			"text/plain");
	Соответствие.Вставить("man", 			"application/x-troff-man");
	Соответствие.Вставить("manifest", 		"application/x-ms-manifest");
	Соответствие.Вставить("map", 			"text/plain");
	Соответствие.Вставить("master", 		"application/xml");
	Соответствие.Вставить("mda", 			"application/msaccess");
	Соответствие.Вставить("mdb", 			"application/x-msaccess");
	Соответствие.Вставить("mde", 			"application/msaccess");
	Соответствие.Вставить("mdp", 			"application/octet-stream");
	Соответствие.Вставить("me", 			"application/x-troff-me");
	Соответствие.Вставить("mfp", 			"application/x-shockwave-flash");
	Соответствие.Вставить("mht", 			"message/rfc822");
	Соответствие.Вставить("mhtml", 			"message/rfc822");
	Соответствие.Вставить("mid", 			"audio/mid");
	Соответствие.Вставить("midi", 			"audio/mid");
	Соответствие.Вставить("mix", 			"application/octet-stream");
	Соответствие.Вставить("mk", 			"text/plain");
	Соответствие.Вставить("mmf", 			"application/x-smaf");
	Соответствие.Вставить("mno", 			"text/xml");
	Соответствие.Вставить("mny", 			"application/x-msmoney");
	Соответствие.Вставить("mod", 			"video/mpeg");
	Соответствие.Вставить("mov", 			"video/quicktime");
	Соответствие.Вставить("movie", 			"video/x-sgi-movie");
	Соответствие.Вставить("mp2", 			"video/mpeg");
	Соответствие.Вставить("mp2v", 			"video/mpeg");
	Соответствие.Вставить("mp3", 			"audio/mpeg");
	Соответствие.Вставить("mp4", 			"video/mp4");
	Соответствие.Вставить("mp4v", 			"video/mp4");
	Соответствие.Вставить("mpa", 			"video/mpeg");
	Соответствие.Вставить("mpe", 			"video/mpeg");
	Соответствие.Вставить("mpeg", 			"video/mpeg");
	Соответствие.Вставить("mpf", 			"application/vnd.ms-mediapackage");
	Соответствие.Вставить("mpg", 			"video/mpeg");
	Соответствие.Вставить("mpp", 			"application/vnd.ms-project");
	Соответствие.Вставить("mpv2", 			"video/mpeg");
	Соответствие.Вставить("mqv", 			"video/quicktime");
	Соответствие.Вставить("ms", 			"application/x-troff-ms");
	Соответствие.Вставить("msi", 			"application/octet-stream");
	Соответствие.Вставить("mso", 			"application/octet-stream");
	Соответствие.Вставить("mts", 			"video/vnd.dlna.mpeg-tts");
	Соответствие.Вставить("mtx", 			"application/xml");
	Соответствие.Вставить("mvb", 			"application/x-msmediaview");
	Соответствие.Вставить("mvc", 			"application/x-miva-compiled");
	Соответствие.Вставить("mxp", 			"application/x-mmxp");
	Соответствие.Вставить("nc", 			"application/x-netcdf");
	Соответствие.Вставить("nsc", 			"video/x-ms-asf");
	Соответствие.Вставить("nws", 			"message/rfc822");
	Соответствие.Вставить("ocx", 			"application/octet-stream");
	Соответствие.Вставить("oda", 			"application/oda");
	Соответствие.Вставить("odc", 			"text/x-ms-odc");
	Соответствие.Вставить("odh", 			"text/plain");
	Соответствие.Вставить("odl", 			"text/plain");
	Соответствие.Вставить("odp", 			"application/vnd.oasis.opendocument.presentation");
	Соответствие.Вставить("ods", 			"application/oleobject");
	Соответствие.Вставить("odt", 			"application/vnd.oasis.opendocument.text");
	Соответствие.Вставить("one", 			"application/onenote");
	Соответствие.Вставить("onea", 			"application/onenote");
	Соответствие.Вставить("onepkg", 		"application/onenote");
	Соответствие.Вставить("onetmp", 		"application/onenote");
	Соответствие.Вставить("onetoc", 		"application/onenote");
	Соответствие.Вставить("onetoc2", 		"application/onenote");
	Соответствие.Вставить("orderedtest", 	"application/xml");
	Соответствие.Вставить("osdx", 			"application/opensearchdescription+xml");
	Соответствие.Вставить("p10", 			"application/pkcs10");
	Соответствие.Вставить("p12", 			"application/x-pkcs12");
	Соответствие.Вставить("p7b", 			"application/x-pkcs7-certificates");
	Соответствие.Вставить("p7c", 			"application/pkcs7-mime");
	Соответствие.Вставить("p7m", 			"application/pkcs7-mime");
	Соответствие.Вставить("p7r", 			"application/x-pkcs7-certreqresp");
	Соответствие.Вставить("p7s", 			"application/pkcs7-signature");
	Соответствие.Вставить("pbm", 			"image/x-portable-bitmap");
	Соответствие.Вставить("pcast", 			"application/x-podcast");
	Соответствие.Вставить("pct", 			"image/pict");
	Соответствие.Вставить("pcx", 			"application/octet-stream");
	Соответствие.Вставить("pcz", 			"application/octet-stream");
	Соответствие.Вставить("pdf", 			"application/pdf");
	Соответствие.Вставить("pfb", 			"application/octet-stream");
	Соответствие.Вставить("pfm", 			"application/octet-stream");
	Соответствие.Вставить("pfx",			"application/x-pkcs12");
	Соответствие.Вставить("pgm", 			"image/x-portable-graymap");
	Соответствие.Вставить("pic", 			"image/pict");
	Соответствие.Вставить("pict", 			"image/pict");
	Соответствие.Вставить("pkgdef", 		"text/plain");
	Соответствие.Вставить("pkgundef", 		"text/plain");
	Соответствие.Вставить("pko", 			"application/vnd.ms-pki.pko");
	Соответствие.Вставить("pls", 			"audio/scpls");
	Соответствие.Вставить("pma", 			"application/x-perfmon");
	Соответствие.Вставить("pmc", 			"application/x-perfmon");
	Соответствие.Вставить("pml", 			"application/x-perfmon");
	Соответствие.Вставить("pmr", 			"application/x-perfmon");
	Соответствие.Вставить("pmw", 			"application/x-perfmon");
	Соответствие.Вставить("png", 			"image/png");
	Соответствие.Вставить("pnm", 			"image/x-portable-anymap");
	Соответствие.Вставить("pnt", 			"image/x-macpaint");
	Соответствие.Вставить("pntg", 			"image/x-macpaint");
	Соответствие.Вставить("pnz", 			"image/png");
	Соответствие.Вставить("pot", 			"application/vnd.ms-powerpoint");
	Соответствие.Вставить("potm", 			"application/vnd.ms-powerpoint.template.macroEnabled.12");
	Соответствие.Вставить("potx", 			"application/vnd.openxmlformats-officedocument.presentationml.template");
	Соответствие.Вставить("ppa", 			"application/vnd.ms-powerpoint");
	Соответствие.Вставить("ppam", 			"application/vnd.ms-powerpoint.addin.macroEnabled.12");
	Соответствие.Вставить("ppm", 			"image/x-portable-pixmap");
	Соответствие.Вставить("pps", 			"application/vnd.ms-powerpoint");
	Соответствие.Вставить("ppsm", 			"application/vnd.ms-powerpoint.slideshow.macroEnabled.12");
	Соответствие.Вставить("ppsx", 			"application/vnd.openxmlformats-officedocument.presentationml.slideshow");
	Соответствие.Вставить("ppt", 			"application/vnd.ms-powerpoint");
	Соответствие.Вставить("pptm", 			"application/vnd.ms-powerpoint.presentation.macroEnabled.12");
	Соответствие.Вставить("pptx", 			"application/vnd.openxmlformats-officedocument.presentationml.presentation");
	Соответствие.Вставить("prf", 			"application/pics-rules");
	Соответствие.Вставить("prm", 			"application/octet-stream");
	Соответствие.Вставить("prx", 			"application/octet-stream");
	Соответствие.Вставить("ps", 			"application/postscript");
	Соответствие.Вставить("psc1", 			"application/PowerShell");
	Соответствие.Вставить("psd", 			"application/octet-stream");
	Соответствие.Вставить("psess", 			"application/xml");
	Соответствие.Вставить("psm", 			"application/octet-stream");
	Соответствие.Вставить("psp", 			"application/octet-stream");
	Соответствие.Вставить("pub", 			"application/x-mspublisher");
	Соответствие.Вставить("pwz", 			"application/vnd.ms-powerpoint");
	Соответствие.Вставить("qht", 			"text/x-html-insertion");
	Соответствие.Вставить("qhtm", 			"text/x-html-insertion");
	Соответствие.Вставить("qt", 			"video/quicktime");
	Соответствие.Вставить("qti", 			"image/x-quicktime");
	Соответствие.Вставить("qtif", 			"image/x-quicktime");
	Соответствие.Вставить("qtl", 			"application/x-quicktimeplayer");
	Соответствие.Вставить("qxd", 			"application/octet-stream");
	Соответствие.Вставить("ra", 			"audio/x-pn-realaudio");
	Соответствие.Вставить("ram", 			"audio/x-pn-realaudio");
	Соответствие.Вставить("rar", 			"application/octet-stream");
	Соответствие.Вставить("ras", 			"image/x-cmu-raster");
	Соответствие.Вставить("rat", 			"application/rat-file");
	Соответствие.Вставить("rc", 			"text/plain");
	Соответствие.Вставить("rc2", 			"text/plain");
	Соответствие.Вставить("rct", 			"text/plain");
	Соответствие.Вставить("rdlc", 			"application/xml");
	Соответствие.Вставить("resx", 			"application/xml");
	Соответствие.Вставить("rf", 			"image/vnd.rn-realflash");
	Соответствие.Вставить("rgb", 			"image/x-rgb");
	Соответствие.Вставить("rgs", 			"text/plain");
	Соответствие.Вставить("rm", 			"application/vnd.rn-realmedia");
	Соответствие.Вставить("rmi", 			"audio/mid");
	Соответствие.Вставить("rmp", 			"application/vnd.rn-rn_music_package");
	Соответствие.Вставить("roff", 			"application/x-troff");
	Соответствие.Вставить("rpm", 			"audio/x-pn-realaudio-plugin");
	Соответствие.Вставить("rqy", 			"text/x-ms-rqy");
	Соответствие.Вставить("rtf", 			"application/rtf");
	Соответствие.Вставить("rtx", 			"text/richtext");
	Соответствие.Вставить("ruleset",		"application/xml");
	Соответствие.Вставить("s", 				"text/plain");
	Соответствие.Вставить("safariextz", 	"application/x-safari-safariextz");
	Соответствие.Вставить("scd", 			"application/x-msschedule");
	Соответствие.Вставить("sct", 			"text/scriptlet");
	Соответствие.Вставить("sd2", 			"audio/x-sd2");
	Соответствие.Вставить("sdp", 			"application/sdp");
	Соответствие.Вставить("sea", 			"application/octet-stream");
	Соответствие.Вставить("searchConnector-ms", "application/windows-search-connector+xml");
	Соответствие.Вставить("setpay", 		"application/set-payment-initiation");
	Соответствие.Вставить("setreg", 		"application/set-registration-initiation");
	Соответствие.Вставить("settings", 		"application/xml");
	Соответствие.Вставить("sgimb", 			"application/x-sgimb");
	Соответствие.Вставить("sgml", 			"text/sgml");
	Соответствие.Вставить("sh", 			"application/x-sh");
	Соответствие.Вставить("shar", 			"application/x-shar");
	Соответствие.Вставить("shtml", 			"text/html");
	Соответствие.Вставить("sit", 			"application/x-stuffit");
	Соответствие.Вставить("sitemap", 		"application/xml");
	Соответствие.Вставить("skin", 			"application/xml");
	Соответствие.Вставить("sldm", 			"application/vnd.ms-powerpoint.slide.macroEnabled.12");
	Соответствие.Вставить("sldx", 			"application/vnd.openxmlformats-officedocument.presentationml.slide");
	Соответствие.Вставить("slk", 			"application/vnd.ms-excel");
	Соответствие.Вставить("sln", 			"text/plain");
	Соответствие.Вставить("slupkg-ms", 		"application/x-ms-license");
	Соответствие.Вставить("smd", 			"audio/x-smd");
	Соответствие.Вставить("smi", 			"application/octet-stream");
	Соответствие.Вставить("smx", 			"audio/x-smd");
	Соответствие.Вставить("smz", 			"audio/x-smd");
	Соответствие.Вставить("snd", 			"audio/basic");
	Соответствие.Вставить("snippet", 		"application/xml");
	Соответствие.Вставить("snp", 			"application/octet-stream");
	Соответствие.Вставить("sol", 			"text/plain");
	Соответствие.Вставить("sor", 			"text/plain");
	Соответствие.Вставить("spc", 			"application/x-pkcs7-certificates");
	Соответствие.Вставить("spl", 			"application/futuresplash");
	Соответствие.Вставить("src", 			"application/x-wais-source");
	Соответствие.Вставить("srf", 			"text/plain");
	Соответствие.Вставить("SSISDeploymentManifest", "text/xml");
	Соответствие.Вставить("ssm", 			"application/streamingmedia");
	Соответствие.Вставить("sst", 			"application/vnd.ms-pki.certstore");
	Соответствие.Вставить("stl", 			"application/vnd.ms-pki.stl");
	Соответствие.Вставить("sv4cpio", 		"application/x-sv4cpio");
	Соответствие.Вставить("sv4crc", 		"application/x-sv4crc");
	Соответствие.Вставить("svc", 			"application/xml");
	Соответствие.Вставить("swf", 			"application/x-shockwave-flash");
	Соответствие.Вставить("t", 				"application/x-troff");
	Соответствие.Вставить("tar", 			"application/x-tar");
	Соответствие.Вставить("tcl", 			"application/x-tcl");
	Соответствие.Вставить("testrunconfig", 	"application/xml");
	Соответствие.Вставить("testsettings", 	"application/xml");
	Соответствие.Вставить("tex", 			"application/x-tex");
	Соответствие.Вставить("texi", 			"application/x-texinfo");
	Соответствие.Вставить("texinfo", 		"application/x-texinfo");
	Соответствие.Вставить("tgz", 			"application/x-compressed");
	Соответствие.Вставить("thmx", 			"application/vnd.ms-officetheme");
	Соответствие.Вставить("thn", 			"application/octet-stream");
	Соответствие.Вставить("tif", 			"image/tiff");
	Соответствие.Вставить("tiff", 			"image/tiff");
	Соответствие.Вставить("tlh", 			"text/plain");
	Соответствие.Вставить("tli", 			"text/plain");
	Соответствие.Вставить("toc", 			"application/octet-stream");
	Соответствие.Вставить("tr", 			"application/x-troff");
	Соответствие.Вставить("trm", 			"application/x-msterminal");
	Соответствие.Вставить("trx", 			"application/xml");
	Соответствие.Вставить("ts", 			"video/vnd.dlna.mpeg-tts");
	Соответствие.Вставить("tsv", 			"text/tab-separated-values");
	Соответствие.Вставить("ttf", 			"application/octet-stream");
	Соответствие.Вставить("tts", 			"video/vnd.dlna.mpeg-tts");
	Соответствие.Вставить("txt", 			"text/plain");
	Соответствие.Вставить("u32", 			"application/octet-stream");
	Соответствие.Вставить("uls", 			"text/iuls");
	Соответствие.Вставить("user", 			"text/plain");
	Соответствие.Вставить("ustar", 			"application/x-ustar");
	Соответствие.Вставить("vb", 			"text/plain");
	Соответствие.Вставить("vbdproj", 		"text/plain");
	Соответствие.Вставить("vbk", 			"video/mpeg");
	Соответствие.Вставить("vbproj", 		"text/plain");
	Соответствие.Вставить("vbs", 			"text/vbscript");
	Соответствие.Вставить("vcf", 			"text/x-vcard");
	Соответствие.Вставить("vcproj", 		"Application/xml");
	Соответствие.Вставить("vcs", 			"text/plain");
	Соответствие.Вставить("vcxproj", 		"Application/xml");
	Соответствие.Вставить("vddproj", 		"text/plain");
	Соответствие.Вставить("vdp",			"text/plain");
	Соответствие.Вставить("vdproj", 		"text/plain");
	Соответствие.Вставить("vdx", 			"application/vnd.ms-visio.viewer");
	Соответствие.Вставить("vml", 			"text/xml");
	Соответствие.Вставить("vscontent", 		"application/xml");
	Соответствие.Вставить("vsct", 			"text/xml");
	Соответствие.Вставить("vsd", 			"application/vnd.visio");
	Соответствие.Вставить("vsi", 			"application/ms-vsi");
	Соответствие.Вставить("vsix", 			"application/vsix");
	Соответствие.Вставить("vsixlangpack", 	"text/xml");
	Соответствие.Вставить("vsixmanifest", 	"text/xml");
	Соответствие.Вставить("vsmdi", 			"application/xml");
	Соответствие.Вставить("vspscc", 		"text/plain");
	Соответствие.Вставить("vss", 			"application/vnd.visio");
	Соответствие.Вставить("vsscc", 			"text/plain");
	Соответствие.Вставить("vssettings", 	"text/xml");
	Соответствие.Вставить("vssscc", 		"text/plain");
	Соответствие.Вставить("vst", 			"application/vnd.visio");
	Соответствие.Вставить("vstemplate",		"text/xml");
	Соответствие.Вставить("vsto", 			"application/x-ms-vsto");
	Соответствие.Вставить("vsw", 			"application/vnd.visio");
	Соответствие.Вставить("vsx", 			"application/vnd.visio");
	Соответствие.Вставить("vtx", 			"application/vnd.visio");
	Соответствие.Вставить("wav", 			"audio/wav");
	Соответствие.Вставить("wave", 			"audio/wav");
	Соответствие.Вставить("wax", 			"audio/x-ms-wax");
	Соответствие.Вставить("wbk", 			"application/msword");
	Соответствие.Вставить("wbmp", 			"image/vnd.wap.wbmp");
	Соответствие.Вставить("wcm", 			"application/vnd.ms-works");
	Соответствие.Вставить("wdb", 			"application/vnd.ms-works");
	Соответствие.Вставить("wdp", 			"image/vnd.ms-photo");
	Соответствие.Вставить("webarchive", 	"application/x-safari-webarchive");
	Соответствие.Вставить("webtest", 		"application/xml");
	Соответствие.Вставить("wiq", 			"application/xml");
	Соответствие.Вставить("wiz", 			"application/msword");
	Соответствие.Вставить("wks", 			"application/vnd.ms-works");
	Соответствие.Вставить("WLMP", 			"application/wlmoviemaker");
	Соответствие.Вставить("wlpginstall", 	"application/x-wlpg-detect");
	Соответствие.Вставить("wlpginstall3", 	"application/x-wlpg3-detect");
	Соответствие.Вставить("wm", 			"video/x-ms-wm");
	Соответствие.Вставить("wma", 			"audio/x-ms-wma");
	Соответствие.Вставить("wmd", 			"application/x-ms-wmd");
	Соответствие.Вставить("wmf", 			"application/x-msmetafile");
	Соответствие.Вставить("wml", 			"text/vnd.wap.wml");
	Соответствие.Вставить("wmlc", 			"application/vnd.wap.wmlc");
	Соответствие.Вставить("wmls", 			"text/vnd.wap.wmlscript");
	Соответствие.Вставить("wmlsc", 			"application/vnd.wap.wmlscriptc");
	Соответствие.Вставить("wmp", 			"video/x-ms-wmp");
	Соответствие.Вставить("wmv", 			"video/x-ms-wmv");
	Соответствие.Вставить("wmx", 			"video/x-ms-wmx");
	Соответствие.Вставить("wmz", 			"application/x-ms-wmz");
	Соответствие.Вставить("wpl", 			"application/vnd.ms-wpl");
	Соответствие.Вставить("wps", 			"application/vnd.ms-works");
	Соответствие.Вставить("wri", 			"application/x-mswrite");
	Соответствие.Вставить("wrl", 			"x-world/x-vrml");
	Соответствие.Вставить("wrz", 			"x-world/x-vrml");
	Соответствие.Вставить("wsc",			"text/scriptlet");
	Соответствие.Вставить("wsdl", 			"text/xml");
	Соответствие.Вставить("wvx", 			"video/x-ms-wvx");
	Соответствие.Вставить("x", 				"application/directx");
	Соответствие.Вставить("xaf", 			"x-world/x-vrml");
	Соответствие.Вставить("xaml", 			"application/xaml+xml");
	Соответствие.Вставить("xap", 			"application/x-silverlight-app");
	Соответствие.Вставить("xbap", 			"application/x-ms-xbap");
	Соответствие.Вставить("xbm", 			"image/x-xbitmap");
	Соответствие.Вставить("xdr", 			"text/plain");
	Соответствие.Вставить("xht", 			"application/xhtml+xml");
	Соответствие.Вставить("xhtml", 			"application/xhtml+xml");
	Соответствие.Вставить("xla", 			"application/vnd.ms-excel");
	Соответствие.Вставить("xlam", 			"application/vnd.ms-excel.addin.macroEnabled.12");
	Соответствие.Вставить("xlc", 			"application/vnd.ms-excel");
	Соответствие.Вставить("xld", 			"application/vnd.ms-excel");
	Соответствие.Вставить("xlk", 			"application/vnd.ms-excel");
	Соответствие.Вставить("xll", 			"application/vnd.ms-excel");
	Соответствие.Вставить("xlm",			"application/vnd.ms-excel");
	Соответствие.Вставить("xls", 			"application/vnd.ms-excel");
	Соответствие.Вставить("xlsb", 			"application/vnd.ms-excel.sheet.binary.macroEnabled.12");
	Соответствие.Вставить("xlsm", 			"application/vnd.ms-excel.sheet.macroEnabled.12");
	Соответствие.Вставить("xlsx", 			"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet");
	Соответствие.Вставить("xlt", 			"application/vnd.ms-excel");
	Соответствие.Вставить("xltm", 			"application/vnd.ms-excel.template.macroEnabled.12");
	Соответствие.Вставить("xltx", 			"application/vnd.openxmlformats-officedocument.spreadsheetml.template");
	Соответствие.Вставить("xlw", 			"application/vnd.ms-excel");
	Соответствие.Вставить("xml", 			"text/xml");
	Соответствие.Вставить("xmta", 			"application/xml");
	Соответствие.Вставить("xof", 			"x-world/x-vrml");
	Соответствие.Вставить("XOML", 			"text/plain");
	Соответствие.Вставить("xpm", 			"image/x-xpixmap");
	Соответствие.Вставить("xps", 			"application/vnd.ms-xpsdocument");
	Соответствие.Вставить("xrm-ms", 		"text/xml");
	Соответствие.Вставить("xsc", 			"application/xml");
	Соответствие.Вставить("xsd", 			"text/xml");
	Соответствие.Вставить("xsf", 			"text/xml");
	Соответствие.Вставить("xsl", 			"text/xml");
	Соответствие.Вставить("xslt", 			"text/xml");
	Соответствие.Вставить("xsn", 			"application/octet-stream");
	Соответствие.Вставить("xss", 			"application/xml");
	Соответствие.Вставить("xtp", 			"application/octet-stream");
	Соответствие.Вставить("xwd", 			"image/x-xwindowdump");
	Соответствие.Вставить("z", 				"application/x-compress");
	Соответствие.Вставить("zip", 			"application/x-zip-compressed");
	
	СоответствияВВрег = Новый Соответствие;
	
	Для Каждого Стр Из Соответствие Цикл
		
		СоответствияВВрег.Вставить(Врег(Стр.Ключ), Стр.Значение);
		
	КонецЦикла;
	
	Возврат СоответствияВВрег.Получить(Расширение);
	
КонецФункции

#КонецОбласти