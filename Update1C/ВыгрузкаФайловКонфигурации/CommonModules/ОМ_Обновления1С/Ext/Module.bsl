
#Область СоединениеСПорталом1С

Функция ПолучитьНовоеКуки(Соответствие, Сократить = Истина) Экспорт
	
	Результат = ПравкаСоответствия(Соответствие,,Истина).Получить(Нрег("Set-Cookie"));
	
	Если Сократить Тогда
		Результат = Лев(Результат, Найти(Результат, ";") - 1);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПодключитьсяК1СПортал() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИмяПользователяИТС 	= Константы.Обновления1С_Логин.Получить();
	ПарольИТС 			= Константы.Обновления1С_Пароль.Получить();
	
	ПараметрыДляЗапуска = Новый Структура("Логин, Пароль", ИмяПользователяИТС, ПарольИТС);
	
	Если ПолучитьКуки() = "<Не установлено>" Тогда
		ОбновитьКуки(Неопределено);
	КонецЕсли;
	
	Если НЕ НайтиJSESSIONID(ПараметрыДляЗапуска) Тогда
		ОМ_Сервер.НоваяЗаписьЖурнала(1, "ОМ_Обновления1С.ПодключитьсяК1СПортал", "Не удалось подключиться к 1С-Портал"); 
		Возврат Ложь;		
	КонецЕсли;
	
	ОМ_Сервер.НоваяЗаписьЖурнала(2, "ОМ_Обновления1С.ПодключитьсяК1СПортал", "Подключение к 1С-Портал");
	
	Возврат Истина;
	
КонецФункции

Функция ПравкаСоответствия(Знач Соответствие, ПоменятьКлючЗначениеМестами = Ложь, ПривестиКлючКНижнемуРегистру = Ложь, ПривестиКлючКВерхнемуРегистру = Ложь) Экспорт
	
	Результат = Новый Соответствие;
	
	Для Каждого Стр Из Соответствие Цикл
		
		Если ПоменятьКлючЗначениеМестами Тогда
			
			НовыйКлюч = Стр.Значение;
			НовоеЗначение = Стр.Ключ;
			
		Иначе
			
			НовыйКлюч = Стр.Ключ;
			
			Если ПривестиКлючКНижнемуРегистру Тогда
				НовыйКлюч = Нрег(НовыйКлюч);
			ИначеЕсли ПривестиКлючКНижнемуРегистру Тогда
				НовыйКлюч = Врег(НовыйКлюч);
			КонецЕсли;
			
			НовоеЗначение = Стр.Значение;
	
		КонецЕсли;
		
		Результат.Вставить(НовыйКлюч, НовоеЗначение);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция НайтиJSESSIONID(ПараметрыЗапуска) Экспорт

	Попытка
		
		СерверАвторизации 	= Константы.Обновления1С_СерверАвторизацииИТС.Получить();
		СерверИТС			= Константы.Обновления1С_СерверИТС.Получить();
		
		Соединение_login 	= Новый HTTPСоединение(СерверАвторизации	,,,,Новый ИнтернетПрокси,,Новый ЗащищенноеСоединениеOpenSSL);
		Соединение_releases = Новый HTTPСоединение(СерверИТС			,,,,Новый ИнтернетПрокси,,Новый ЗащищенноеСоединениеOpenSSL);
		
		//для GET-запросов
		HTTPЗапрос1 = Новый HTTPЗапрос;
		HTTPЗапрос1.Заголовки.Вставить("Connection", "keep-alive");
		
		//для POST-запросов
		HTTPЗапрос2 = Новый HTTPЗапрос;
		HTTPЗапрос2.Заголовки.Вставить("Connection", "keep-alive");
		HTTPЗапрос2.Заголовки.Вставить("Content-Type", "application/x-www-form-urlencoded");
		
		HTTPЗапрос1.АдресРесурса = "/total";
		
		ОтветHTTP1 = Соединение_releases.Получить(HTTPЗапрос1);
		
		НовоеКуки = ПолучитьНовоеКуки(ОтветHTTP1.Заголовки);
		
		Если Найти(НовоеКуки, ";") > 0 Тогда
			НовоеКуки = Лев(НовоеКуки, Найти(НовоеКуки, ";") - 1);
		КонецЕсли;
		
		ОбновитьКуки(НовоеКуки);		
		
		/////////////
		
		НовыйЛокейшн = ПравкаСоответствия(ОтветHTTP1.Заголовки,,Истина).Получить(Нрег("Location"));
		
		Если ЗначениеЗаполнено(НовыйЛокейшн) Тогда
			
			LOCATION1 = СтрЗаменить(НовыйЛокейшн, "https://" + СерверАвторизации, "");
			
			HTTPЗапрос1.АдресРесурса = LOCATION1;
			
			ОтветHTTP2 = Соединение_login.Получить(HTTPЗапрос1);
			
		Иначе
			
			ОтветHTTP2 = ОтветHTTP1;
			
		КонецЕсли;
		
		JSESSIONID1 = ПолучитьНовоеКуки(ОтветHTTP2.Заголовки);
		
		Если СтрНайти(JSESSIONID1, ";") > 0 Тогда
			JSESSIONID1 = Лев(ПолучитьКуки(), Найти(JSESSIONID1, ";") - 1);	
		КонецЕсли;
		
		inviteCode = РаспарситьinviteCode(ОтветHTTP2.ПолучитьТелоКакСтроку(), ПараметрыЗапуска);
		
		HTTPЗапрос2.АдресРесурса = "/login";
		HTTPЗапрос2.Заголовки.Вставить("Cookie", JSESSIONID1 + "; i18next=ru-RU");
		HTTPЗапрос2.УстановитьТелоИзСтроки(inviteCode);
		
		ОтветHTTP3 = Соединение_login.ОтправитьДляОбработки(HTTPЗапрос2);
		
		Если ОтветHTTP3.КодСостояния <> 302 Тогда
			
			Возврат Ложь;
			
		КонецЕсли;
		
		Лок3 = ПравкаСоответствия(ОтветHTTP3.Заголовки,,Истина).Получить(Нрег("location"));
		Лок4 = "https://" + СерверИТС;
		
		LOCATION3 = СтрЗаменить(Лок3, Лок4, "");
		
		HTTPЗапрос1.АдресРесурса = LOCATION3;				
		HTTPЗапрос1.Заголовки.Вставить("Cookie", ПолучитьКуки());
		
		ОтветHTTP4 = Соединение_releases.Получить(HTTPЗапрос1);
		
	Исключение
		
		ОМ_Сервер.НоваяЗаписьЖурнала(0, "ОМ_Сервер.НайтиJSESSIONID", "Что-то пошло не так:(" + Символы.ПС + ОписаниеОшибки());
		Возврат Ложь;
		
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

// Записывает куки в справочник предопределенных.
Процедура ОбновитьКуки(ЗначениеКуки = Неопределено, НужныКукиФайлов = Ложь) Экспорт
	
	Если НужныКукиФайлов Тогда
		Константы.Обновления1С_КукиФайлов.Установить(ЗначениеКуки);	
	Иначе
		Константы.Обновления1С_Куки.Установить(ЗначениеКуки);
	КонецЕсли;
	
КонецПроцедуры

// Получает куки из справочника предопределенных
Функция ПолучитьКуки(НужныКукиФайлов = Ложь) Экспорт
	
	Если НужныКукиФайлов Тогда
		Возврат Константы.Обновления1С_КукиФайлов.Получить();
	Иначе
		Возврат Константы.Обновления1С_Куки.Получить();
	КонецЕсли;
	
КонецФункции

// Формирует код авторизации на сайте ИТС
Функция РаспарситьinviteCode(Текст, ПараметрыЗапуска) Экспорт
	
	ЧтениеHTML = Новый ЧтениеHTML;
	ЧтениеHTML.УстановитьСтроку(Текст);
	
	Построитель = Новый ПостроительDOM;
	ДокументHTML = Построитель.Прочитать(ЧтениеHTML);
	
	loginForm = ДокументHTML.ПолучитьЭлементПоИдентификатору("loginForm");
	
	inviteCode = "inviteCode=&username=" + ПараметрыЗапуска.Логин 
	+ "&password=" + ПараметрыЗапуска.Пароль
	+ "&execution=" + loginForm.Элементы[6].Значение
	+ "&_eventId=submit"
	+ "&geolocation="
	+ "&submit=Войти"
	+ "&rememberMe=on"
	;
	
	Возврат inviteCode;
	
КонецФункции

Функция АдресЗеркалаИТС(Номер = 3) Экспорт
	
	Возврат "dl0" + Строка(Номер) + ".1c.ru";
	
КонецФункции

#КонецОбласти

#Область Конфигурации

Процедура ПолучитьКонфигурацииВФоне(ВыводитьСостояние = Ложь) Экспорт
	
	Если Не ПодключитьсяК1СПортал() Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый HTTPЗапрос;
	Запрос.Заголовки.Вставить("Connection", "keep-alive");
	Запрос.Заголовки.Вставить("Cookie", 	ПолучитьКуки());
	Запрос.АдресРесурса = "/total";
	
	Соединение2 = Новый HTTPСоединение(Константы.Обновления1С_СерверИТС.Получить(),,,,Новый ИнтернетПрокси,,Новый ЗащищенноеСоединениеOpenSSL);
	
	ОтветHTTP = Соединение2.Получить(Запрос);
	
	ЧтениеHTML = Новый ЧтениеHTML;
	ЧтениеHTML.УстановитьСтроку(ОтветHTTP.ПолучитьТелоКакСтроку());
	
	Построитель = Новый ПостроительDOM;
	ДокументHTML = Построитель.Прочитать(ЧтениеHTML);
	
	СтрокиТаблицы = ДокументHTML.ПолучитьЭлементПоИдентификатору("actualTable").ПолучитьЭлементыПоИмени("tr");
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ГруппыКонфигураций.Номер КАК Номер,
	|	ГруппыКонфигураций.Ссылка КАК ГруппаСсылка
	|ИЗ
	|	Справочник.ГруппыКонфигураций КАК ГруппыКонфигураций
	|ГДЕ
	|	НЕ ГруппыКонфигураций.ПометкаУдаления
	|	И ВЫБОР
	|			КОГДА &ИспользоватьПараметрОтслеживания = ИСТИНА
	|				ТОГДА ГруппыКонфигураций.Отслеживать
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ";
	
	Запрос.УстановитьПараметр("ИспользоватьПараметрОтслеживания", Константы.Обновления1С_ТолькоОтслеживаемые.Получить());
	
	ТЗПоГруппам = Запрос.Выполнить().Выгрузить();
	
	Если ТЗПоГруппам.Количество() = 0 Тогда
		ОМ_Сервер.НоваяЗаписьЖурнала(2, "ОМ_Обновления1С.ПолучитьКонфигурацииВФоне", "Отмена загрузки конфигураций: нет отслеживаемых групп");	
		Возврат;
	КонецЕсли;
	
	ТаблицаЗначений = Новый ТаблицаЗначений;
	
	ТаблицаЗначений.Колонки.Добавить("Наименование", 	Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(255)));
	ТаблицаЗначений.Колонки.Добавить("ГиперСсылка", 	Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(500)));
	ТаблицаЗначений.Колонки.Добавить("НомерГруппы", 	Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(15)));
	ТаблицаЗначений.Колонки.Добавить("ГруппаСсылка",	Новый ОписаниеТипов("СправочникСсылка.ГруппыКонфигураций"));
	
	СтрокиТаблицы 	= ДокументHTML.ПолучитьЭлементПоИдентификатору("actualTable").ПолучитьЭлементыПоИмени("tr");
	
	Для Каждого СтрокаТЧ Из СтрокиТаблицы Цикл
		
		Раздел = СтрокаТЧ.Атрибуты.ПолучитьИменованныйЭлемент("parent-group");
		
		Если Раздел = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		НомерГруппы = Строка(Раздел.Значение);
		
		ЭтоРазделКонфигураций = ТЗПоГруппам.НайтиСтроки(Новый Структура("Номер",НомерГруппы)).Количество() > 0;
		
		Если ЭтоРазделКонфигураций Тогда
			
			ЯчейкиТаблицы = СтрокаТЧ.ПолучитьЭлементыПоИмени("a");
			
			Если ЯчейкиТаблицы.Количество() > 0 Тогда
				
				Нстр = ТаблицаЗначений.Добавить();
				
				Нстр.Наименование 	= ЯчейкиТаблицы[0].ТекстовоеСодержимое;
				Нстр.ГиперСсылка 	= ЯчейкиТаблицы[0].ГиперСсылка;
				//Нстр.Номер 			= НомерГруппы;
				Нстр.ГруппаСсылка	= ТЗПоГруппам.НайтиСтроки(Новый Структура("Номер",НомерГруппы))[0].ГруппаСсылка;
				
			КонецЕсли;	
			
		КонецЕсли;
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВТ.Наименование КАК Наименование,
	|	ВТ.Гиперссылка КАК Гиперссылка,
	|	ВТ.ГруппаСсылка КАК ГруппаСсылка
	|ПОМЕСТИТЬ ВтКонфигурации
	|ИЗ
	|	&ВТ КАК ВТ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЕСТЬNULL(Конфигурации.Ссылка, ЗНАЧЕНИЕ(Справочник.Конфигурации.ПустаяСсылка)) КАК Ссылка,
	|	ВтКонфигурации.Наименование КАК Наименование,
	|	ВтКонфигурации.Гиперссылка КАК Гиперссылка,
	|	ЕСТЬNULL(Конфигурации.Ссылка.Отслеживать, ЛОЖЬ) КАК Отслеживать,
	|	ВтКонфигурации.ГруппаСсылка КАК Владелец
	|ИЗ
	|	ВтКонфигурации КАК ВтКонфигурации
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Конфигурации КАК Конфигурации
	|		ПО ВтКонфигурации.Гиперссылка = Конфигурации.ГиперСсылка
	|			И (НЕ Конфигурации.ПометкаУдаления)";
	
	Запрос.УстановитьПараметр("ВТ", ТаблицаЗначений);
	
	СписокКонфигураций = Запрос.Выполнить().Выгрузить();
	
	ИспользоватьПараметрОтслеживания = Константы.Обновления1С_ТолькоОтслеживаемые.Получить();
	
	Для Каждого Конфигурация Из СписокКонфигураций Цикл
		
		Если ВыводитьСостояние Тогда
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = Формат((СписокКонфигураций.Индекс(Конфигурация) + 1), "ЧН=0; ЧГ=0") + "/" + Формат(СписокКонфигураций.Количество(), "ЧН=0; ЧГ=0");  
			Сообщение.Сообщить();
			
		КонецЕсли;
				
		ЭтоНовый = Не ЗначениеЗаполнено(Конфигурация.Ссылка);
				
		Если Не ЭтоНовый Тогда	
			КонфигурацияОбъект = Конфигурация.Ссылка.ПолучитьОбъект();
		Иначе
			КонфигурацияОбъект = Справочники.Конфигурации.СоздатьЭлемент();
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(КонфигурацияОбъект, Конфигурация,, "Ссылка");
		
		КонфигурацияОбъект.Записать();
		
		Конфигурация.Ссылка = КонфигурацияОбъект.Ссылка; 
			
	КонецЦикла;		
	
	ОМ_Сервер.НоваяЗаписьЖурнала(2, "ОМ_Обновления1С.ПолучитьКонфигурацииВФоне", "Загружено " + Формат(СписокКонфигураций.Количество(), "ЧН=0; ЧГ=0") + " конфигураций.");
	
КонецПроцедуры

#КонецОбласти


#Область Релизы

Процедура ОбновитьГиперссылкиРелизов(НужноСкачать = Ложь) ЭКспорт
	
	ОбъектыДляСкачивания = ОМ_Обновления1С.ОбъектыДляЗагрузкиПоУмолчанию(Истина);

	ЕстьВыборкаПоОбъектам = Ложь;
	
	Если ОбъектыДляСкачивания = Неопределено
		Или ОбъектыДляСкачивания.Количество() = 0 Тогда
		
		ЕстьВыборкаПоОбъектам = Ложь;
		
	Иначе
		ЕстьВыборкаПоОбъектам = Истина;
	КонецЕсли;
	
	Если Не ЕстьВыборкаПоОбъектам Тогда
		
		ОМ_Сервер.НоваяЗаписьЖурнала(1, "ОМ_Обновления1С.ОбновитьГиперссылкиРелизов", "Нет выбранных объектов для загрузки.");
		Возврат;
		
	КонецЕсли;
	
	Если Не ПодключитьсяК1СПортал() Тогда
		Возврат;
	КонецЕсли;

	Дерево = Новый ДеревоЗначений;
	
	Колонки = КолонкиДереваГиперссылокРелизов();
	
	Для Каждого Колонка Из Колонки Цикл
		Дерево.Колонки.Добавить(Колонка);
	КонецЦикла;
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ГруппыКонфигураций.Ссылка КАК Группа
	|ПОМЕСТИТЬ ВТГруппы
	|ИЗ
	|	Справочник.ГруппыКонфигураций КАК ГруппыКонфигураций
	|ГДЕ
	|	НЕ ГруппыКонфигураций.ПометкаУдаления
	|	И ВЫБОР
	|			КОГДА &ТолькоОтслеживаемые = ИСТИНА
	|				ТОГДА ГруппыКонфигураций.Отслеживать
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТГруппы.Группа КАК Группа,
	|	Конфигурации.Ссылка КАК Конфигурация
	|ПОМЕСТИТЬ ВТГруппыКонфигурации
	|ИЗ
	|	ВТГруппы КАК ВТГруппы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Конфигурации КАК Конфигурации
	|		ПО ВТГруппы.Группа = Конфигурации.Владелец
	|			И (НЕ Конфигурации.ПометкаУдаления)
	|			И (ВЫБОР
	|				КОГДА &ТолькоОтслеживаемые = ИСТИНА
	|					ТОГДА Конфигурации.Отслеживать
	|				ИНАЧЕ ИСТИНА
	|			КОНЕЦ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТГруппы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТГруппыКонфигурации.Группа КАК Группа,
	|	ВТГруппыКонфигурации.Конфигурация КАК Конфигурация,
	|	Релизы.Ссылка КАК Релиз
	|ИЗ
	|	ВТГруппыКонфигурации КАК ВТГруппыКонфигурации
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Релизы КАК Релизы
	|		ПО ВТГруппыКонфигурации.Конфигурация = Релизы.Владелец
	|			И (НЕ Релизы.ПометкаУдаления)
	|			И (Релизы.ДатаВыхода >= &ДатаВыхода)
	|			И (Релизы.ГиперСсылка <> """")
	|ИТОГИ ПО
	|	Группа,
	|	Конфигурация,
	|	Релиз";
	
	Запрос.УстановитьПараметр("ТолькоОтслеживаемые", 	Константы.Обновления1С_ТолькоОтслеживаемые.Получить());
	Запрос.УстановитьПараметр("ДатаВыхода", 			Константы.Обновления1С_ЗагружатьРелизыОт.Получить());
	
	РезультатЗапроса 					= ЗАпрос.Выполнить();
	
	ВыборкаПоГруппа 					= РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Группа");
	
	Пока ВыборкаПоГруппа.Следующий() Цикл
		
		Если ЗначениеЗаполнено(ВыборкаПоГруппа.Группа) Тогда
			
			ТекущаяВетка 				= Дерево.Строки.Добавить();
			
			ТекущаяВетка.Группа 		= ВыборкаПоГруппа.Группа;
			
			ВыборкаПоКонфигурации 		= ВыборкаПоГруппа.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Конфигурация");
			
			Пока ВыборкаПоКонфигурации.Следующий() Цикл
				
				Если ЗначениеЗаполнено(ВыборкаПоКонфигурации.Конфигурация) Тогда
					
					ВеткаКонфы 				= ТекущаяВетка.Строки.Добавить();
					
					ВеткаКонфы.Группа 		= ТекущаяВетка.Группа;
					ВеткаКонфы.Конфигурация = ВыборкаПоКонфигурации.Конфигурация;
					
					ВыборкаПоРелизу 		= ВыборкаПоКонфигурации.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Релиз");
					
					Пока ВыборкаПоРелизу.Следующий() Цикл
						
						Если ЗначениеЗаполнено(ВыборкаПоРелизу.Релиз) Тогда
							
							ВеткаРелиза 				= ВеткаКонфы.Строки.Добавить();
							ВеткаРелиза.Группа 			= ВеткаКонфы.Группа;
							ВеткаРелиза.Конфигурация 	= ВеткаКонфы.Конфигурация;
							ВеткаРелиза.Релиз			= ВыборкаПоРелизу.Релиз;
							
							ЗаполнитьГиперссылкиПоРелизу(ВеткаРелиза);
							
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	МассивЗадачДляВыполнения = Новый Массив;
	
	// Скачивание
	ЗаполнитьДеревоОбъектамиЗагрузкиРекурсия(Дерево, Истина, НужноСкачать, МассивЗадачДляВыполнения);
	
	Если НужноСкачать 
		И МассивЗадачДляВыполнения.Количество() > 0 Тогда
		
		МассивФЗ = Новый Массив;
						
		ОМ_Сервер.НоваяЗаписьЖурнала(2, "ОМ_Обновления.ОбновитьГиперссылкиРелизов", "Запущено " + Строка(МассивЗадачДляВыполнения.Количество()) +  " потоков");
		
		Если Константы.ФоновыеЗадания_РаботаНаСервере.Получить() = Истина Тогда
			
			ОМ_РегламентныеОперации.ЗапуститьИКонтролироватьЗавершениеПотоков(МассивЗадачДляВыполнения);			
			
		Иначе
			
			// Выполняются по очереди, после завершения этого обработчика
			Индекс = 1;

			Для Каждого Поток Из МассивЗадачДляВыполнения Цикл
				
				Поток.Параметры.Добавить("Запускается поток " + Строка(Индекс) + " из " + Строка(МассивЗадачДляВыполнения.Количество()));
				Поток.Параметры.Добавить("Завершил работу поток " + Строка(Индекс) + " из " + Строка(МассивЗадачДляВыполнения.Количество()));
				
				ФоновоеЗаданиеПотока = ФоновыеЗадания.Выполнить(Поток.ИмяМетода, Поток.Параметры, Строка(Поток.Ключ), Поток.Наименование);
				
				МассивФЗ.Добавить(ФоновоеЗаданиеПотока);	
				
				Индекс = Индекс + 1;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолучитьРелизыВФоне() Экспорт
	
	Если Не ПодключитьсяК1СПортал() Тогда
		Возврат;
	КонецЕсли;

	ОбновитьОтборПоДате();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Конфигурации.Ссылка КАК Ссылка,
	|	Конфигурации.ГиперСсылка КАК ГиперСсылка
	|ИЗ
	|	Справочник.Конфигурации КАК Конфигурации
	|ГДЕ
	|	НЕ Конфигурации.ПометкаУдаления
	|	И ВЫБОР
	|			КОГДА &ИспользоватьПараметрОтслеживания = ИСТИНА
	|				ТОГДА Конфигурации.Отслеживать
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ";
	
	Запрос.УстановитьПараметр("ИспользоватьПараметрОтслеживания", Константы.Обновления1С_ТолькоОтслеживаемые.Получить());
	
	ПереченьКонфигураций = Запрос.Выполнить().Выгрузить();
	
	Если ПереченьКонфигураций.Количество() = 0 Тогда
		ОМ_Сервер.НоваяЗаписьЖурнала(2, "ОМ_Обновления1С.ПолучитьРелизыВФоне", "Отмена загрузки релизов: нет отслеживаемых релизов");		
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаТЧ Из ПереченьКонфигураций Цикл
		
		ЗагрузитьВерсииНаСервере(СтрокаТЧ.Ссылка, СтрокаТЧ.ГиперСсылка);
		
	КонецЦикла;
	
КонецПроцедуры

Функция НайтиРелиз(НомерРелиза, Владелец) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Релизы.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Релизы КАК Релизы
		|ГДЕ
		|	НЕ Релизы.ПометкаУдаления
		|	И Релизы.Наименование = &Наименование
		|	И Релизы.Владелец = &Владелец";
	
	Запрос.УстановитьПараметр("Владелец", Владелец);
	Запрос.УстановитьПараметр("Наименование", НомерРелиза);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Если РезультатЗапроса.Количество() > 0 Тогда
		Возврат РезультатЗапроса[0];
	КонецЕсли;	
	
КонецФункции

Процедура ЗагрузитьВерсииНаСервере(Конфигурация, ГиперСсылка = "") Экспорт
	
	Если Не ПодключитьсяК1СПортал() Тогда
		Возврат;
	КонецЕсли;
	
	ОтборПоДате = Константы.Обновления1С_ЗагружатьРелизыОт.Получить();
	
	Соединение = Новый HTTPСоединение(Константы.Обновления1С_СерверИТС.Получить(),,,,Новый ИнтернетПрокси,,Новый ЗащищенноеСоединениеOpenSSL);
	
	Запрос = Новый HTTPЗапрос;
	Запрос.Заголовки.Вставить("Connection", "keep-alive");
	Запрос.Заголовки.Вставить("Cookie", 	ПолучитьКуки());
	
	Если Не ЗначениеЗаполнено(ГиперСсылка) Тогда
		Запрос.АдресРесурса = Конфигурация.ГиперСсылка;
	Иначе
		Запрос.АдресРесурса = ГиперСсылка;
	КонецЕсли;
	
	Ответ = Соединение.Получить(Запрос);
	
	ЧтениеHTML = Новый ЧтениеHTML;
	ЧтениеHTML.УстановитьСтроку(Ответ.ПолучитьТелоКакСтроку());
	
	Построитель = Новый ПостроительDOM;
	ДокументHTML = Построитель.Прочитать(ЧтениеHTML);
	
	versionsTable = ДокументHTML.ПолучитьЭлементПоИдентификатору("versionsTable");
	
	Обновлено 	= 0;
	Новых		= 0;
	Существующих= 0;
	
	ДатаПослеКоторойЗагружать = Константы.Обновления1С_ЗагружатьРелизыОт.Получить();
	
	Если versionsTable <> Неопределено Тогда
		
		СтрокиТаблицы = versionsTable.ПолучитьЭлементыПоИмени("tr");
		
		СтрокиСсылокТаблицы = versionsTable.ПолучитьЭлементыПоИмени("a");
		
		ОМ_Сервер.НоваяЗаписьЖурнала(2, "ОМ_Обновления1С.ЗагрузитьВерсииНаСервере", 
		"Начинаем сопоставлять " + Формат(СтрокиТаблицы.Количество(), "ЧН=0; ЧГ=0") + " релизов", Конфигурация);

		
		Для Каждого СтрокаТаблицы Из СтрокиТаблицы Цикл
			
			ЯчейкиТаблицы = СтрокаТаблицы.ПолучитьЭлементыПоИмени("td");
			
			Если ЯчейкиТаблицы.Количество() > 0 Тогда
				
				НомерВерсии 					= СокрЛП(ЯчейкиТаблицы[0].ТекстовоеСодержимое);
				
				ДатаВыхода 						= СокрЛП(ЯчейкиТаблицы[1].ТекстовоеСодержимое);
				ДатаВыхода 						= Дата("20" + Сред(ДатаВыхода, 7, 4), Сред(ДатаВыхода, 4, 2), Сред(ДатаВыхода, 1, 2));
				
				Диск1С_ИТС 						= СокрЛП(ЯчейкиТаблицы[2].ТекстовоеСодержимое);
				ОбновлениеВерсии 				= СокрЛП(ЯчейкиТаблицы[3].ТекстовоеСодержимое);
				
				НайденнаяСсылка 				= НайтиРелиз(НомерВерсии, Конфигурация);
				ГиперСсылка 					= НайтиГиперСсылкуНаИнфу(СтрокиСсылокТаблицы, НомерВерсии);
				
				Если ДатаВыхода >= ОтборПоДате Тогда
					
					Если Не ЗначениеЗаполнено(НайденнаяСсылка) Тогда
						
						Спр 						= Справочники.Релизы.СоздатьЭлемент();
						Спр.Владелец 				= Конфигурация;
						Спр.Наименование 			= НомерВерсии;
						Спр.ДатаВыхода 				= ДатаВыхода;
						
						Спр.ОбновлениеВерсии 		= ОбновлениеВерсии;
						
						Спр.ГиперСсылка 			= ГиперСсылка;
						
						Спр.Записать();		
						
						Новых = Новых + 1;
						
					Иначе
						
						Если Не ЗначениеЗаполнено(НайденнаяСсылка.ГиперСсылка) 
							Или НайденнаяСсылка.ГиперСсылка <> ГиперСсылка Тогда
							
							СпрОбъект 				= НайденнаяСсылка.ПолучитьОбъект();
							
							СпрОбъект.ГиперСсылка 	= ГиперСсылка;
							
							СпрОбъект.Записать();
							
							Обновлено = Обновлено + 1;
							
						Иначе
							Существующих = Существующих + 1;
						КонецЕсли;
						
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;	
	
	ОМ_Сервер.НоваяЗаписьЖурнала(2, "ОМ_Обновления1С.ЗагрузитьВерсииНаСервере", 
	"Сопоставлено релизов: " + Формат(Существующих, "ЧН=0; ЧГ=0") + ", обновлено - " + Формат(Обновлено, "ЧН=0; ЧГ=0") + ", новых - " + Формат(Новых, "ЧН=0; ЧГ=0"), Конфигурация);
	
КонецПроцедуры

Функция КолонкиДереваГиперссылокРелизов()
	
	Результат = Новый Массив;
	
	Результат.Добавить("Группа");
	Результат.Добавить("Конфигурация");
	Результат.Добавить("Релиз");
	
	Возврат Результат;
	
КонецФункции

Процедура АвтоматическаяЗагрузкаФайлов(НужноСкачать = Ложь) Экспорт
	
	Если Константы.Обновления1С_АвтоЗагрузка.Получить() = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	ТекДата = ТекущаяДата();
	
	Расписание = Константы.Обновления1С_Расписание.Получить();
	
	Если Расписание = Новый РасписаниеРегламентногоЗадания Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Расписание.ТребуетсяВыполнение(ТекДата) Тогда
		Возврат;
	КонецЕсли;
	
	ОМ_Сервер.НоваяЗаписьЖурнала(2, ОМ_РегламентныеОперации.Получить_ИмяМетодаЗагрузкаФайлов1С(), "Запущено автоматические скачивание обновлений по расписанию:"
	+ Символы.ПС + "Этап 1: Обновление релизов"
	+ Символы.ПС + "Этап 2: Скачивание файлов");

	ПолучитьРелизыВФоне();
	ОбновитьГиперссылкиРелизов(НужноСкачать);
	
КонецПроцедуры

Процедура ЗаполнитьГиперссылкиПоРелизу(ВеткаРелиза) Экспорт
	
	Если ВеткаРелиза = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Соединение = Новый HTTPСоединение(Константы.Обновления1С_СерверИТС.Получить(),,,,Новый ИнтернетПрокси,,Новый ЗащищенноеСоединениеOpenSSL);
	
	Запрос = Новый HTTPЗапрос;
	Запрос.Заголовки.Вставить("Connection", "keep-alive");
	Запрос.Заголовки.Вставить("Cookie", ПолучитьКуки());
	Запрос.АдресРесурса = ВеткаРелиза.Релиз.ГиперСсылка;
	
	Ответ = Соединение.Получить(Запрос);
	
	ЧтениеHTML = Новый ЧтениеHTML;
	ЧтениеHTML.УстановитьСтроку(Ответ.ПолучитьТелоКакСтроку());
	
	Построитель = Новый ПостроительDOM;
	ДокументHTML = Построитель.Прочитать(ЧтениеHTML);
	
	СсылкиНаСтранице = ДокументHTML.ПолучитьЭлементыПоИмени("a");
	
	ОбъектыДляСкачивания = ОМ_Обновления1С.ОбъектыДляЗагрузкиПоУмолчанию(Истина);
	
	РелизОбъект = ВеткаРелиза.Релиз.ПолучитьОбъект();
	
	РелизОбъект.ГиперСсылки.Очистить();
	
	Для Каждого СтрСсылка Из СсылкиНаСтранице Цикл
		      
		Если ЭтоОтслеживаемыйОбъект(ОбъектыДляСкачивания, СтрСсылка.ТекстовоеСодержимое) Тогда
			
			Нстр = РелизОбъект.ГиперСсылки.Добавить();
			
			Нстр.Объект = СтрСсылка.ТекстовоеСодержимое;
			Нстр.Гиперссылка = СтрСсылка.ГиперСсылка;
			
		КонецЕсли;
			
	КонецЦикла;
	
	Если РелизОбъект.ГиперСсылки.Количество() > 0 Тогда
				
		РелизОбъект.Записать();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


#Область Общие

Процедура ОчиститьСправочник(ИмяСправочника) Экспорт
	
	Выборка = Справочники[ИмяСправочника].Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Объект = Выборка.Ссылка.ПолучитьОбъект();
		Объект.Удалить();
		
	КонецЦикла;
	
КонецПроцедуры

Функция Получить_ИгнорируемыеОбъекты(ВыгрузитьКакСтроки = Ложь) ЭКспорт
	
	ОбъектыДляСкачивания 	= ОбъектыДляЗагрузкиПоУмолчанию(Истина);
	ИгнорируемыйНабор 		= ОбъектыДляЗагрузкиПоУмолчанию();
	
	Для Каждого Объект Из ОбъектыДляСкачивания Цикл
		
		ЭЛ = ИгнорируемыйНабор.НайтиПоЗначению(Объект.Значение);
		
		Если ЭЛ <> Неопределено Тогда
			ИгнорируемыйНабор.Удалить(ЭЛ);
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не ВыгрузитьКакСтроки Тогда
		ИгнорируемыйНабор = ИгнорируемыйНабор.ВыгрузитьЗначения();
	Иначе
		
		Массив = Новый Массив;
		
		Для Каждого Стр Из ИгнорируемыйНабор Цикл
			
			Массив.Добавить(ВРЕГ(Стр.Представление));
			
		КонецЦикла;
		
		ИгнорируемыйНабор = Массив;
		
	КонецЕсли;
	
	Возврат ИгнорируемыйНабор;
	
КонецФункции

Процедура Установить_ОбъектыЗагрузки(СписокЗначений) Экспорт
	
	Константы.Обновления1С_ОбъектыДляЗагрузки.Установить(ОМ_Сервер.СложитьВХранилище(СписокЗначений));
	
КонецПроцедуры

Функция ОбъектыДляЗагрузкиПоУмолчанию(ЭтоОтбор = Ложь) Экспорт
	
	Если Не ЭтоОтбор Тогда
		
		Результат = Новый СписокЗначений;
		
		Для Каждого Перечисление Из Метаданные.Перечисления.Обновления1С_ОбъектыДляЗагрузки.ЗначенияПеречисления Цикл
			
			Результат.Добавить(Перечисления.Обновления1С_ОбъектыДляЗагрузки[Перечисление.Имя],Перечисление.Синоним, Истина);
			
		КонецЦикла;
		
		Результат.СортироватьПоПредставлению(НаправлениеСортировки.Возр);
				
		Возврат Результат;
		
	Иначе
		
		Массив = Новый Массив;
		
		СписокЗн = ОМ_Сервер.ПрочитатьХранилище("Обновления1С_ОбъектыДляЗагрузки");
		
		СписокЗн.СортироватьПоПредставлению(НаправлениеСортировки.Возр);
		
		Если СписокЗн <> Неопределено Тогда
			
			Для Каждого Стр Из СписокЗн Цикл
				
				Если Стр.Пометка Тогда
					Массив.Добавить(Стр);
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Возврат Массив;
		
	КонецЕсли;
	
КонецФункции

Процедура ПолучитьДеревоРазделовВФоне() Экспорт
	
	Если Не ПодключитьсяК1СПортал() Тогда
		Возврат;
	КонецЕсли;
	
	Результат = Новый ТаблицаЗначений;
	
	Результат.Колонки.Добавить("Наименование", 	Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(125)));
	Результат.Колонки.Добавить("Номер", 		Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(15)));
	
	Запрос = Новый HTTPЗапрос;
	Запрос.Заголовки.Вставить("Connection", "keep-alive");
	Запрос.Заголовки.Вставить("Cookie", 	ПолучитьКуки());
	Запрос.АдресРесурса = "/total";
	
	Соединение2 	= Новый HTTPСоединение(Константы.Обновления1С_СерверИТС.Получить(),,,,Новый ИнтернетПрокси,,Новый ЗащищенноеСоединениеOpenSSL);
	
	ОтветHTTP 		= Соединение2.Получить(Запрос);
	
	ЧтениеHTML 		= Новый ЧтениеHTML;
	ЧтениеHTML.УстановитьСтроку(ОтветHTTP.ПолучитьТелоКакСтроку());
	
	Построитель 	= Новый ПостроительDOM;
	ДокументHTML 	= Построитель.Прочитать(ЧтениеHTML);
	
	СтрокиТаблицы 	= ДокументHTML.ПолучитьЭлементПоИдентификатору("actualTable").ПолучитьЭлементыПоИмени("tr");
	
	Для Каждого СтрокаТЧ Из СтрокиТаблицы Цикл
		
		УзлыTD = СтрокаТЧ.ПолучитьЭлементыПоИмени("td");
		
		Если УзлыTD.Количество() > 0 Тогда
			
			НомерГруппы = СтрокаТЧ.getAttribute("group");
			
			Для Каждого СтрокаTD Из УзлыTD Цикл
				
				Если СтрокаTD.getAttribute("class") = "groupColumn" Тогда
					
					Представление = "";
					
					ЗаголовкиГруппы = СтрокаTD.ПолучитьЭлементыПоИмени("span");
					
					Для Каждого СтрЗаголовок Из ЗаголовкиГруппы Цикл
						
						Если СтрЗаголовок.ИмяКласса = "group-name" Тогда
							Представление = СтрЗаголовок.ТекстовоеСодержимое;
							Прервать;
						КонецЕсли;
						
					КонецЦикла;
					
					Прервать;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Если ЗначениеЗаполнено(Представление) 
				И ЗначениеЗаполнено(НомерГруппы) Тогда
				
				Если Результат.НайтиСтроки(Новый Структура("Номер", НомерГруппы)).Количество() = 0 Тогда
					
					Нстр 				= Результат.Добавить();
					
					Нстр.Номер 			= НомерГруппы;
					Нстр.Наименование 	= Представление;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВТ.Наименование КАК Наименование,
	|	ВТ.Номер КАК Номер
	|ПОМЕСТИТЬ ВТ_Результат
	|ИЗ
	|	&ВТ КАК ВТ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ГруппыКонфигураций.Ссылка, ЗНАЧЕНИЕ(Справочник.ГруппыКонфигураций.ПустаяСсылка)) КАК Ссылка,
	|	ВТ_Результат.Наименование КАК Наименование,
	|	ВТ_Результат.Номер КАК Номер,
	|	ЕСТЬNULL(ГруппыКонфигураций.Отслеживать, Ложь) КАК Отслеживать
	|ИЗ
	|	ВТ_Результат КАК ВТ_Результат
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГруппыКонфигураций КАК ГруппыКонфигураций
	|		ПО ВТ_Результат.Номер = ГруппыКонфигураций.Номер
	|			И (НЕ ГруппыКонфигураций.ПометкаУдаления)";
	
	Запрос.УстановитьПараметр("ИспользоватьПараметрОтслеживания", Константы.Обновления1С_ТолькоОтслеживаемые.Получить());
	
	Запрос.УстановитьПараметр("ВТ", Результат);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаТЧ Из РезультатЗапроса Цикл
		
		Если Не ЗначениеЗАполнено(СтрокаТЧ.Ссылка) Тогда
			
			ГруппаОбъект = Справочники.ГруппыКонфигураций.СоздатьЭлемент();
		
			ЗаполнитьЗначенияСвойств(ГруппаОбъект, СтрокаТЧ,, "Ссылка");
			
			ГруппаОбъект.Записать();
			
			СтрокаТЧ.Ссылка = ГруппаОбъект.Ссылка;
			
			ОМ_Сервер.НоваяЗаписьЖурнала(3, "ОМ_Обновления1С.ПолучитьДеревоРазделовВФоне", "Новая группа", СтрокаТЧ.Ссылка);
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура СформироватьФайлыПоДереву(ВеткаДерева, ТекстДляЖурналаПриНачалеРаботы = "", ТекстДляЖурналаПриЗавершении = "") Экспорт
	
	ОМ_Соединения.СделатьПаузу(1);
	
	Если ЗначениеЗаполнено(ТекстДляЖурналаПриНачалеРаботы) Тогда
		ОМ_Сервер.НоваяЗаписьЖурнала(2, "ОМ_Обновления1С.СформироватьФайлыПоДереву", ТекстДляЖурналаПриНачалеРаботы, ВеткаДерева.Релиз);								
	КонецЕсли;
	
	Попытка
		
		КаталогХраненияФайлов = Константы.Обновления1С_КаталогХранения.Получить();
		
		Если Не ЗначениеЗаполнено(КаталогХраненияФайлов) Тогда
			ОМ_Сервер.НоваяЗаписьЖурнала(1, "ОМ_Обновления1С.СформироватьФайлыПоДереву", "Каталог хранения файлов не установлен, операция прервана.");								
			Возврат;
		Иначе
			
			Если Не КаталогХраненияФайлов.Настроен Тогда
				ОМ_Сервер.НоваяЗаписьЖурнала(1, "ОМ_Обновления1С.СформироватьФайлыПоДереву", "Каталог хранения файлов не настроен, операция прервана.", КаталогХраненияФайлов);								
				Возврат;	
			КонецЕсли;
			
		КонецЕсли;
		
		Если КаталогХраненияФайлов.ТипКаталога = Перечисления.ТипыКаталогов.Локальный Тогда
			
			Загрузить_ВЛокальныйРепозиторий(КаталогХраненияФайлов, ВеткаДерева);	
			
		ИначеЕсли КаталогХраненияФайлов.ТипКаталога = Перечисления.ТипыКаталогов.ВебХранилище Тогда
			
			Загрузить_ВВебХранилище(КаталогХраненияФайлов, ВеткаДерева);
			
		ИначеЕсли КаталогХраненияФайлов.ТипКаталога = Перечисления.ТипыКаталогов.Удаленный Тогда	
			
			ОМ_Сервер.НоваяЗаписьЖурнала(0, "ОМ_Обновления1С.СформироватьФайлыПоДереву", "Метод для выгрузки по RDP не описан" + Символы.ПС + ОписаниеОшибки());
			
		КонецЕсли;
		
	Исключение
		
		ОМ_Сервер.НоваяЗаписьЖурнала(0, "ОМ_Обновления1С.СформироватьФайлыПоДереву", "Что-то пошло не так:(" + Символы.ПС + ОписаниеОшибки());
		
	КонецПопытки;
	
	Если ЗначениеЗаполнено(ТекстДляЖурналаПриЗавершении) Тогда
		ОМ_Сервер.НоваяЗаписьЖурнала(2, "ОМ_Обновления1С.СформироватьФайлыПоДереву", ТекстДляЖурналаПриЗавершении, ВеткаДерева.Релиз);								
	КонецЕсли;
			
КонецПроцедуры

Процедура Загрузить_ВВебХранилище(СсылкаНаКаталогЗагрузки, ВеткаДерева)
		
	Если Не СсылкаНаКаталогЗагрузки.Настроен Тогда
		
		ОМ_Сервер.НоваяЗаписьЖурнала(1, "ОМ_Обновления1С.СформироватьФайлыПоДереву", "Веб-каталог хранения файлов не настроен, операция прервана.", СсылкаНаКаталогЗагрузки);
		Возврат;
		
	КонецЕсли;
		
	// + Этап 1: Создание родительского каталога ///////////////////////////////////////////////////////////////////////////
	
	Если ЗначениеЗаполнено(СсылкаНаКаталогЗагрузки.Адрес) Тогда	
		
		// РодительскаяПапкаХранилища
		Каталог_Род = СсылкаНаКаталогЗагрузки.Адрес + ?(Прав(СсылкаНаКаталогЗагрузки.Адрес, 1) = "/", "", "/");
		
		Результат_РПХ = ОМ_ОбменВеб.Создать_Папку(СсылкаНаКаталогЗагрузки, Каталог_Род); 
		
		Если Не Результат_РПХ.Выполнено Тогда
			
			ОМ_Сервер.НоваяЗаписьЖурнала(1, "ОМ_Обновления1С.СформироватьФайлыПоДереву", "Не удалось создать родительский каталог " + """" + Каталог_Род + """" + " в веб-хранилище", СсылкаНаКаталогЗагрузки);	
			Возврат;
			
		КонецЕсли;
		
	Иначе
		Каталог_Род = "";
	КонецЕсли;
	
	// - Этап 1: Создание родительского каталога ///////////////////////////////////////////////////////////////////////////
	
	// + Этап 2: Создание каталога конфигурации ////////////////////////////////////////////////////////////////////////////
	
	// РодительскаяПапкаКонфигурации
	Каталог_Конф 	= Каталог_Род + ОМ_Служебный.НормализоватьПутьКаталога(ВеткаДерева.Конфигурация); 
	
	Результат_РПК 	= ОМ_ОбменВеб.Создать_Папку(СсылкаНаКаталогЗагрузки, Каталог_Конф, Результат_РПХ.ИД_Файла);
	
	Если Не Результат_РПК.Выполнено Тогда

		ОМ_Сервер.НоваяЗаписьЖурнала(1, "ОМ_Обновления1С.СформироватьФайлыПоДереву", "Не удалось создать каталог конфигурации в веб-хранилище " + """" + Строка(СсылкаНаКаталогЗагрузки) + """", ВеткаДерева.Конфигурация);	
		Возврат;
		
	КонецЕсли;
	
	// - Этап 2: Создание каталога конфигурации ///////////////////////////////////////////////////////////////////////////

	// + Этап 3: Создание каталогов релизов ///////////////////////////////////////////////////////////////////////////////
	
	Для Каждого СтрокаТЧ Из ВеткаДерева.Релиз.ГиперСсылки Цикл
		
		Попытка
			СведенияОФайле = СкачатьФайл1СПоГиперссылке(СтрокаТЧ);
		Исключение
			
			ОМ_Сервер.НоваяЗаписьЖурнала(0, "ОМ_Обновления1С.СформироватьФайлыПоДереву", "Что-то пошло не так при скачивании обновления :(" + Символы.ПС + ОписаниеОшибки());
			ВызватьИсключение(ОписаниеОшибки());
			
		КонецПопытки;
		
		Если СведенияОФайле <> Неопределено Тогда
			
			// КаталогРелиза
			Каталог_РЛЗ 		= Каталог_Конф + "\" + ВеткаДерева.Релиз;
			
			Результат_РЛЗ		= ОМ_ОбменВеб.Создать_Папку(СсылкаНаКаталогЗагрузки, Каталог_РЛЗ, Результат_РПК.ИД_Файла);
						
			Если Не Результат_РЛЗ.Выполнено Тогда
				
				ОМ_Сервер.НоваяЗаписьЖурнала(1, "ОМ_Обновления1С.СформироватьФайлыПоДереву", "Не удалось создать каталог релиза в веб-хранилище " + """" + Строка(СсылкаНаКаталогЗагрузки) + """", ВеткаДерева.Релиз);	
				Возврат;
				
			КонецЕсли;
			
			ДвоичныеДанные = СведенияОФайле.ХранилищеДД.Получить();
			
			Если ДвоичныеДанные <> Неопределено Тогда
				
				ПутьКНовомуФайлу 	= Каталог_РЛЗ + "\" + СведенияОФайле.ИмяФайла;
				
				Файл 			 	= Новый Файл(ПутьКНовомуФайлу);
				
				РасширениеФайла 	= СтрЗаменить(СведенияОФайле.Расширение, ".", "");
				
				Если Врег(РасширениеФайла) <> Врег(СтрЗаменить(Файл.Расширение, ".", "")) Тогда
					ПутьКНовомуФайлу = ПутьКНовомуФайлу + "." + РасширениеФайла;	
				КонецЕсли;
				
				// Адрес Временного Хранилища Файла
				Адрес_ВХФ = ПоместитьВоВременноеХранилище(ДвоичныеДанные, Новый УникальныйИдентификатор);
				
				// + Этап 4: Выгрузка файлов релиза ///////////////////////////////////////////////////////////////////////////////
				
				// ВыгрузкаФайла
				Результат_ВФ = ОМ_ОбменВеб.Выгрузить_Файл(СсылкаНаКаталогЗагрузки, ПутьКНовомуФайлу, Адрес_ВХФ, Результат_РЛЗ.ИД_Файла);  
				
				Если Не Результат_ВФ.Выполнено Тогда
					
					ОМ_Сервер.НоваяЗаписьЖурнала(1, "ОМ_Обновления1С.СформироватьФайлыПоДереву", "Не удалось выгрузить файл " + """" + ПутьКНовомуФайлу + """" + " в веб-хранилище " + """" + Строка(СсылкаНаКаталогЗагрузки) + """", ВеткаДерева.Релиз);	
						
				КонецЕсли;
				
				// - Этап 4: Выгрузка файлов релиза ///////////////////////////////////////////////////////////////////////////////

			КонецЕсли;
			
		Иначе
			ОМ_Сервер.НоваяЗаписьЖурнала(1, "ОМ_Обновления1С.СформироватьФайлыПоДереву", "Не удалось скачать файл по объекту " + """" + СтрокаТЧ.Объект + """", ВеткаДерева.Релиз);									
		КонецЕсли;
		
	КонецЦикла;
	// - Этап 3: Создание каталогов релизов ///////////////////////////////////////////////////////////////////////////////
	
КонецПроцедуры

Процедура Загрузить_ВЛокальныйРепозиторий(СсылкаНаКаталогЗагрузки, ВеткаДерева)
	
	КаталогХраненияФайлов = СсылкаНаКаталогЗагрузки.Адрес;
	
	Если Не ЗначениеЗаполнено(КаталогХраненияФайлов) Тогда
		
		ОМ_Сервер.НоваяЗаписьЖурнала(1, "ОМ_Обновления1С.СформироватьФайлыПоДереву", "Каталог ломального хранения файлов не установлен, операция прервана.", СсылкаНаКаталогЗагрузки);
		Возврат;
		
	КонецЕсли;
	
	ФайлКаталога = Новый Файл(КаталогХраненияФайлов);
	
	Если Не ФайлКаталога.Существует() Тогда
		
		СоздатьКаталог(КаталогХраненияФайлов);
		
	КонецЕсли;
	
	// 1. Проверка папки конфы
	ВеткаКаталога = ОМ_Служебный.НормализоватьПутьКаталога(ВеткаДерева.Конфигурация);
	КаталогКонфигурации = КаталогХраненияФайлов + "\" + ВеткаКаталога;
	
	Файл = Новый Файл(КаталогКонфигурации);
	
	Если Не Файл.Существует() Тогда	
		СоздатьКаталог(КаталогКонфигурации);
		ОМ_Сервер.НоваяЗаписьЖурнала(2, "ОМ_Обновления1С.СформироватьФайлыПоДереву", "Создан каталог " + """" + КаталогКонфигурации + """", ВеткаДерева.Конфигурация);
	КонецЕсли;
	
	Для Каждого СтрокаТЧ Из ВеткаДерева.Релиз.ГиперСсылки Цикл
		
		Попытка
			СведенияОФайле = СкачатьФайл1СПоГиперссылке(СтрокаТЧ);
		Исключение
			ОМ_Сервер.НоваяЗаписьЖурнала(0, "ОМ_Обновления1С.СформироватьФайлыПоДереву", "Что-то пошло не так:(" + Символы.ПС + ОписаниеОшибки());
			ВызватьИсключение(ОписаниеОшибки());
		КонецПопытки;
		
		Если СведенияОФайле <> Неопределено Тогда
			
			КаталогРелиза = КаталогКонфигурации + "\" + ВеткаДерева.Релиз;
			
			Файл = Новый Файл(КаталогРелиза);
			
			Если Не Файл.Существует() Тогда
				СоздатьКаталог(КаталогРелиза);
				ОМ_Сервер.НоваяЗаписьЖурнала(2, "ОМ_Обновления1С.СформироватьФайлыПоДереву", "Создан каталог " + """" + КаталогРелиза + """", ВеткаДерева.Релиз);				
			КонецЕсли;
			
			ДДанные = СведенияОФайле.ХранилищеДД.Получить();
			
			Если ДДанные <> Неопределено Тогда
				
				ПутьКНовомуФайлу = КаталогРелиза + "\" + СведенияОФайле.ИмяФайла;
				
				Файл = Новый Файл(ПутьКНовомуФайлу);
				
				ПроверочныйФормат = СтрЗаменить(СведенияОФайле.Расширение, ".", "");
				
				Если Врег(ПроверочныйФормат) <> Врег(СтрЗаменить(Файл.Расширение, ".", "")) Тогда
					ПутьКНовомуФайлу = ПутьКНовомуФайлу + "." + ПроверочныйФормат;	
					Файл = Новый Файл(ПутьКНовомуФайлу);
				КонецЕсли;
				
				Если Не Файл.Существует() Тогда
					ДДанные.Записать(ПутьКНовомуФайлу);
					ОМ_Сервер.НоваяЗаписьЖурнала(2, "ОМ_Обновления1С.СформироватьФайлыПоДереву", "Загружен файл " + """" + ПутьКНовомуФайлу + """", ВеткаДерева.Релиз);								
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			ОМ_Сервер.НоваяЗаписьЖурнала(1, "ОМ_Обновления1С.СформироватьФайлыПоДереву", "Не удалось загрузить файл по объекту " + """" + СтрокаТЧ.Объект + """", ВеткаДерева.Релиз);									
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьВеткуОбъектамиЗагрузки(ВеткаДерева) Экспорт
	
	Объект = ВеткаДерева.Релиз.ПолучитьОбъект();
	
	Для Каждого СтрокаТЧ Из Объект.ГиперСсылки Цикл
		
		//Если НЕ ЗначениеЗаполнено(СтрокаТЧ.ГиперссылкаИтог) Тогда
			
			Если ЗначениеЗаполнено(СтрокаТЧ.Гиперссылка) Тогда
				
				ГиперСсылкаСкачивания = ПолучитьГиперссылкуНаФайл(СтрокаТЧ.Гиперссылка);
				
				Если ЗначениеЗаполнено(ГиперСсылкаСкачивания) Тогда
					
					//ОМ_Сервер.НоваяЗаписьЖурнала(2, "ОМ_Обновления1С.ЗаполнитьВеткуОбъектамиЗагрузки", "Получена гиперссылка по объекту " + """" + СтрокаТЧ.Объект + """", ВеткаДерева.Релиз);
					СтрокаТЧ.ГиперссылкаИтог = ГиперСсылкаСкачивания;				
					
				Иначе
					//ОМ_Сервер.НоваяЗаписьЖурнала(1, "ОМ_Обновления1С.ЗаполнитьВеткуОбъектамиЗагрузки", "Не удалось получить гиперссылку по объекту " + """" + СтрокаТЧ.Объект + """", ВеткаДерева.Релиз);
				КонецЕсли;
				
			КонецЕсли;
		//КонецЕсли;
	КонецЦикла;
	
	Объект.Записать();
		
КонецПроцедуры

Функция ПолучитьГиперссылкуНаФайл(Знач ГиперСсылка) Экспорт
		
	// ВАЖНО! 1С специально подменяет этот символ. Из-за этого по прямой ссылке не качает. 
	// Учтем это
	ГиперСсылка = Сред(ГиперСсылка, 2);
	ГиперСсылка = СтрЗаменить(ГиперСсылка, "\", "%5C");
	ГиперСсылка = "/" + ГиперСсылка;
	
	СтраницаЕсть = Ложь;
		
	Для НомерПопытки = 1 По 3 Цикл
		
		Соединение = Новый HTTPСоединение(Константы.Обновления1С_СерверИТС.Получить(), , , , Новый ИнтернетПрокси, , Новый ЗащищенноеСоединениеOpenSSL);
		
		Запрос = Новый HTTPЗапрос;
		Запрос.Заголовки.Вставить("Connection", 	"keep-alive");
		Запрос.Заголовки.Вставить("Cookie", 		ПолучитьКуки());
		Запрос.АдресРесурса = ГиперСсылка;
		
		Ответ = Соединение.Получить(Запрос);
		
		ИсходникHTML = Ответ.ПолучитьТелоКакСтроку();
		
		Если СтрНайти(ИсходникHTML, "Выбранный файл не найден") > 0 Тогда
			ОМ_Соединения.СделатьПаузу(1);
		Иначе
			СтраницаЕсть = Истина;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не СтраницаЕсть Тогда
		ОМ_Сервер.НоваяЗаписьЖурнала(1, "ОМ_Обновления1С.ПолучитьГиперссылкуНаФайл", "Не удалось получить доступ к ссылке " + """" + ГиперСсылка +"""" );
		Возврат Неопределено;
	КонецЕсли;
	
	Если Ответ.КодСостояния = 302 Тогда
		Возврат Ответ.Заголовки.Получить("Location");	
	КонецЕсли;
	
	ЧтениеHTML = Новый ЧтениеHTML;
	ЧтениеHTML.УстановитьСтроку(ИсходникHTML);
	
	Построитель = Новый ПостроительDOM;
	ДокументHTML = Построитель.Прочитать(ЧтениеHTML);
	
	КонтентСтраницы = ДокументHTML.НайтиПоФильтру(ОМ_Парсинг.НовыйФильтрПоКлассуТега("div", "downloadDist", Истина));
	
	ГиперСсылкаДляСкачивания = "";
	
	Для Каждого Раздел Из КонтентСтраницы Цикл
		
		СсылкиНаСкачивание = Раздел.ПолучитьЭлементыПоИмени("a");
		
		Если СсылкиНаСкачивание.Количество() > 0 Тогда
						
			ГиперСсылкаДляСкачивания = СсылкиНаСкачивание[0].Гиперссылка;
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ГиперСсылкаДляСкачивания) Тогда
		Возврат ГиперСсылкаДляСкачивания;	
	КонецЕсли;
	
		
КонецФункции

Процедура ЗаполнитьДеревоОбъектамиЗагрузкиРекурсия(Дерево, ЭтоКорень = Ложь, НужноСкачать = Ложь, МассивЗадачДляВыполнения = Неопределено) Экспорт
			
	Для Каждого ВеткаДерева Из Дерево.Строки Цикл
			
		Если ЗначениеЗаполнено(ВеткаДерева.Релиз) Тогда
			
			ЗаполнитьВеткуОбъектамиЗагрузки(ВеткаДерева);
			
			Если НужноСкачать Тогда
									
					Колонки = КолонкиДереваГиперссылокРелизов();
					
					Структура = Новый Структура;
					
					Для Каждого Колонка Из Колонки Цикл
						Структура.Вставить(Колонка);	
					КонецЦикла;
					
					ЗаполнитьЗначенияСвойств(Структура, ВеткаДерева);
					
					ПараметрыДляФЗ = Новый Массив;
					ПараметрыДляФЗ.Добавить(Структура);
					
					ОМ_РегламентныеОперации.ДобавитьНовыйПоток(МассивЗадачДляВыполнения, "ОМ_Обновления1С.СформироватьФайлыПоДереву", ПараметрыДляФЗ);
									
				// Прямой вызов
				//СформироватьФайлыПоДереву(ВеткаДерева);
				
			КонецЕсли;
			
		КонецЕсли;
		
		ЗаполнитьДеревоОбъектамиЗагрузкиРекурсия(ВеткаДерева, Ложь, НужноСкачать, МассивЗадачДляВыполнения);
		
	КонецЦикла;
	
КонецПроцедуры

Функция СкачатьФайл1СПоГиперссылке(СтрокаТЧОбъекта, Соединение = Неопределено, Запрос = Неопределено) Экспорт
	
	ПараметрыЗапуска = Новый Структура("Логин, Пароль", Константы.Обновления1С_Логин.Получить(), Константы.Обновления1С_Пароль.Получить());
	
	СтруктураГиперссылкиРелиза = ОМ_Соединения.СтруктураURI(СтрокаТЧОбъекта.ГиперссылкаИтог);
	
	Соединение_login 	= Новый HTTPСоединение(Константы.Обновления1С_СерверАвторизацииИТС.Получить(),,,,Новый ИнтернетПрокси,,Новый ЗащищенноеСоединениеOpenSSL);
	
	Соединение_releases = Новый HTTPСоединение(СтруктураГиперссылкиРелиза.Хост,,,,Новый ИнтернетПрокси,,Новый ЗащищенноеСоединениеOpenSSL);
	
	//для GET-запросов
	GET_Запрос = Новый HTTPЗапрос(СтруктураГиперссылкиРелиза.ПутьНаСервере);
	GET_Запрос.Заголовки.Вставить("Connection", "keep-alive");
	GET_Запрос.Заголовки.Вставить("Cookie", 	ПолучитьКуки(Истина));
	
	//для POST-запросов
	POST_Запрос = Новый HTTPЗапрос;
	POST_Запрос.Заголовки.Вставить("Connection", "keep-alive");
	POST_Запрос.Заголовки.Вставить("Content-Type", "application/x-www-form-urlencoded");

	HTTP_Ответ = Соединение_releases.Получить(GET_Запрос);
	
	Если HTTP_Ответ.КодСостояния = 302 Тогда
		
		URI2 = ОМ_Соединения.СтруктураURI(HTTP_Ответ.Заголовки.Получить("location"));
			
		НовоеКуки = ПолучитьНовоеКуки(HTTP_Ответ.Заголовки);
		
		Если Найти(НовоеКуки, ";") > 0 Тогда
			НовоеКуки = Лев(НовоеКуки, Найти(НовоеКуки, ";") - 1);
		КонецЕсли;
		
		ОбновитьКуки(НовоеКуки, Истина);
		
		LOCATION1 = СтрЗаменить(URI2.ПутьНаСервере, "https://" + Константы.Обновления1С_СерверАвторизацииИТС.Получить(), "");
		
		GET_Запрос.АдресРесурса = LOCATION1;
		
		ОтветHTTP2 = Соединение_login.Получить(GET_Запрос);
		
		JSESSIONID1 = ПолучитьНовоеКуки(ОтветHTTP2.Заголовки);
		
		ОбновитьКуки(JSESSIONID1, Истина);
		
		inviteCode = РаспарситьinviteCode(ОтветHTTP2.ПолучитьТелоКакСтроку(), ПараметрыЗапуска);
		
		POST_Запрос.АдресРесурса = URI2.ПутьНаСервере;
		POST_Запрос.Заголовки.Вставить("Cookie", JSESSIONID1 + "; i18next=ru-RU");
		POST_Запрос.УстановитьТелоИзСтроки(inviteCode);
		
		ОтветHTTP3 = Соединение_login.ОтправитьДляОбработки(POST_Запрос);
		
		ТикетСтрока = ОтветHTTP3.Заголовки.Получить("location"); 
		ПозицияТикета = СтрНайти(ТикетСтрока, "ticket=");
		
		ТикетСтрокаСокр = Сред(ТикетСтрока, ПозицияТикета); 
		
		Лок3 = ТикетСтрока;
		Лок4 = "https://" + СтруктураГиперссылкиРелиза.ИмяСервера;
		
		LOCATION3 = СтрЗаменить(Лок3, Лок4, "");
		
		GET_Запрос.АдресРесурса = LOCATION3;
		GET_Запрос.Заголовки.Вставить("Cookie", ПолучитьКуки(Истина));
		
		ОтветHTTP4 = Соединение_releases.Получить(GET_Запрос);
		
		ФинальноеКуки = ПолучитьНовоеКуки(ОтветHTTP4.Заголовки);
		ОбновитьКуки(ФинальноеКуки, Истина);
		
		GET_Запрос.Заголовки.Вставить("Cookie", ПолучитьКуки(Истина));
		
		Лок5 = ПравкаСоответствия(ОтветHTTP4.Заголовки,,Истина).Получить(Нрег("location"));
		
		GET_Запрос.АдресРесурса = СтруктураГиперссылкиРелиза.ПутьНаСервере;
		
		//
		HTTP_Ответ = Соединение_releases.Получить(GET_Запрос);
		
	КонецЕсли;
	
	Если HTTP_Ответ.КодСостояния = 200 Тогда
		
		Структура = Новый Структура;
		
		ОписаниеФайла = HTTP_Ответ.Заголовки.Получить("content-disposition");
		
		Если ОписаниеФайла <> Неопределено Тогда
			
			ТегИмени = "filename=" + """";
			ПозицияИмениФайла = СтрНайти(ОписаниеФайла, ТегИмени);
			
			ИмяФайла = Сред(ОписаниеФайла, ПозицияИмениФайла + СтрДлина(ТегИмени));
			
			ИмяФайла = СтрЗаменить(ИмяФайла, """", "");
			
			Структура.Вставить("ИмяФайла", ИмяФайла);
			
			Дданные = HTTP_Ответ.ПолучитьТелоКакДвоичныеДанные();
			
			ПозФормата = СтрНайти(ИмяФайла, ".", НаправлениеПоиска.СКонца);
			Формат = Сред(ИмяФайла + 1, ПозФормата, СтрДлина(ИмяФайла) - ПозФормата + 1); 
			
			Структура.Вставить("Расширение", Формат);
			Структура.Вставить("ХранилищеДД", Новый ХранилищеЗначения(Дданные, Новый СжатиеДанных(9)));
			
		Иначе
			
			ОписаниеВебСтраницы = HTTP_Ответ.Заголовки.Получить("Content-Type");
			
			Дданные = HTTP_Ответ.ПолучитьТелоКакДвоичныеДанные();
			
			Структура.Вставить("ИмяФайла", СтрокаТЧОбъекта.Объект);	
			Структура.Вставить("Расширение", "html");
			Структура.Вставить("ХранилищеДД", Новый ХранилищеЗначения(Дданные, Новый СжатиеДанных(9)));
			
		КонецЕсли;
		
		Возврат Структура;
		
	КонецЕсли;
	
КонецФункции

Процедура ПроверитьИУдалитьДубли() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ГруппыКонфигураций.Номер КАК Номер
	|ИЗ
	|	Справочник.ГруппыКонфигураций КАК ГруппыКонфигураций
	|ГДЕ
	|	НЕ ГруппыКонфигураций.ПометкаУдаления";
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Номер");
	
	Для Каждого Номер Из РезультатЗапроса Цикл
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ГруппыКонфигураций.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ГруппыКонфигураций КАК ГруппыКонфигураций
		|ГДЕ
		|	ГруппыКонфигураций.Номер = &Номер
		|	И НЕ ГруппыКонфигураций.ПометкаУдаления";
		
		Запрос.УстановитьПараметр("Номер", Номер);
		
		Рез = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
		
		Если Рез.Количество() > 1 Тогда
			
			
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция НайтиГиперСсылкуНаИнфу(ТаблицаГиперСсылок, НомерВерсии) Экспорт
	
	Результат = "";
	
	Для Каждого СтрокаТаблицы Из ТаблицаГиперСсылок Цикл
		
		Если СтрНайти(СтрокаТаблицы.Гиперссылка, НомерВерсии) > 0 Тогда
			Результат = Строка(СтрокаТаблицы.Гиперссылка); 
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ЭтоОтслеживаемыйОбъект(ОбъектыДляСкачивания,Знач ТекстСсылки) Экспорт
		
	ИгнорируемыйНабор = ОМ_Обновления1С.Получить_ИгнорируемыеОбъекты(Истина);
	
	Результат = Ложь;
	
	Для Каждого Объект Из ОбъектыДляСкачивания Цикл
		
		ИскомыйОбъект 	= ВРег(Объект.Представление);
		
		// 1.
		Текст 			= СокрЛП(Врег(ТекстСсылки));
		
		Если ЗначениеЗаполнено(Текст) Тогда
			
			Остаток = СтрЗаменить(Текст, ИскомыйОбъект, "");
			
			Если СтрДлина(СокрЛП(Врег(ТекстСсылки))) > СтрДлина(Остаток)
				И СтрДлина(Остаток) >= 0 Тогда
				
				Если ИгнорируемыйНабор.Найти(Текст) = Неопределено Тогда
					
					Возврат Истина;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Процедура ОбновитьОтборПоДате() Экспорт
	
	Если Константы.Обновления1С_АвтоОтборДат.Получить() = Истина Тогда
		
		 Константы.Обновления1С_ЗагружатьРелизыОт.Установить(НачалоМесяца(НачалоМесяца(ТекущаяДата())-1));
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти





























