
Функция Получить_MD5_ХешСтроки(Строка) Экспорт   
	
	Хеш = Новый ХешированиеДанных(ХешФункция.MD5);
	
	Хеш.Добавить(Строка);
	
	Возврат СокрЛП(СтрЗаменить(Строка(Хеш.ХешСумма), " ", "")); 
	
КонецФункции
 
Функция НормализоватьИдентификатор(УникальныйИдентификатор) Экспорт
	
	Возврат СокрЛП(СтрЗаменить(УникальныйИдентификатор, "-", ""));
	
КонецФункции

Функция СкопироватьМассив(Массив) Экспорт
	
	Результат = Новый Массив;
	
	Для Каждого Элемент Из Массив Цикл
		
		Результат.Добавить(Элемент);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция СоответствиеВСтроку(Соответствие, РазделительКлючей = " ", РазделительЗначений = " ", ПрефиксКлюча = "", ПостФиксКлюча = "", ТолькоКлючи = Истина) Экспорт
	
	Результат = "";
	
	Для Каждого Стр Из Соответствие Цикл
		
		Результат = ?(ЗначениеЗаполнено(Результат), Результат + РазделительКлючей, "") + 
		ПрефиксКлюча + Стр.Ключ + ПостФиксКлюча + ?(ТолькоКлючи, "", РазделительЗначений + Стр.Значение);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция СоответствиеВСтруктуру(Соответствие) Экспорт
	
	Структура = Новый Структура;
	
	Для Каждого Стр Из Соответствие Цикл
		
		Если ТипЗнч(Стр.Значение) = Тип("Соответствие") Тогда
			Попытка
				Структура.Вставить(Стр.Ключ, СоответствиеВСтруктуру(Стр.Значение));
			Исключение
				Структура.Вставить(Стр.Ключ, Стр.Значение);
			КонецПопытки;
		Иначе
			Попытка
				Структура.Вставить(Стр.Ключ, Стр.Значение);
			Исключение
				Структура.Вставить(Стр.Ключ, СоответствиеВСтруктуру(Стр.Значение));
			КонецПопытки;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Структура;
	
КонецФункции

Функция СформироватьПредставлениеТипа(Тип) ЭКспорт
	
	Объект = Метаданные.НайтиПоТипу(Тип);
	
	Возврат Объект.ПолноеИмя();
	
КонецФункции

Функция ПолучитьКонстанту(Имя) Экспорт
	
	Возврат Константы[Имя].Получить();
	
КонецФункции

// Уровень:
// 0 - Критикал
// 1 - Ошибка
// 2 - Описание
// 3 - Новый объект БД
Процедура НоваяЗаписьЖурнала(Уровень, Метод, Описание, ОбъектБД = Неопределено) Экспорт
	
	РегистрыСведений.ЖурналСобытий.ДобавитьЗапись(Уровень, Метод, Описание, ОбъектБД);
	
КонецПроцедуры

Функция ЗначениеРеквизитаОбъекта(Ссылка, ИмяРеквизита) Экспорт
	
	Возврат Ссылка[ИмяРеквизита];
	
КонецФункции

&НаСервере
Процедура СообщитьПользователю(Знач Текст, Знач КлючДанных = Неопределено, Знач Поле = "", Знач ПутьКДанным = "", ИдентификаторНазначения = Неопределено) Экспорт
	
	Сообщение = Новый СообщениеПользователю;
	
	Сообщение.Текст = Текст;
	Сообщение.КлючДанных = КлючДанных;
	Сообщение.Поле = Поле;
	
	Сообщение.ПутьКДанным = ПутьКДанным;
	
	Если ИдентификаторНазначения <> Неопределено Тогда
		Сообщение.ИдентификаторНазначения = ИдентификаторНазначения;
	КонецЕсли;
	
	Сообщение.Сообщить();
	
КонецПроцедуры

Функция ЗапуститьВФоне(Метод, Параметры_КлючХранилищаСтрокой, УникальныйИдентификатор, Заголовок = "") Экспорт
	
	Если Параметры_КлючХранилищаСтрокой <> "" Тогда
		Параметры = ПолучитьИзВременногоХранилища(Параметры_КлючХранилищаСтрокой);
	Иначе
		Параметры = Неопределено;
	КонецЕсли;
	
	ФоновыеЗадания.Выполнить(Метод, Параметры, Строка(УникальныйИдентификатор), Заголовок);
		
КонецФункции

Функция ФоновоеЗаданиеЗавершено(ИмяЗапущенногоМетода, УникальныйИдентификатор) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СтруктураОтвета = Новый Структура;
	
	СтруктураОтбора 						= Новый Структура;
	
	СтруктураОтбора.Вставить("Ключ", 		Строка(УникальныйИдентификатор));
	СтруктураОтбора.Вставить("ИмяМетода", 	ИмяЗапущенногоМетода);
	
	ТЗ = ФоновыеЗадания.ПолучитьФоновыеЗадания(СтруктураОтбора);
	
	Если ТЗ.Количество() > 0 Тогда
		
		ФоновоеЗадание = ТЗ[0];
		
		Сообщения = ФоновоеЗадание.ПолучитьСообщенияПользователю(Истина);
		
		Если Сообщения.Количество() > 0 Тогда
			СтруктураОтвета.Вставить("Сообщения", Сообщения);
		КонецЕсли;
		
		СтруктураОтвета.Вставить("Завершено", ФоновоеЗадание.Состояние <> СостояниеФоновогоЗадания.Активно);
		
		Если ФоновоеЗадание.Состояние = СостояниеФоновогоЗадания.Завершено Тогда
			СтруктураОтвета.Вставить("Картинка", БиблиотекаКартинок.Успешно32);
		Иначе
			СтруктураОтвета.Вставить("Картинка", БиблиотекаКартинок.Остановить);
		КонецЕсли;
		
	Иначе
		
		СтруктураОтвета.Вставить("Картинка", БиблиотекаКартинок.Успешно32);
		СтруктураОтвета.Вставить("Завершено", Истина);
		
	КонецЕсли;
	
	СтруктураОтвета.Вставить("ВыводитьСостояние", Константы.Журнал_ВыводитьСостоние.Получить());
	
	Возврат СтруктураОтвета;

КонецФункции

Функция СложитьВХранилище(Значение) Экспорт
	
	Возврат Новый ХранилищеЗначения(Значение, Новый СжатиеДанных(9));
	
КонецФункции

// Создает массив и копирует в него значения, содержащиеся в колонке объекта, для
// которого доступен обход посредством оператора Для каждого … Из.
//
// Параметры:
//  КоллекцияСтрок           - ТаблицаЗначений
//                           - ДеревоЗначений
//                           - СписокЗначений
//                           - ТабличнаяЧасть
//                           - Соответствие
//                           - Структура - коллекция, колонку которой нужно выгрузить в массив.
//                                         А так же другие объекты, для которых доступен обход
//                                         посредством оператора Для каждого … Из … Цикл.
//  ИмяКолонки               - Строка - имя поля коллекции, значения которого нужно выгрузить.
//  ТолькоУникальныеЗначения - Булево - если Истина, то в массив будут включены
//                                      только различающиеся значения.
//
// Возвращаемое значение:
//  Массив - значения колонки.
//
Функция ВыгрузитьКолонку(КоллекцияСтрок, ИмяКолонки, ТолькоУникальныеЗначения = Ложь) Экспорт

	МассивЗначений = Новый Массив;
	
	УникальныеЗначения = Новый Соответствие;
	
	Для Каждого СтрокаКоллекции Из КоллекцияСтрок Цикл
		
		Значение = СтрокаКоллекции[ИмяКолонки];
		
		Если ТолькоУникальныеЗначения И УникальныеЗначения[Значение] <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		МассивЗначений.Добавить(Значение);
		
		УникальныеЗначения.Вставить(Значение, Истина);
		
	КонецЦикла; 
	
	Возврат МассивЗначений;
	
КонецФункции

// Проверяет на идентичность состав колонок
Функция ПроверитьСоставКолонок(Эталон, ТаблицаЗначений) Экспорт
		
	Этап1Пройден = Истина;
	Этап2Пройден = Истина;
	
	Для Каждого КолонкаЭталона Из Эталон.Колонки Цикл
		
		КолонкаВСуществующей = ТаблицаЗначений.Колонки.Найти(КолонкаЭталона.Имя);
		
		Если КолонкаВСуществующей = Неопределено Тогда
			
			Этап1Пройден = Ложь;
			Прервать;
			
		Иначе
			
			Если КолонкаВСуществующей.ТипЗначения <> КолонкаЭталона.ТипЗначения Тогда
				
				Этап1Пройден = Ложь;
				Прервать;	
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не Этап1Пройден Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Для Каждого КолонкаВСуществующей Из ТаблицаЗначений.Колонки Цикл
		
		КолонкаЭталона = Эталон.Колонки.Найти(КолонкаВСуществующей.Имя);
		
		Если КолонкаЭталона = Неопределено Тогда
			
			Этап2Пройден = Ложь;
			Прервать;
			
		Иначе
			
			Если КолонкаЭталона.ТипЗначения <> КолонкаВСуществующей.ТипЗначения Тогда
				
				Этап2Пройден = Ложь;
				Прервать;	
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не Этап2Пройден Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Этап1Пройден И Этап2Пройден;
	
КонецФункции

Процедура ОчиститьЖурналСобытий() Экспорт
	
	РегистрыСведений.ЖурналСобытий.ОчиститьЖурналСобытий();
	
КонецПроцедуры

Функция ПолучитьИмяВременногоФайла_(Формат) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Каталог 				= ОМ_Парсинг.КаталогВременныхФайловПарсера();
	ИмяФайла 				= ОМ_Парсинг.ПрефиксВременногоФайла() + ОМ_КлиентСервер.ПолучитьМеткуВремениСтрокой() + "." + Формат;
	             
	ПолныйПутьКФайлу 		= Каталог + ИмяФайла;
	
	Текст = Новый ТекстовыйДокумент; 
	Текст.Записать(ПолныйПутьКФайлу, КодировкаТекста.UTF8);
	
	Возврат ПолныйПутьКФайлу;
	
КонецФункции

Процедура УдалитьВременныеФайлы() Экспорт
	
	Каталог 				= ОМ_Парсинг.КаталогВременныхФайловПарсера();
	УдалитьФайлы(Каталог, ОМ_Парсинг.ПрефиксВременногоФайла() + "*");
	
КонецПроцедуры

Функция ПрочитатьХранилище(ИмяКонстанты) Экспорт
	
	Значение = Константы[ИмяКонстанты].Получить();
	
	Значение = Значение.Получить();
	
	Возврат Значение;
	
КонецФункции











