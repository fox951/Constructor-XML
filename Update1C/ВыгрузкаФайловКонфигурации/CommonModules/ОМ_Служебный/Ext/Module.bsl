
Функция НормализоватьПутьКаталога(пар_Каталог) Экспорт
	
	ИтоговоеИмяФайла = СокрЛП(пар_Каталог);
	
	СписокСимволов = ПолучитьСписокЗапрещенныхСимволовВИменахФайлов();
	
	Для Каждого СтрокаЗапретногоСимвола  Из СписокСимволов Цикл
		ИтоговоеИмяФайла = СтрЗаменить(ИтоговоеИмяФайла,  СтрокаЗапретногоСимвола.Значение, "");					
	КонецЦикла;
	
	Возврат ИтоговоеИмяФайла;
	
КонецФункции

Функция ПервоначальнаяНастройкаОткрывалась() Экспорт
	
	Возврат Константы.Конфигурация_НастройкаОткрывалась.Получить();
	
КонецФункции

Функция ПолучитьСписокЗапрещенныхСимволовВИменахФайлов() Экспорт
	
	СписокСимволов = Новый СписокЗначений();
	
	СписокСимволов.Добавить("\");
	СписокСимволов.Добавить(":");
    СписокСимволов.Добавить("/");
	СписокСимволов.Добавить("*");
	СписокСимволов.Добавить("&");
	СписокСимволов.Добавить("""");
	СписокСимволов.Добавить("<");
	СписокСимволов.Добавить(">");
	СписокСимволов.Добавить("|");
	
	Возврат СписокСимволов;
	
КонецФункции

Процедура ДобавитьПараметрПриложения_Гугл(Соответствие)
	
	// Источник информации
	// https://infostart.ru/1c/articles/1273600/
	
	ПараметрыЗаполнения = Новый Соответствие;
	
	СписокПрав 			= Новый Соответствие;
	
	ДобавитьПараметрВСоответствие("auth/userinfo.email", 			"Чтение электронной почты Google", 					СписокПрав);
	ДобавитьПараметрВСоответствие("auth/drive", 					"Полные права в облачном хранилище Google.Диск", 	СписокПрав);

	ПараметрыЗаполнения.Вставить("Ключ_API",		"AIzaSyDD7y-kDMZ5ioW-DqCBIrC7UhPRD-p7ww8");
	ПараметрыЗаполнения.Вставить("Ключ_ID",			"131986004411-1ms8498itj4c45l1vmte7qf7jvf4e1mc.apps.googleusercontent.com");
	ПараметрыЗаполнения.Вставить("Ключ_Secret",		"siWQg13NR9nPYlnUF_mo2bqU");
	
	// Источник информации
	// https://infostart.ru/1c/articles/1030500/
	ПараметрыЗаполнения.Вставить("Сервер_API", 		"https://www.googleapis.com/");
	ПараметрыЗаполнения.Вставить("Авторизация",		"accounts.google.com/o/oauth2/v2/auth");
	
	ПараметрыАвторизации = Новый Соответствие;
	
	ДобавитьПараметрВСоответствие("client_id", 		ПараметрыЗаполнения.Получить("Ключ_ID"), ПараметрыАвторизации);
	ДобавитьПараметрВСоответствие("redirect_uri",   "http://localhost", 				 	 ПараметрыАвторизации);
	ДобавитьПараметрВСоответствие("redirect_uri2",  "https://accounts.google.com/o/oauth2/v2/auth", 				 	 ПараметрыАвторизации);

	ДобавитьПараметрВСоответствие("redirect_API", 	"urn:ietf:wg:oauth:2.0:oob", 			 ПараметрыАвторизации);

	СписокПравСтрокой = ОМ_Сервер.СоответствиеВСтроку(СписокПрав, " ", , ПараметрыЗаполнения.Получить("Сервер_API"), , Истина);
	
	ДобавитьПараметрВСоответствие("scope", 			СписокПравСтрокой, 						 ПараметрыАвторизации);
	ДобавитьПараметрВСоответствие("response_type",  "code", 						 		 ПараметрыАвторизации);
	ДобавитьПараметрВСоответствие("prompt",  		"consent", 						 		 ПараметрыАвторизации);	//Пользователю отображается только окно разрешения доступа к его пользовательским данным
	
	// А это нужно обязательно, чтобы у нас в ответе гугл прислал рефреш токен:
	// срок действия токена гугла - 1 час. Каждый час просить авторизоваться - так себе замысел.
	// Поэтому, имея рефреш токен, можно авторизовать 1 раз и обновлять срок действия полученного токена.
	ДобавитьПараметрВСоответствие("access_type", 	"offline", 								 ПараметрыАвторизации);
	
	ПараметрыЗаполнения.Вставить("ПараметрыАвторизации", ПараметрыАвторизации);
	
	ПараметрыЗаполнения.Вставить("Имя", 			"ГуглДиск");

	ПараметрыЗаполнения.Вставить("ИД", 				"update1c");
	ПараметрыЗаполнения.Вставить("НомерПроекта", 	"131986004411");
	ПараметрыЗаполнения.Вставить("ДатаСоздания", 	Дата(2021, 09, 18));
	ПараметрыЗаполнения.Вставить("СписокПрав", 		СписокПрав);
	
	Соответствие.Вставить(ПараметрыЗаполнения.Получить("Имя"), ПараметрыЗаполнения);
	
КонецПроцедуры

Процедура ДобавитьПараметрПриложения_Яндекс(Соответствие)
	
	СписокПрав = Новый Соответствие;
	
	ДобавитьПараметрВСоответствие("Яндекс.Диск WebDAV API", "Доступ к Яндекс.Диску для приложений", СписокПрав);
	
	ДобавитьПараметрВСоответствие("Яндекс.Диск REST API", "Запись в любом месте на Диске", 			СписокПрав);
	ДобавитьПараметрВСоответствие("Яндекс.Диск REST API", "Чтение всего Диска", 					СписокПрав);
	ДобавитьПараметрВСоответствие("Яндекс.Диск REST API", "Доступ к информации о Диске", 			СписокПрав);
	ДобавитьПараметрВСоответствие("Яндекс.Диск REST API", "Доступ к папке приложения на Диске", 	СписокПрав);
	
	ПараметрыЗаполнения = Новый Соответствие;
	
	ПараметрыЗаполнения.Вставить("Имя", 			"ЯндексДиск");
	
	ПараметрыЗаполнения.Вставить("ИД", 				"43c9fe5ac86247c59baff4e65a9f7ec4");
	ПараметрыЗаполнения.Вставить("Пароль", 			"00c9851ef2984c09b7ce4571bf683c2f");
	ПараметрыЗаполнения.Вставить("Гиперссылка", 	"https://oauth.yandex.ru/client/" + ПараметрыЗаполнения.Получить("ИД"));
	ПараметрыЗаполнения.Вставить("ДатаСоздания", 	Дата(2021, 09, 17));
	
	ПараметрыЗаполнения.Вставить("Авторизация", 	"oauth.yandex.ru/authorize");
	
	ПараметрыАвторизации = Новый Соответствие;
	
	ДобавитьПараметрВСоответствие("client_id", 		ПараметрыЗаполнения.Получить("ИД"), 	 ПараметрыАвторизации);
	ДобавитьПараметрВСоответствие("response_type",  "code", 						 		 ПараметрыАвторизации);
	
	ПараметрыЗаполнения.Вставить("ПараметрыАвторизации", ПараметрыАвторизации);
	
	ПараметрыЗаполнения.Вставить("СписокПрав", 		СписокПрав);
	
	Соответствие.Вставить(ПараметрыЗаполнения.Получить("Имя"), ПараметрыЗаполнения);
	
КонецПроцедуры

Процедура ДобавитьПараметрПриложения_ДропБокс(Соответствие)
	
	СписокПрав = Новый Соответствие;
	
	ДобавитьПараметрВСоответствие("account_info.read", 		"View basic information about your Dropbox account such as your username, email, and country", 	СписокПрав);
	
	ДобавитьПараметрВСоответствие("files.metadata.write", 	"View and edit information about your Dropbox files and folders", 								СписокПрав);
	ДобавитьПараметрВСоответствие("files.metadata.read", 	"View information about your Dropbox files and folders", 										СписокПрав);
	ДобавитьПараметрВСоответствие("files.content.write", 	"Edit content of your Dropbox files and folders", 												СписокПрав);
	ДобавитьПараметрВСоответствие("files.content.read", 	"View content of your Dropbox files and folders", 												СписокПрав);
	
	ПараметрыЗаполнения = Новый Соответствие;
	
	ПараметрыЗаполнения.Вставить("Имя", 			"ДропБокс");
	//
	ПараметрыЗаполнения.Вставить("Ключ_API",		"Hhx-E88iZNAAAAAAAAAAATa26_A4KI83_HjEPggVSR4aaBr_ft4Ug_1FmBayMx4z");	// Acces token
	 													// App key
	ПараметрыЗаполнения.Вставить("Ключ_Secret",		"ctg7djccj1h32bj");														// App secret
	//ПараметрыЗаполнения.Вставить("Гиперссылка", 	"https://oauth.yandex.ru/client/" + ПараметрыЗаполнения.Получить("ИД"));
	ПараметрыЗаполнения.Вставить("ДатаСоздания", 	Дата(2021, 09, 27));
	//
	ПараметрыЗаполнения.Вставить("Авторизация", 	"https://www.dropbox.com/oauth2/authorize");
	//
	ПараметрыАвторизации = Новый Соответствие;
	
	ДобавитьПараметрВСоответствие("client_id",		"8g29xt4ecl4g7wm", 	ПараметрыАвторизации);
	ДобавитьПараметрВСоответствие("response_type",  "code", 			ПараметрыАвторизации);
	ДобавитьПараметрВСоответствие("redirect_API", 	"http://localhost", ПараметрыАвторизации);
	
	ПараметрыЗаполнения.Вставить("ПараметрыАвторизации", ПараметрыАвторизации);
	
	ПараметрыЗаполнения.Вставить("СписокПрав", 		СписокПрав);
	
	Соответствие.Вставить(ПараметрыЗаполнения.Получить("Имя"), ПараметрыЗаполнения);
	
КонецПроцедуры

Процедура ДобавитьПараметрВСоответствие(Знач ИмяПараметра, Знач ЗначениеПараметра, Соответствие) Экспорт
	
	СуществующиеЗначения = Соответствие.Получить(ИмяПараметра);
	
	Если СуществующиеЗначения <> Неопределено Тогда
		
		Если СуществующиеЗначения.Найти(ЗначениеПараметра) = Неопределено Тогда
			СуществующиеЗначения.Добавить(ЗначениеПараметра);
		КонецЕсли;
		
	Иначе
		
		СуществующиеЗначения = Новый Массив;
		
		Если ТипЗнч(ЗначениеПараметра) = Тип("Массив") Тогда
			СуществующиеЗначения = ОМ_Сервер.СкопироватьМассив(ЗначениеПараметра);
		Иначе
			СуществующиеЗначения.Добавить(ЗначениеПараметра);
		КонецЕсли;
		
	КонецЕсли;
	
	Соответствие.Вставить(ИмяПараметра, СуществующиеЗначения);
	
КонецПроцедуры
	
Процедура ПриНачалеРаботыСистемы() Экспорт
	
	ИнформацияПроБазу = Получить_ИнформациюПроБазу();
		
	Константы.ФоновыеЗадания_РаботаНаСервере.Установить(ИнформацияПроБазу.СтрокаСоединения.Режим = "Серверный");
	
	Справочники.КаталогиЗагрузки.ИнициализацияСправочника();
	
	МаксЧисло = Константы.ФоновыеЗадания_КоличествоПотоков.Получить();
	
	Если МаксЧисло = 0 Тогда
		ДопустимоеЧислоПотоков = ОМ_РегламентныеОперации.МаксЧислоПотоковПоУмолчанию();
		Константы.ФоновыеЗадания_КоличествоПотоков.Установить(ДопустимоеЧислоПотоков);	
	КонецЕсли;
	
	ОМ_Обновления1С.ОбновитьОтборПоДате();
	
	ОМ_Сервер.УдалитьВременныеФайлы();
	//СоздатьПользователяБД(СистемныйПользовательПоУмолчанию(), Истина);
	//
	//СоздатьПользователяБД("Пользователь", Ложь);
	
КонецПроцедуры

Процедура СоздатьПользователяБД(ИмяПользователя, ЭтоСистемныйПользователь = Ложь) 
	
	Если ЭтоСистемныйПользователь Тогда
		ПользовательБД = ПользователиИнформационнойБазы.НайтиПоИмени(СистемныйПользовательПоУмолчанию());
	Иначе
		ПользовательБД = ПользователиИнформационнойБазы.НайтиПоИмени(ИмяПользователя);
	КонецЕсли;
	
	Если ПользовательБД = Неопределено Тогда
		
		ПользовательБД = ПользователиИнформационнойБазы.СоздатьПользователя();
		
	Иначе
		Возврат;
	КонецЕсли;
	
	Если ЭтоСистемныйПользователь Тогда
		ПользовательБД.Имя 								= СистемныйПользовательПоУмолчанию();
		ПользовательБД.Пароль 							= КлючСистемногоПользователя();
	Иначе
		ПользовательБД.Имя 								= ИмяПользователя;	
	КонецЕсли;
	
	Если ЭтоСистемныйПользователь Тогда
		
		ОписаниеЗащитыОтОпасныхДействий 					= Новый ОписаниеЗащитыОтОпасныхДействий;
		ОписаниеЗащитыОтОпасныхДействий.ПредупреждатьОбОпасныхДействиях = Ложь;
		
		ПользовательБД.ЗащитаОтОпасныхДействий = ОписаниеЗащитыОтОпасныхДействий;
		
		ПользовательБД.АутентификацияОС 					= Ложь;
		ПользовательБД.ЗапрещеноИзменятьПароль 				= Истина;
		ПользовательБД.ЗапрещеноВосстанавливатьПароль 		= Истина;
		
	КонецЕсли;
	
	ПользовательБД.ПоказыватьВСпискеВыбора 				= Не ЭтоСистемныйПользователь;
	
	ПользовательБД.Роли.Добавить(Метаданные.Роли.Найти("ВсеПрава"));
	
	ПользовательБД.Записать();
	
КонецПроцедуры

Функция ТипПлатформы_(Параметр, ПолучитьСтроку = Истина)
	
	Если ПолучитьСтроку Тогда
		Возврат Строка(Параметр);
	Иначе
		Возврат ТипПлатформы[Параметр];
	КонецЕсли;
	
КонецФункции

Функция Получить_СистемнуюИнформацию(КакСоответствие = Ложь) Экспорт
	
	Соответствие = Новый Соответствие;
	
	СистемнаяИнформация = Новый СистемнаяИнформация;
	
	Соответствие.Вставить("ВерсияОС", 						СистемнаяИнформация.ВерсияОС);
	Соответствие.Вставить("ВерсияПриложения", 				СистемнаяИнформация.ВерсияПриложения);
	Соответствие.Вставить("ИдентификаторКлиента", 			СистемнаяИнформация.ИдентификаторКлиента);
	Соответствие.Вставить("ИнформацияПрограммыПросмотра", 	СистемнаяИнформация.ИнформацияПрограммыПросмотра);
	Соответствие.Вставить("ОперативнаяПамять", 				СистемнаяИнформация.ОперативнаяПамять);
	Соответствие.Вставить("Процессор", 						СистемнаяИнформация.Процессор);
	Соответствие.Вставить("ТипПлатформы", 					ТипПлатформы_(СистемнаяИнформация.ТипПлатформы));
	
	Соответствие.Вставить("КаталогПрограммы", 				КаталогПрограммы());
	Соответствие.Вставить("ПутьЗапуска", 					КаталогПрограммы() + "1cv8.exe");
	
	
	Если КакСоответствие Тогда
		Возврат Соответствие;
	Иначе
		Возврат ОМ_Сервер.СоответствиеВСтруктуру(Соответствие);
	КонецЕсли;
	
КонецФункции

Функция Получить_ИнформациюПроБазу(КакСоответствие = Ложь) Экспорт
	
	Соответствие = Новый Соответствие;
	
	Соответствие.Вставить("СистемнаяИнформация", 								Получить_СистемнуюИнформацию());
	
	Соответствие.Вставить("СтрокаСоединения", 									Получить_СтрокаСоединенияБазы());
	
	Соответствие.Вставить("ОписаниеОбновлений",									Получить_ОписаниеОбновлений());
	
	Соответствие.Вставить("ПараметрыПриложенияAPI",								Получить_ПараметрыПриложенияAPI());
	
	Если КакСоответствие Тогда
		Возврат Соответствие;
	Иначе
		Возврат ОМ_Сервер.СоответствиеВСтруктуру(Соответствие);
	КонецЕсли;
	
КонецФункции

Функция Получить_ОписаниеОбновлений(КакСоответствие = Ложь) Экспорт
	
	Соответствие = Новый Соответствие;
	
	Соответствие.Вставить("Информация", 				"ICDEV-6631");
	
	Соответствие.Вставить("ТекущаяВерсия", 				Метаданные.Версия);
	Соответствие.Вставить("АктуальнаяВерсия", 			Метаданные.Версия);
	
	Соответствие.Вставить("НужноОбновить", 				Ложь);
	Соответствие.Вставить("ЭтоКритикал", 				Истина);
	
	Соответствие.Вставить("НовоеВВерсии", 				Новый ТабличныйДокумент);
	
	Соответствие_СетевоеХранилище 	= Новый Соответствие;
	
	Соответствие_СетевоеХранилище.Вставить("АдресПроекта",	"fox951/Constructor-XML/main/Update1C");
	Соответствие_СетевоеХранилище.Вставить("Обновление",	"Version.xml");
	Соответствие_СетевоеХранилище.Вставить("Изменения",		"ChangeLog.xml");
	Соответствие_СетевоеХранилище.Вставить("Конфигурация",	"/Actual_CF/1Cv8.cf");
	Соответствие_СетевоеХранилище.Вставить("Сервер", 		"https://raw.githubusercontent.com/");
	
	Соответствие.Вставить("СетевоеХранилище", 			Соответствие_СетевоеХранилище);
	
	Структура = ОМ_Сервер.СоответствиеВСтруктуру(Соответствие);
	
	ПроверитьАктуальностьКонфигурации(Структура);
	
	////////////
	
	// Перезаполняем поля, т.к. они были изменены.
	
	Соответствие.Вставить("АктуальнаяВерсия", 			Структура.АктуальнаяВерсия);
	
	Соответствие.Вставить("НужноОбновить", 				Структура.НужноОбновить);
	Соответствие.Вставить("ЭтоКритикал", 				Структура.ЭтоКритикал);
	
	Соответствие.Вставить("НовоеВВерсии", 				Структура.НовоеВВерсии);
	
	////////////
	
	Соответствие.Вставить("ПоказыватьИзменения", 		
	Константы.Конфигурация_ПоказыватьИзменения.Получить() 
	Или Соответствие.Получить("НужноОбновить") 
	Или Константы.Конфигурация_ВерсияБД.Получить() <> Метаданные.Версия
	Или Константы.Конфигурация_НастройкаОткрывалась.Получить() = Ложь);
	
	Если КакСоответствие Тогда
		Возврат Соответствие;
	Иначе
		Возврат ОМ_Сервер.СоответствиеВСтруктуру(Соответствие);
	КонецЕсли;
	
КонецФункции

Функция Получить_СтрокаСоединенияБазы(КакСоответствие = Ложь) Экспорт
	
	СтрокаСоединенияСБД = СтрокаСоединенияИнформационнойБазы();
	
	Соответствие = Новый Соответствие;
	
	ЭтоФайловаяИБ = Найти(Врег(СтрокаСоединенияСБД), "FILE=") = 1;
	
	Если ЭтоФайловаяИБ Тогда
		
		ПутьКБД = Сред(СтрокаСоединенияСБД, 6, СтрДлина(СтрокаСоединенияСБД) - 6);
		
		ФайловаяБД = Истина;
		                              
		Соответствие.Вставить("Режим", 		"Файловый");
		Соответствие.Вставить("ПутьКБД", 	СтрЗаменить(ПутьКБД, """",""));
		Соответствие.Вставить("Сервер", 	"");
		
	Иначе
		
		ПозицияПоиска = Найти(Врег(СтрокаСоединенияСБД), "SRVR=");
		
		Если ПозицияПоиска <> 1 Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		ПозицияТочкиСЗапятой = Найти(СтрокаСоединенияСБД, ";");
		НачальнаяПозицияКопирования = 6 + 1;
		КонечнаяПозицияКопирования = ПозицияТочкиСЗапятой - 2; 
		
		ИмяСервера = Сред(СтрокаСоединенияСБД, НачальнаяПозицияКопирования, КонечнаяПозицияКопирования - НачальнаяПозицияКопирования + 1);
		
		СтрокаСоединенияСБД = Сред(СтрокаСоединенияСБД, ПозицияТочкиСЗапятой + 1);
		
		// позиция имени сервера
		ПозицияПоиска = Найти(Врег(СтрокаСоединенияСБД), "REF=");
		
		Если ПозицияПоиска <> 1 Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		НачальнаяПозицияКопирования = 6;
		ПозицияТочкиСЗапятой = Найти(СтрокаСоединенияСБД, ";");
		КонечнаяПозицияКопирования = ПозицияТочкиСЗапятой - 2; 
		
		ИмяИБНаСервере = Сред(СтрокаСоединенияСБД, НачальнаяПозицияКопирования, КонечнаяПозицияКопирования - НачальнаяПозицияКопирования + 1);
		
		ПутьКБД = ИмяСервера + "/" + ИмяИБНаСервере;
		ФайловаяБД = Ложь;
		
		Соответствие.Вставить("Режим", 		"Серверный");
		Соответствие.Вставить("ПутьКБД", 	СтрЗаменить(ИмяИБНаСервере, """",""));
		Соответствие.Вставить("Сервер", 	СтрЗаменить(ИмяСервера, """",""));
		
	КонецЕсли;
	
	Соответствие.Вставить("СистемныйПользователь", 			СистемныйПользовательПоУмолчанию());
	Соответствие.Вставить("ПарольСистемногоПользователя", 	КлючСистемногоПользователя());
	
	Если КакСоответствие Тогда
		Возврат Соответствие;
	Иначе
		Возврат ОМ_Сервер.СоответствиеВСтруктуру(Соответствие);
	КонецЕсли;
	
КонецФункции 

Функция СистемныйПользовательПоУмолчанию()
	
	Возврат "System_Update";
	
КонецФункции

Функция КлючСистемногоПользователя()
	
	Возврат "12345678";
	
КонецФункции

Функция Получить_ПараметрыПриложенияAPI(КакСоответствие = Ложь) Экспорт
	
	Соответствие = Новый Соответствие;
	
	ДобавитьПараметрПриложения_Яндекс(Соответствие);
	ДобавитьПараметрПриложения_Гугл(Соответствие);
	ДобавитьПараметрПриложения_ДропБокс(Соответствие);
	
	Если КакСоответствие Тогда
		Возврат Соответствие;
	Иначе
		Возврат ОМ_Сервер.СоответствиеВСтруктуру(Соответствие);
	КонецЕсли;
	
КонецФункции

Процедура ПроверитьАктуальностьКонфигурации(ОписаниеОбновлений)
	
	ДанныеХранилищаGIT = ОписаниеОбновлений.СетевоеХранилище;
	
	ОписаниеАктуальнойКонфигурации_Файл = ОМ_Сервер.ПолучитьИмяВременногоФайла_("xml");
	
	Попытка 
		КопироватьФайл(ДанныеХранилищаGIT.Сервер + ДанныеХранилищаGIT.АдресПроекта + "/" + ДанныеХранилищаGIT.Обновление, ОписаниеАктуальнойКонфигурации_Файл);
		Успешно = Истина;
	Исключение
		Успешно = Ложь;
	КонецПопытки;

	Если Успешно Тогда
		
		// + Получение информации про актуальную версию конфигурации
		
		ОВерсииДокумент 		= ОМ_Парсинг.Новый_XMLДокумент_DOM();
		ОВерсииДокумент.load(ОписаниеАктуальнойКонфигурации_Файл); 
		
		UpdateРаздел 	= ОМ_Парсинг.Получить_ЭлементДокумента_DOM(ОВерсииДокумент, "Update");
		
		АктуальнаяВерсия	= ОМ_Парсинг.Получить_ЭлементДокумента_DOM(UpdateРаздел, "Version");
		
		Если АктуальнаяВерсия <> Неопределено Тогда
			АктуальнаяВерсия = АктуальнаяВерсия.text;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(АктуальнаяВерсия) Тогда		
			ВерсияАктуальна = АктуальнаяВерсия = ОписаниеОбновлений.ТекущаяВерсия;
		Иначе
			ВерсияАктуальна = Ложь;
		КонецЕсли;
						
		КритикалОбновление = ОМ_Парсинг.Получить_ОтдельныйУзел_DOM(UpdateРаздел, "Critical");
		
		Если КритикалОбновление <> Неопределено Тогда
			ЭтоКритикал = Врег(КритикалОбновление.text) = Врег("True");	
		Иначе
			ЭтоКритикал = Ложь;	
		КонецЕсли;
		
		ОписаниеОбновлений.АктуальнаяВерсия = АктуальнаяВерсия;
		ОписаниеОбновлений.НужноОбновить 	= Не ВерсияАктуальна;
		ОписаниеОбновлений.ЭтоКритикал		= ЭтоКритикал;
		
		УдалитьФайлы(ОписаниеАктуальнойКонфигурации_Файл);
		
		// - Получение информации про актуальную версию конфигурации
		
		// + Получение списка изменений конфигурации
		
		ТаблицаИзменений = Получить_ТаблицуИзменений(ДанныеХранилищаGIT);
		
		Если ТаблицаИзменений.Количество() > 0 Тогда
			
			ТабДокИзменений = СформироватьТабдокИзменений(ТаблицаИзменений);
			
		Иначе
			
			ТабДокИзменений = Новый ТабличныйДокумент;
			
		КонецЕсли;
		
		ОписаниеОбновлений.НовоеВВерсии = ТабДокИзменений;
	
		// - Получение списка изменений конфигурации
				
	КонецЕсли; 

КонецПроцедуры

Функция СформироватьТабдокИзменений(ТаблицаИзменений, ДобавитьИндекс = Ложь) Экспорт
	
	Макет = ПолучитьОбщийМакет("ИзмененияВВерсии");
	
	Табдок = Новый ТабличныйДокумент;
	
	НомерТекВерсии = Метаданные.Версия;
	
	Для Каждого СтрокаТЧ Из ТаблицаИзменений Цикл
		
		Индекс = 0;
		
		Если СтрокаТЧ.Номер = НомерТекВерсии Тогда
			
			ОбластьОписание = Макет.ПолучитьОбласть("ОписаниеНовое");
			
		Иначе
			
			ОбластьОписание = Макет.ПолучитьОбласть("Описание");
			
		КонецЕсли;
		
		ОбластьОписание.Параметры.Дата 		= Формат(СтрокаТЧ.Дата, "ДЛФ=D");
		ОбластьОписание.Параметры.Номер 	= СтрокаТЧ.Номер;
		
		СписокОписаний 						= Новый СписокЗначений;
		
		Массив 								= СтрРазделить(СтрокаТЧ.Описание, Символы.ПС, Ложь);
		СписокОписаний.ЗагрузитьЗначения(Массив);
		
		СписокОписаний.СортироватьПоЗначению(НаправлениеСортировки.Возр);
		
		Если ДобавитьИндекс Тогда
			
			Массив = СписокОписаний.ВыгрузитьЗначения();
			
			КопияМассива = Новый Массив;
			
			Для Каждого Стр Из Массив Цикл
				
				Индекс = Индекс + 1;
				
				КопияМассива.Добавить(Строка(Индекс) + ": " + Стр);
				
			КонецЦикла;
			
			СписокОписаний.ЗагрузитьЗначения(КопияМассива);
			
			СписокОписаний.СортироватьПоЗначению(НаправлениеСортировки.Возр);
			
		КонецЕсли;
		
		ОбластьОписание.Параметры.Описание 	= СтрСоединить(СписокОписаний.ВыгрузитьЗначения(), Символы.ПС);
		
		Если СтрокаТЧ.Критичное Тогда
			ОбластьОписание.Параметры.Критикал = "*** ";	
		Иначе
			ОбластьОписание.Параметры.Критикал = "";
		КонецЕсли;             
		
		Табдок.Вывести(ОбластьОписание);
		
	КонецЦикла;
	
	Возврат Табдок;
	
КонецФункции

Функция Получить_ТаблицуИзменений(ДанныеХранилищаGIT) Экспорт
	
	ТаблицаИзменений = Новый ТаблицаЗначений;
	
	ТаблицаИзменений.Колонки.Добавить("Номер");
	ТаблицаИзменений.Колонки.Добавить("Дата");
	ТаблицаИзменений.Колонки.Добавить("Описание");
	ТаблицаИзменений.Колонки.Добавить("Критичное", Новый ОписаниеТипов("Булево"));
		
	ВременныйФайлСпискаИзменений = ОМ_Сервер.ПолучитьИмяВременногоФайла_("xml");
	
	Успешно = Ложь;
		
	Попытка 
		КопироватьФайл(ДанныеХранилищаGIT.Сервер + ДанныеХранилищаGIT.АдресПроекта + "/" + ДанныеХранилищаGIT.Изменения, ВременныйФайлСпискаИзменений);
		Успешно = Истина;
	Исключение
		Успешно = Ложь;
	КонецПопытки; 
	
	Если Успешно Тогда
		
		ChangeLogДокумент = ОМ_Парсинг.Новый_XMLДокумент_DOM();
		ChangeLogДокумент.load(ВременныйФайлСпискаИзменений); // Читаем схему.
		
		ChangeLogРаздел 	= ОМ_Парсинг.Получить_ЭлементДокумента_DOM(ChangeLogДокумент, "ChangeLog");
		
		СписокИзмененийDOM  = ОМ_Парсинг.Получить_Узлы_DOM(ChangeLogРаздел, "Info");
		
		Для Каждого ОписаниеРелиза Из СписокИзмененийDOM Цикл
			
			Нстр 			= ТаблицаИзменений.Добавить(); 
			
			Нстр.Номер 		= ОМ_Парсинг.Получить_Атрибут_DOM(ОписаниеРелиза, "Version");
			
			ДатаРелиза 		= ОМ_Парсинг.Получить_Атрибут_DOM(ОписаниеРелиза, "Date");
			
			Если ЗначениеЗаполнено(ДатаРелиза) Тогда
				Нстр.Дата 	= Дата(ДатаРелиза);
			КонецЕсли;
			
			Описание 		= ОМ_Парсинг.Получить_ЭлементДокумента_DOM(ОписаниеРелиза, "Description");
			
			СтрокиОписаний  = ОМ_Парсинг.Получить_Узлы_DOM(Описание, "T");
			
			МассивОписаний  = Новый Массив;
			
			Для Каждого СтрокаDOM Из СтрокиОписаний Цикл
				
				МассивОписаний.Добавить(ОбработатьТекст(СтрокаDOM.text));
				
			КонецЦикла;
			
			Нстр.Описание   = СтрСоединить(МассивОписаний, Символы.ПС);
			
			ЭтоКритикал		= ОМ_Парсинг.Получить_ЭлементДокумента_DOM(ОписаниеРелиза, "Critical").Text;
			
			ЭтоКритикал 	= Врег(ЭтоКритикал) = Врег("True"); 
			
			Нстр.Критичное 	= ЭтоКритикал;
			
		КонецЦикла;
		
	Иначе 
		
		Нстр 			= ТаблицаИзменений.Добавить();
		
		Нстр.Номер 		= Метаданные.Версия;
		Нстр.Дата 		= Дата(1,1,1);
		Нстр.Описание	= "<Не удалось получить описание изменений. Возможно, проблемы с сетью>";
		Нстр.Критичное  = Истина;
			
	КонецЕсли;
	
	//////////////////////////////////
	
	ТаблицаИзменений.Сортировать("Дата Убыв, Номер Убыв, Описание Возр");
	
	УдалитьФайлы(ВременныйФайлСпискаИзменений);
	
	Возврат ТаблицаИзменений;
	
КонецФункции

Функция ОбработатьТекст(Знач СтрокаТекста) Экспорт
	
	Копия = СокрЛП(СтрокаТекста);
	
	СтрокаТекста = СокрЛП(СтрокаТекста);
	
	Пока СтрНайти(СтрокаТекста, "		") <> 0 Цикл
		
		СтрокаТекста = СокрЛП(СтрЗаменить(СтрокаТекста, "		", " "));
		
	КонецЦикла;
	
	Пока СтрНайти(СтрокаТекста, "  ") <> 0 Цикл
		
		СтрокаТекста = СокрЛП(СтрЗаменить(СтрокаТекста, "  ", " "));
		
	КонецЦикла;
	
	СтрокаТекста = СокрЛП(СтрЗаменить(СтрокаТекста, Символы.ПС, " "));
	
	Возврат СтрокаТекста;
	
КонецФункции

